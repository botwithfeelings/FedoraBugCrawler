<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1446850</bug_id>
          
          <creation_ts>2017-04-29 14:42:00 -0400</creation_ts>
          <short_desc>ImportError: pycurl: libcurl link-time ssl backend (openssl) is different from compile-time ssl backend (nss)</short_desc>
          <delta_ts>2017-05-08 10:20:15 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>curl</component>
          <version>25</version>
          <rep_platform>Unspecified</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>ERRATA</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>low</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Lukas Slebodnik">lslebodn</reporter>
          <assigned_to name="Kamil Dudka">kdudka</assigned_to>
          <cc>kdudka</cc>
    
    
    <cc>paul</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in>python-pycurl-7.43.0-9.fc27</cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2017-05-06 20:02:04</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>10374464</commentid>
    <comment_count>0</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-04-29 14:42:58 -0400</bug_when>
    <thetext>Description of problem:
I have configured daily update of packages on CI machine with rawhide.
There are not any strict requirements/conflicts between curl and pycurl therefore one of daily update made python2-pycurl unfunctional.

sh$ python2 -c &apos;import pycurl&apos;
Traceback (most recent call last):
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
ImportError: pycurl: libcurl link-time ssl backend (openssl) is different from compile-time ssl backend (nss)

It should be fixed in packaging level and we should not rely on runtime failure. 

sh$ rpm -q --conflicts libcurl
sh$ echo $?
0

sh$ rpm -q --requires python2-pycurl
/bin/sh
libc.so.6()(64bit)
libc.so.6(GLIBC_2.14)(64bit)
libc.so.6(GLIBC_2.15)(64bit)
libc.so.6(GLIBC_2.2.5)(64bit)
libc.so.6(GLIBC_2.3.4)(64bit)
libc.so.6(GLIBC_2.4)(64bit)
libcurl(x86-64) &gt;= 7.52.1
libcurl.so.4()(64bit)
libpthread.so.0()(64bit)
libpython2.7.so.1.0()(64bit)
libssl3.so()(64bit)
python(abi) = 2.7
rpmlib(CompressedFileNames) &lt;= 3.0.4-1
rpmlib(FileDigests) &lt;= 4.6.0-1
rpmlib(PartialHardlinkSets) &lt;= 4.0.4-1
rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
rpmlib(PayloadIsXz) &lt;= 5.2-1
rtld(GNU_HASH)

Version-Release number of selected component (if applicable):
sh$ rpm -q python2-pycurl curl
python2-pycurl-7.43.0-7.fc26.x86_64
curl-7.54.0-3.fc27.x86_64

How reproducible:
Deterministic

Steps to Reproduce:
1. Install python2-pycurl &lt;= 7.43.0-7.fc26.x86_64
2. try to install curl with openssl support (&gt;=7.54.0-3.fc27_

Actual results:
It is possible to install python-pycurl built with nss and curl built with openssl  

Expected results:
It is not possible to install python-pycurl and curl
which were compiled with different crypto.


Additional info:
python2-pycurl-7.43.0-8.fc27.x86_64 requires unsufficient version of libcurl
sh$ rpm -q --requires python2-pycurl  | grep curl
libcurl(x86-64) &gt;= 7.54.0
libcurl.so.4()(64bit)

sh$ rpm -q python2-pycurl curl
python2-pycurl-7.43.0-8.fc27.x86_64
curl-7.54.0-2.fc27.x86_64

sh$ python2 -c &apos;import pycurl&apos;
Traceback (most recent call last):
  File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
ImportError: pycurl: libcurl link-time ssl backend (nss) is different from compile-time ssl backend (openssl)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10374543</commentid>
    <comment_count>1</comment_count>
    <who name="Paul Howarth">paul</who>
    <bug_when>2017-04-29 17:04:11 -0400</bug_when>
    <thetext>This should resolve itself shortly when your CI system picks up curl 7.54.0-3.fc27.

I don&apos;t think it&apos;s usual for explicit conflicts for this sort of issue to happen when packages are changed in Rawhide and not even branched yet, and if they were, I&apos;d think the conflict should go in the python-pycurl package anyway, since that&apos;s the one with the runtime compatibility check in it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10375849</commentid>
    <comment_count>2</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-01 05:39:12 -0400</bug_when>
    <thetext>(In reply to Paul Howarth from comment #1)
&gt; This should resolve itself shortly when your CI system picks up curl
&gt; 7.54.0-3.fc27.
&gt;
&gt; I don&apos;t think it&apos;s usual for explicit conflicts for this sort of issue to
&gt; happen when packages are changed in Rawhide and not even branched yet, and
&gt; if they were, I&apos;d think the conflict should go in the python-pycurl package
&gt; anyway, since that&apos;s the one with the runtime compatibility check in it.
NO, python-pycurl built with openssl should require minimal version of curl which is build with opensll. In this case curl-7.54.0-3.fc27.x86_64; because as I mentioned in description curl-7.54.0-2.fc27.x86_64 is built with nss.

But requires in python-pycurl will not prohibit older python-pycurl and the latest curl from rawide. In another words, packagers should not rely on fact that user will always call &quot;dnf update&quot;. User might update just sub-set of packages on system &quot;dnf update curl&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10375854</commentid>
    <comment_count>3</comment_count>
    <who name="Paul Howarth">paul</who>
    <bug_when>2017-05-01 06:01:51 -0400</bug_when>
    <thetext>(In reply to Lukas Slebodnik from comment #2)
&gt; But requires in python-pycurl will not prohibit older python-pycurl and the
&gt; latest curl from rawide. In another words, packagers should not rely on fact
&gt; that user will always call &quot;dnf update&quot;. User might update just sub-set of
&gt; packages on system &quot;dnf update curl&quot;

That doesn&apos;t appear to be a universally-agreed opinion:

https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/thread/34WLAFRIARC4QK5QA7RCP3ZRGO5F7OZD/

  &quot;It is expected that users of development releases update the whole system,
   not piecemeal.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10375925</commentid>
    <comment_count>4</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-01 08:05:30 -0400</bug_when>
    <thetext>(In reply to Paul Howarth from comment #3)
&gt; (In reply to Lukas Slebodnik from comment #2)
&gt; &gt; But requires in python-pycurl will not prohibit older python-pycurl and the
&gt; &gt; latest curl from rawide. In another words, packagers should not rely on fact
&gt; &gt; that user will always call &quot;dnf update&quot;. User might update just sub-set of
&gt; &gt; packages on system &quot;dnf update curl&quot;
&gt; 
&gt; That doesn&apos;t appear to be a universally-agreed opinion:
&gt; 
&gt; https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/
&gt; thread/34WLAFRIARC4QK5QA7RCP3ZRGO5F7OZD/
&gt; 
&gt;   &quot;It is expected that users of development releases update the whole system,
&gt;    not piecemeal.&quot;

My interpretation is different. There was issue between python-3.6.0 and python-3.6.1. The most important is that 3.6.1 will get to fedora 26 stable(and it is already there). Let assume that somebody would like to install/update python3-pycurl on fedora 25. &quot;dnf update --releasever=26 python3-pycurl&quot;. It would not update just a python3-pycurl but it will also pull python-3.6.1

But if i try something similar with curl; it will break it due to missing dependencies/conflicts.

  sh# cat /etc/os-release 
  NAME=Fedora
  VERSION=&quot;25 (Twenty Five)&quot;
  ID=fedora
  VERSION_ID=25
  PRETTY_NAME=&quot;Fedora 25 (Twenty Five)&quot;
  ANSI_COLOR=&quot;0;34&quot;
  CPE_NAME=&quot;cpe:/o:fedoraproject:fedora:25&quot;
  HOME_URL=&quot;https://fedoraproject.org/&quot;
  BUG_REPORT_URL=&quot;https://bugzilla.redhat.com/&quot;
  REDHAT_BUGZILLA_PRODUCT=&quot;Fedora&quot;
  REDHAT_BUGZILLA_PRODUCT_VERSION=25
  REDHAT_SUPPORT_PRODUCT=&quot;Fedora&quot;
  REDHAT_SUPPORT_PRODUCT_VERSION=25
  PRIVACY_POLICY_URL=https://fedoraproject.org/wiki/Legal:PrivacyPolicy

  sh# dnf install -y -d0 -e0 python3-pycurl fedora-repos-rawhide
  warning: /var/cache/dnf/fedora-310f9d37d74ceec1/packages/python3-pycurl-  7.43.0-4.fc25.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID fdb19c98: NOKEY
  sh# python3 -c &apos;import pycurl&apos;

  sh# dnf update --enablerepo=rawhide -d0 -e0 -y libcurl
  sh# python3 -c &apos;import pycurl&apos;
  Traceback (most recent call last):
    File &quot;&lt;string&gt;&quot;, line 1, in &lt;module&gt;
  ImportError: pycurl: libcurl link-time ssl backend (openssl) is different from compile-time ssl backend (nss)

&quot;dnf update --enablerepo=rawhide -d0 -e0 -y libcurl&quot; is very simplified version. Somebody can try new package from rawhide on f25/26 which requires new features from curl-7.54.0; and it will break python-pycurl.

It is clear enough that python2-pycurl &lt; 7.43.0-8.fc27 does not work with latest libcurl. In another words there is a conflict between these packages. And rpm has an ability to express conflicts between packages.

Fedora packaging guidelines says:
  RPM has very good capabilities of automatically finding dependencies for
  libraries and eg. Perl modules. In short, don&apos;t reinvent the wheel, but just
  let rpm do its job. 

But in this case automatically generated requires does not work as expected.

  First, if the lowest possible requirement is so old that nobody has a version
  older than that installed on any target distribution release, there&apos;s no need
  to include the version in the dependency at all. In that case we know the
  available software is new enough.

Prerequisite is false therefore minimal requires in python-pycurl is required.

But it does not solve that curl-7.54.0-3.fc27 is incompatible with old python-pycurl. curl-7.54.0-3.fc27 does not require python-pycurl therefore require will not solve this issue but conflict will solve. And that is exactly wat is described in guidelines http://fedoraproject.org/wiki/Packaging:Conflicts#Acceptable_Uses_of_Conflicts:
  As a general rule, Fedora packages must NOT contain any usage of the
  Conflicts: field. This field is commonly misused, when a Requires: would
  usually be more appropriate. It confuses depsolvers and end-users for no good
  reason. However, there are some cases in which using the Conflicts: field is
  appropriate and acceptable.

And in this case It would not confuse depsolver. Opposite is true; it will help depsolver to find a solution. (upgrade python{2,3}-pycurl as well)
Tested with on f25 and dnf/yum-deprecated + https://koji.fedoraproject.org/koji/taskinfo?taskID=19347487</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10378712</commentid>
    <comment_count>5</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-02 07:58:40 -0400</bug_when>
    <thetext>I do not understand what the run-time check brings us in the first place.  While it might be useful from upstream point of view, it is an unnecessary obstacle for Fedora users.  The TLS backend changes once per 10 years approximately.  So it could hardly happen that Fedora users install libcurl and pycurl compiled against different TLS backends, at least, if they use official repositories only.  Moreover, if it happens (only in rawhide, once per 10 years), it makes the transition too difficult for no real benefit.

Any objections against just disabling the run-time check in Fedora pycurl?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10378846</commentid>
    <comment_count>6</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-02 08:29:28 -0400</bug_when>
    <thetext>(In reply to Kamil Dudka from comment #5)
&gt; Any objections against just disabling the run-time check in Fedora pycurl?

What are implications of disabling runtime check?
Especially in case of mixed pycurl+nss(f25) and curl+openssl(rawhide).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10378867</commentid>
    <comment_count>7</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-02 08:35:47 -0400</bug_when>
    <thetext>I am not aware of anything bad that could happen unless the software written on top of pycurl uses features specific to a particular crypto backend.  However, if it did, a rebuild of pycurl could hardly fix it, it would just satisfy the run-time check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10378885</commentid>
    <comment_count>8</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-02 08:44:13 -0400</bug_when>
    <thetext>(In reply to Kamil Dudka from comment #7)
&gt; I am not aware of anything bad that could happen unless the software written
&gt; on top of pycurl uses features specific to a particular crypto backend. 
&gt; However, if it did, a rebuild of pycurl could hardly fix it, it would just
&gt; satisfy the run-time check.

OK, I think the simplest way would be to test :-)
pycurl+openssl+disabled runtime-check and curl-7.54.0-1.fc27.x86_64(still built with nss) and using yum-deprecated. Because python2 -c &apos;import pycurl&apos; is not sufficient functional testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10378895</commentid>
    <comment_count>9</comment_count>
    <who name="Paul Howarth">paul</who>
    <bug_when>2017-05-02 08:46:48 -0400</bug_when>
    <thetext>Seems to be related to these:

https://github.com/pycurl/pycurl/issues/109
https://github.com/pycurl/pycurl/issues/120

Looks like convenience rather than fixing any particular problem.

FWIW, an alternative approach to satisfying this requirement from an rpm standpoint could be to provide libcurl-{nss|openssl|gnutls} = %{version}-%{release} in the libcurl package, and then have downstream users that want a specific backend require that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10379136</commentid>
    <comment_count>10</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-02 09:58:36 -0400</bug_when>
    <thetext>Yes, but it would make the run-time check strengthen by an install-time check.  Both of them are artificial IMO.  The supported ABI of libcurl is kept if the TLS backend is switched.  Users should be free to recompile libcurl against a different TLS backend while keeping the rest of their system running (though unsupported from Fedora point of view).

I propose to disable the run-time check now.  If it triggers any real problem in environments with mixed old/new libcurl/pycurl packages, we can revert it and introduce the stricter RPM dependencies later on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10379512</commentid>
    <comment_count>11</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-02 11:42:45 -0400</bug_when>
    <thetext>(In reply to Lukas Slebodnik from comment #8)
&gt; pycurl+openssl+disabled runtime-check and curl-7.54.0-1.fc27.x86_64(still
&gt; built with nss) and using yum-deprecated. Because python2 -c &apos;import pycurl&apos;
&gt; is not sufficient functional testing.

It passed my smoke test as expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381019</commentid>
    <comment_count>12</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-03 02:36:23 -0400</bug_when>
    <thetext>FYI: Disabled runtime-check would need to be done also in older version of fedora; otherwise it would not solve mixing versions from stable version of fedora and rawhide  Comment4.

BTW if it is downstream only patch then it will be better to use conflicts as it is used in scratch build. https://koji.fedoraproject.org/koji/taskinfo?taskID=19347487 (upstream first approach :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381138</commentid>
    <comment_count>13</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-03 03:08:50 -0400</bug_when>
    <thetext>(In reply to Lukas Slebodnik from comment #12)
&gt; FYI: Disabled runtime-check would need to be done also in older version of
&gt; fedora; otherwise it would not solve mixing versions from stable version of
&gt; fedora and rawhide  Comment4.

I am not against disabling the check in all supported versions of Fedora.  It will continue to work where it used to work and break less where it used to break.

&gt; BTW if it is downstream only patch then it will be better to use conflicts
&gt; as it is used in scratch build.

It will not because it would limit users of pycurl for no apparent reason.

&gt; https://koji.fedoraproject.org/koji/taskinfo?taskID=19347487 (upstream first
&gt; approach :-)

Upstream first does not apply here because it is neither bug fix nor a feature.  It is just customization at packaging level to make our packages more flexible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381150</commentid>
    <comment_count>14</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-03 03:13:16 -0400</bug_when>
    <thetext>OK</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381391</commentid>
    <comment_count>15</comment_count>
    <who name="Kamil Dudka">kdudka</who>
    <bug_when>2017-05-03 04:41:48 -0400</bug_when>
    <thetext>fixed by the following commits:

https://src.fedoraproject.org/cgit/rpms/python-pycurl.git/commit/?id=a80dc1d7
https://src.fedoraproject.org/cgit/rpms/python-pycurl.git/commit/?id=4a69345d
https://src.fedoraproject.org/cgit/rpms/python-pycurl.git/commit/?id=5a085fb8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381418</commentid>
    <comment_count>16</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-03 04:51:00 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-5.fc25 has been submitted as an update to Fedora 25. https://bodhi.fedoraproject.org/updates/FEDORA-2017-9bcef6fcd9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381419</commentid>
    <comment_count>17</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-03 04:51:06 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-8.fc26 has been submitted as an update to Fedora 26. https://bodhi.fedoraproject.org/updates/FEDORA-2017-db9267ee09</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10387286</commentid>
    <comment_count>18</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-04 16:02:42 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-5.fc25 has been pushed to the Fedora 25 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-9bcef6fcd9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10387511</commentid>
    <comment_count>19</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-04 18:05:40 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-8.fc26 has been pushed to the Fedora 26 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-db9267ee09</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10390995</commentid>
    <comment_count>20</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-06 20:02:04 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-5.fc25 has been pushed to the Fedora 25 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10393353</commentid>
    <comment_count>21</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-08 10:20:15 -0400</bug_when>
    <thetext>python-pycurl-7.43.0-8.fc26 has been pushed to the Fedora 26 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>