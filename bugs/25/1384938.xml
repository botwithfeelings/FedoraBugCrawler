<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1384938</bug_id>
          
          <creation_ts>2016-10-14 07:49:00 -0400</creation_ts>
          <short_desc>rpms not built with maximum number of cpus available</short_desc>
          <delta_ts>2016-10-24 11:24:05 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>redhat-rpm-config</component>
          <version>25</version>
          <rep_platform>aarch64</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>RAWHIDE</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>high</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Robert Richter">rrichter</reporter>
          <assigned_to name="Jason Tibbitts">tibbs</assigned_to>
          <cc>dennis</cc>
    
    
    <cc>ffesti</cc>
    
    
    <cc>jonathan</cc>
    
    
    <cc>pbrobinson</cc>
    
    
    <cc>pmatilai</cc>
    
    
    <cc>praiskup</cc>
    
    
    <cc>pwhalen</cc>
    
    
    <cc>rrichter</cc>
    
    
    <cc>tibbs</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in></cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2016-10-18 13:45:36</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>9791685</commentid>
    <comment_count>0</comment_count>
      <attachid>1210507</attachid>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-14 07:49:19 -0400</bug_when>
    <thetext>Created attachment 1210507
Fix: Enable all cpus for rpm builds

Description of problem:

When building Fedora kernel packages on ThunderX dual socket systems I
was wondering why the build was limited to 16 cpus only instead of the
maximum numbers of 96 in that system.

Now, I found out that I can use the RPM_BUILD_NCPUS variable for this,
or add &apos;%_smp_ncpus_max 0&apos; to the .rpmmacros file.

Both is a bit inconvince and also takes some time for the user to find
it out. Since there is no particular reason to limit cpus to 16, change
the default to use the maximum number of cpus that is possible.

It looks like there is a problem with memory-consuming tasks on certain systems which originally introduced the limit to 16 cpus. Is this still valid?

An alternative would be to limit the number of build tasks depending on the available memory as suggested in bug 1118734.

Instead of glolbaly limiting max cpus, rather only single affected packages or architectures should be set to that limit. ATM it is unclear which packages or systems are affected, so just let&apos;s remove the limit and then later fix those exceptional cases.

Patch enclosed.

Version-Release number of selected component (if applicable):

 redhat-rpm-config-43-1.fc25.noarch

Note: Rawhid is also affected.

How reproducible/Actual results:

 # rpm --eval %_smp_mflags
 -j16

Expected results:

Set to the maximum number of cpus in the system, e.g.:

 # rpm --eval %_smp_mflags
 -j96

Additional info:

Defined in /usr/lib/rpm/redhat/macros:

# Maximum number of CPU&apos;s to use when building, 0 for unlimited.
%_smp_ncpus_max 16
%_smp_mflags %([ -z &quot;$RPM_BUILD_NCPUS&quot; ] \\\
        &amp;&amp; RPM_BUILD_NCPUS=&quot;`/usr/bin/getconf _NPROCESSORS_ONLN`&quot;; \\\
        ncpus_max=%{?_smp_ncpus_max}; \\\
        if [ -n &quot;$ncpus_max&quot; ] &amp;&amp; [ &quot;$ncpus_max&quot; -gt 0 ] &amp;&amp; [ &quot;$RPM_BUILD_NCPUS&quot; -gt &quot;$ncpus_max&quot; ]; then RPM_BUILD_NCPUS=&quot;$ncpus_max&quot;; fi; \\\
        if [ &quot;$RPM_BUILD_NCPUS&quot; -gt 1 ]; then echo &quot;-j$RPM_BUILD_NCPUS&quot;; fi)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9791709</commentid>
    <comment_count>1</comment_count>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-14 07:54:19 -0400</bug_when>
    <thetext>Adding the link to the discussion of the issue in the last arm status meeting:

https://meetbot.fedoraproject.org/teams/fedora_arm_and_aarch64_status_meeting/fedora_arm_and_aarch64_status_meeting.2016-10-11-15.00.log.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9791720</commentid>
    <comment_count>2</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2016-10-14 08:02:22 -0400</bug_when>
    <thetext>See bug 669638 for background on the limit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9793677</commentid>
    <comment_count>3</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-14 15:59:08 -0400</bug_when>
    <thetext>So basically four years ago, on the Sparc builders (which I don&apos;t believe we even still have) there was an issue and so the limit was set to 16 on all architectures.  I suspect it&apos;s not really a Sparc issue but more an issue with various package build processes simply breaking when run with extreme parallelism and the fact that those Sparc CPUs had a really large number of threads.

If we were to drop the limit I suspect we would turn up a few packages that work most of the time with 16-way parallelism but may fail to build when cranked up further.  Still, those package are broken regardless, and I don&apos;t think it&apos;s productive to work around them by limiting parallelism for every single package.

Is there any real reason _not_ to just set the limit to 0 in rawhide now?  If there really is some Sparc-specific problem, we can just conditionalize the limit for that one architecture.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9793889</commentid>
    <comment_count>4</comment_count>
    <who name="Pavel Raiskup">praiskup</who>
    <bug_when>2016-10-14 17:53:45 -0400</bug_when>
    <thetext>&gt; If there really is some Sparc-specific problem, we can just conditionalize
&gt; the limit for that one architecture.

This sounds like correct thing to do, but I&apos;m not sure who should we CC about
Sparc issues.  Anyway, the macro condition for Sparc (with proper link to
relevant bugzilla) should be safe..  If there was further work on Sparc,
that condition can be removed later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9794000</commentid>
    <comment_count>5</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-14 21:08:28 -0400</bug_when>
    <thetext>It&apos;s really only the correct thing to do if the issue actually has anything to do with Sparc.  Sparc CPUs had a rather large number of threads (128 per socket back in 2010) and so issues with makefiles being sensitive to very high parallelism would have shown up there a good bit before most people would have seen them.

Even then, though, surely we shouldn&apos;t be artificially limiting makefile parallelism for every package.  If a package is broken by removing the limit, then it&apos;s a bug in that package which should preferably be fixed, but if not then easily worked around with a single %define and some comments documenting the brokenness.  These really need to be in there in any case.  And it would be really nice if we had some idea of what was actually failing back in 2012 so that it can be tested today.  Intel machines with 32+ real cores aren&apos;t all that hard to come by these days.

The only reason not to just set the limit to 0 right now is the unknown quantity of things which may be broken.  If we want to be really careful, why not increase the limit a bit right now (to, say... 24?) and then let that soak for a while.  Then bump it to 32 or remove it altogether after the next release branches.

As an aside, I would think that the aarch64 team would probably prefer not to have to sort out makefile parallelism issues (which, at -j96 most developers will not really have seen) from other issues related to the porting of things over to the new arch.  So maybe a more cautious approach would be desired here.  But then again, maybe they&apos;re perfectly willing to deal with that in exchange for having builds actually use all of their hardware.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9794032</commentid>
    <comment_count>6</comment_count>
    <who name="Pavel Raiskup">praiskup</who>
    <bug_when>2016-10-14 21:59:22 -0400</bug_when>
    <thetext>&gt; The only reason not to just set the limit to 0 right now is the unknown
&gt; quantity of things which may be broken.

I think the issue is that we don&apos;t know _when_ people will actually look
at possible issues.  If there is active initiative, they should be CCed
now.  Otherwise flip the settings for everybody except for Sparc (there&apos;s
nothing worse than debugging FTBFS without notice in advance...).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9794218</commentid>
    <comment_count>7</comment_count>
    <who name="Peter Robinson">pbrobinson</who>
    <bug_when>2016-10-15 06:12:56 -0400</bug_when>
    <thetext>(In reply to Pavel Raiskup from comment #4)
&gt; &gt; If there really is some Sparc-specific problem, we can just conditionalize
&gt; &gt; the limit for that one architecture.
&gt; 
&gt; This sounds like correct thing to do, but I&apos;m not sure who should we CC about
&gt; Sparc issues.  Anyway, the macro condition for Sparc (with proper link to
&gt; relevant bugzilla) should be safe..  If there was further work on Sparc,
&gt; that condition can be removed later.

There is no active Fedora SPARC port although I do know there are Oracle people looking at it.

IBM Power 64 can have a large core count with 8 threads a core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9798187</commentid>
    <comment_count>8</comment_count>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-17 13:39:31 -0400</bug_when>
    <thetext>Original change was (redhat-rpm-config):

commit 3a2d93f3119168b4b46d3eb37fed9355f51dd8c2
Author: Panu Matilainen &lt;pmatilai@redhat.com&gt;
Date:   Fri Jan 22 15:02:51 2010 +0200

    Limit _smp_mflags to max 16
    - patch from Dennis Gilmore

This dates back to 2010. I think we should get rid of the limit. It was made with the assumption that there are no (Fedora) build systems with more than 16 cpus, this is not valid anymore. Also, since then there were a lot of improvements in GNU Make. I checked the bug-make mailing list and the bug tracker and haven&apos;t found parallel build bugs that prevents us from using max number of cpus.

If the parallel build of a package is broken, then the Makefiles of that package should be fixed instead or the limit could be set in the rpm spec file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9798266</commentid>
    <comment_count>9</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-17 14:11:08 -0400</bug_when>
    <thetext>The easiest way to change this is to just change the definition in /usr/lib/rpm/redhat/macros.

If we have to per-arch-conditionalize this for whatever bizarre reason, the rpm package can be changed to patch one or more of the /usr/lib/rpm/platform/*/macros files.  Or you can use this unpleasantness, if you really wanted....

%_smp_ncpus_max %{lua:
    local arch = rpm.expand(&apos;%_arch&apos;)
    if arch == &apos;sparc&apos; then
        print &quot;16\\n&quot;
    else
        print &quot;0\\n&quot;
    end
}

I&apos;m ready to commit the simple removal of the limit from redhat-rpm-config but will certainly wait for an ACK.

And yes, this will certainly break a small number of packages, because any change breaks something.  It&apos;s definitely worth an announcement to devel-announce, which I will happily make.  I don&apos;t think it will change anything at all for plain old Fedora x86_64, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9798286</commentid>
    <comment_count>10</comment_count>
    <who name="Peter Robinson">pbrobinson</who>
    <bug_when>2016-10-17 14:19:53 -0400</bug_when>
    <thetext>I would just do a blanket removal, if it&apos;s an issue we&apos;ll see it, if it&apos;s arch specific we can review that with the arch or the arch will need to fix it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9798643</commentid>
    <comment_count>11</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-17 16:43:00 -0400</bug_when>
    <thetext>OK, I went ahead and pushed (to rawhide) a change which just comments out the line which set the value and adds a bit of explanation.  I also sent an explanatory note to devel-announce just to make sure nothing was done in secret.

I also verified that this will have no effect at all for the x86 and ppc portions of the Fedora buildsystem, since those machines present at most 16 threads to the build process.  So really this will only make any difference at all for aarch64, someone who hauls some SPARC stuff out of their garage, or someone with sufficiently beefy Intel kit who is doing their own package builds.

Also note that I didn&apos;t touch F25.  I know this was filed against F25, but I&apos;m not going to push anything there unless I see a couple of additional ACKs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9799744</commentid>
    <comment_count>12</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2016-10-18 02:37:12 -0400</bug_when>
    <thetext>
I dont disagree with the change at all, I too find it mildly hysterical that we limit every Fedora system in the world to building with 16 cpus max because rel-eng saw &quot;some failures&quot; (but no bugs to refer to that I know of) related to massively parallel builds on an obscure secondary platform in 2010. 

Rawhide is the place for experimenting with such things, and I see you also dropped a note to fedora-devel(-announce)@, so I think we&apos;re good. But lets leave F25 out of the picture, this is not a critical fix anyway so there&apos;s little point risking it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9800051</commentid>
    <comment_count>13</comment_count>
    <who name="Peter Robinson">pbrobinson</who>
    <bug_when>2016-10-18 04:38:12 -0400</bug_when>
    <thetext>We&apos;re also not likely to see this in the standard build infrastructure as even with the Power8 hardware where we have HW with 20 cores / 160 threads we run all builders as VMs not bare metal</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9801491</commentid>
    <comment_count>14</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-18 11:48:30 -0400</bug_when>
    <thetext>Right, I checked for all of the architectures including Power when I was writing up that notice to make sure that outside of aarch64 would even see this.  And even the aarch64 we currently have in the buildsystem (just 8 cores) won&apos;t see any difference.  So, really, from the standpoint of the Fedora buildsystem, this is pretty much a null change.  It will get me something in my own builds, though

I do wonder if there are packages which would benefit measurably for increased build parallelism, but this probably isn&apos;t the place to talk about it.

@rrichter, you originally filed this against F25.  Are you OK with just doing this in rawhide, or is that going cause issues for you?  I have to agree with Panu that it&apos;s probably not worth poking at F25 this close to release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9801662</commentid>
    <comment_count>15</comment_count>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-18 12:16:53 -0400</bug_when>
    <thetext>(In reply to Jason Tibbitts from comment #14)
&gt; @rrichter, you originally filed this against F25.  Are you OK with just
&gt; doing this in rawhide, or is that going cause issues for you?  I have to
&gt; agree with Panu that it&apos;s probably not worth poking at F25 this close to
&gt; release.

Thanks Jason, yes, Rawhide is ok to me.

Posting here a workaround for reference:

 # grep _smp_ncpus_max ~/.rpmmacros
 %_smp_ncpus_max 0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9801909</commentid>
    <comment_count>16</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-18 13:45:36 -0400</bug_when>
    <thetext>OK, thanks.  Rawhide hasn&apos;t broken completely since this was pushed so I think we&apos;re good here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9811778</commentid>
    <comment_count>17</comment_count>
    <who name="Dennis Gilmore">dennis</who>
    <bug_when>2016-10-21 11:48:27 -0400</bug_when>
    <thetext>There was massive number of failure in make using -j20 and higher. even when building only two objects things would build out of order. I replicated on x86_64 at the time. I think blanket remove is only appropriate if someone is on the hook to do the work to fix the issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9811851</commentid>
    <comment_count>18</comment_count>
    <who name="Dennis Gilmore">dennis</who>
    <bug_when>2016-10-21 11:54:16 -0400</bug_when>
    <thetext>I will also add that none of the current builds in Fedora have  anywhere near enough cores to hit the bug. There was a workaround added that you could define %{_smp_ncpus_max} macro which will let you choose a higher number.some packages such as gcc and kernel could benefit from having it set to enable the full use outside of the buildsystems where no hosts have more</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9815476</commentid>
    <comment_count>19</comment_count>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-24 10:49:14 -0400</bug_when>
    <thetext>(In reply to Dennis Gilmore from comment #18)
&gt; I will also add that none of the current builds in Fedora have  anywhere
&gt; near enough cores to hit the bug.

ThunderX systems are probably not the only systems with a much higher number of cores than 16. This arbitrary limit slows down rpm builds by a factor of 6. There are no direct bug reports of packages, that are unable to handle more than 16, nor is gnu make known to fail here. Why it does not fail with 16 but with more than 20? Is there a reason? After more than 6 years now, packages should be capable of being built in parallel.

&gt; There was a workaround added that you
&gt; could define %{_smp_ncpus_max} macro which will let you choose a higher
&gt; number.some packages such as gcc and kernel could benefit from having it set
&gt; to enable the full use outside of the buildsystems where no hosts have more

It should be vice versa, limit all packages that are broken.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9815490</commentid>
    <comment_count>20</comment_count>
    <who name="Peter Robinson">pbrobinson</who>
    <bug_when>2016-10-24 10:52:21 -0400</bug_when>
    <thetext>&gt; 6. There are no direct bug reports of packages, that are unable to handle
&gt; more than 16, nor is gnu make known to fail here. Why it does not fail with
&gt; 16 but with more than 20? Is there a reason? After more than 6 years now,
&gt; packages should be capable of being built in parallel.

Biggest issue I&apos;ve seen is xz compression of small amounts of data fails when massively parallel and you end up with zero byte output</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9815547</commentid>
    <comment_count>21</comment_count>
    <who name="Robert Richter">rrichter</who>
    <bug_when>2016-10-24 11:15:29 -0400</bug_when>
    <thetext>(In reply to Peter Robinson from comment #20)
&gt; Biggest issue I&apos;ve seen is xz compression of small amounts of data fails
&gt; when massively parallel and you end up with zero byte output

But is this controlled by make&apos;s -j option?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9815568</commentid>
    <comment_count>22</comment_count>
    <who name="Jason Tibbitts">tibbs</who>
    <bug_when>2016-10-24 11:24:05 -0400</bug_when>
    <thetext>Well rpm itself doesn&apos;t do any parallel xz compression or decompression (which I&apos;d love to see changed, but that requires low level work on RPM since it doesn&apos;t even call the parallel-capable entry points).  So this would have to be related to something which explicitly calls xz -T0.  Which:

* has absolutely no relation whatsoever to the one thing which was just changed in redhat-rpm-config.  None at all; it would have been broken well before the change.

* would be a bug in xz that should be fixed in xz, not worked around in Fedora&apos;s RPM macros even if that were possible.

So... I guess I still just don&apos;t get it.  Unless maybe the aarch64 folks are going to be seeing this, in which case I&apos;m sure they&apos;ll file the appropriate bugs against xz or whatever.

As for being someone on the hook to fix issues that arise.... well, sure, find a package that&apos;s failing due to this change and I&apos;ll add the one line to it which necessary to limit the CPU count back to 16.  Not that I didn&apos;t already say exactly what needed to be done in my announcement, but if someone just really doesn&apos;t want to add the one needed line, then I have no problem doing that myself.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1210507</attachid>
            <date>2016-10-14 07:49:00 -0400</date>
            <delta_ts>2016-10-14 07:49:19 -0400</delta_ts>
            <desc>Fix: Enable all cpus for rpm builds</desc>
            <filename>0001-redhat-rpm-config-Enable-all-cpus-for-rpm-builds.patch</filename>
            <type>text/plain</type>
            <size>1383</size>
            <attacher name="Robert Richter">rrichter</attacher>
            
              <data encoding="base64">RnJvbSBiMmQ2NWQzNDA0ODQ5NmFkMDlhY2YxY2U3NzFlY2JkNmU5ZjBjNjRiIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBSb2JlcnQgUmljaHRlciA8cnJpY2h0ZXJAY2F2aXVtLmNvbT4K
RGF0ZTogRnJpLCA3IE9jdCAyMDE2IDA5OjI3OjAzIC0wNzAwClN1YmplY3Q6IFtQQVRDSF0gcmVk
aGF0LXJwbS1jb25maWc6IEVuYWJsZSBhbGwgY3B1cyBmb3IgcnBtIGJ1aWxkcwoKV2hlbiBidWls
ZGluZyBGZWRvcmEga2VybmVsIHBhY2thZ2VzIG9uIFRodW5kZXJYIGR1YWwgc29ja2V0IHN5c3Rl
bXMgSQp3YXMgd29uZGVyaW5nIHdoeSB0aGUgYnVpbGQgd2FzIGxpbWl0ZWQgdG8gMTYgY3B1cyBv
bmx5IGluc3RlYWQgb2YgdGhlCm1heGltdW0gbnVtYmVycyBvZiA5NiBpbiB0aGF0IHN5c3RlbS4K
Ck5vdywgSSBmb3VuZCBvdXQgdGhhdCBJIGNhbiB1c2UgdGhlIFJQTV9CVUlMRF9OQ1BVUyB2YXJp
YWJsZSBmb3IgdGhpcywKb3IgYWRkICclX3NtcF9uY3B1c19tYXggMCcgdG8gdGhlIC5ycG1tYWNy
b3MgZmlsZS4KCkJvdGggaXMgYSBiaXQgaW5jb252aW5jZSBhbmQgYWxzbyB0YWtlcyBzb21lIHRp
bWUgZm9yIHRoZSB1c2VyIHRvIGZpbmQKaXQgb3V0LiBTaW5jZSB0aGVyZSBpcyBubyBwYXJ0aWN1
bGFyIHJlYXNvbiB0byBsaW1pdCBjcHVzIHRvIDE2LCBjaGFuZ2UKdGhlIGRlZmF1bHQgdG8gdXNl
IHRoZSBtYXhpbXVtIG51bWJlciBvZiBjcHVzIHRoYXQgaXMgcG9zc2libGUuCgpDYzogUGFudSBN
YXRpbGFpbmVuIDxwbWF0aWxhaUByZWRoYXQuY29tPgpDYzogSmFzb24gVGliYml0dHMgPHRpYmJz
QG1hdGgudWguZWR1PgpDYzogUGV0ZXIgUm9iaW5zb24gPHBicm9iaW5zb25AZ21haWwuY29tPgpT
aWduZWQtb2ZmLWJ5OiBSb2JlcnQgUmljaHRlciA8cnJpY2h0ZXJAY2F2aXVtLmNvbT4KLS0tCiBt
YWNyb3MgfCAyICstCiAxIGZpbGUgY2hhbmdlZCwgMSBpbnNlcnRpb24oKyksIDEgZGVsZXRpb24o
LSkKCmRpZmYgLS1naXQgYS9tYWNyb3MgYi9tYWNyb3MKaW5kZXggZDkyODA2OTY0M2M0Li41YWVj
NDQ3Y2FjM2MgMTAwNjQ0Ci0tLSBhL21hY3JvcworKysgYi9tYWNyb3MKQEAgLTYzLDcgKzYzLDcg
QEAKIAktLWluZm9kaXI9JXtfaW5mb2Rpcn0KIAogIyBNYXhpbXVtIG51bWJlciBvZiBDUFUncyB0
byB1c2Ugd2hlbiBidWlsZGluZywgMCBmb3IgdW5saW1pdGVkLgotJV9zbXBfbmNwdXNfbWF4IDE2
CisjJV9zbXBfbmNwdXNfbWF4IDAKICVfc21wX21mbGFncyAlKFsgLXogIiRSUE1fQlVJTERfTkNQ
VVMiIF0gXFxcCiAJJiYgUlBNX0JVSUxEX05DUFVTPSJgL3Vzci9iaW4vZ2V0Y29uZiBfTlBST0NF
U1NPUlNfT05MTmAiOyBcXFwKICAgICAgICAgbmNwdXNfbWF4PSV7P19zbXBfbmNwdXNfbWF4fTsg
XFxcCi0tIAoyLjkuMwoK
</data>

          </attachment>
      

    </bug>

</bugzilla>