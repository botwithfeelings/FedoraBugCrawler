<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1367647</bug_id>
          
          <creation_ts>2016-08-17 01:59:00 -0400</creation_ts>
          <short_desc>system clock set incorrectly after installation</short_desc>
          <delta_ts>2017-04-11 18:58:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>libtimezonemap</component>
          <version>25</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>ERRATA</resolution>
          
          <see_also>https://bugzilla.redhat.com/show_bug.cgi?id=1251044</see_also>
    
    
    
    <see_also>https://bugzilla.redhat.com/show_bug.cgi?id=1433560</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>high</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>1367604</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Adam Williamson">awilliam</reporter>
          <assigned_to name="David Shea">dshea</assigned_to>
          <cc>anaconda-maint-list</cc>
    
    
    <cc>dshea</cc>
    
    
    <cc>g.kaviyarasu</cc>
    
    
    <cc>hannsj_uhl</cc>
    
    
    <cc>jonathan</cc>
    
    
    <cc>rmarshall</cc>
    
    
    <cc>vanmeeuwen+fedora</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in>libtimezonemap-0.4.5-4 libtimezonemap-0.4.5-4.fc25</cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2016-08-18 22:24:10</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>9621210</commentid>
    <comment_count>0</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 01:59:49 -0400</bug_when>
    <thetext>This one&apos;s pretty simple to reproduce:

1. Do an install of Fedora 24 from a traditional installer image (may also affect live install, haven&apos;t tested). Boot the installed system. Run &apos;journalctl -b&apos;. Note the system time before chrony or anything else adjusts it (i.e. the early timestamps in the journal).

2. Do the same with Fedora 25.

For me, after install of Fedora 24, the system clock is set pretty much correctly - timestamps in the logs show more or less the correct time in my time zone. chrony only adjusts by a matter of microseconds.

After an install of Fedora 25, the system clock is set eight hours slow. chrony kicks in and corrects it, but you can see the incorrect timestamps before chrony runs (and of course you can see the log messages from chrony correcting it).

This seems like a minor bug, but in fact it has a significant consequence in the case of enrolling a system as a FreeIPA client: see https://bugzilla.redhat.com/show_bug.cgi?id=1367604 . If you use anaconda&apos;s ability the enrol the system in a FreeIPA domain via a kickstart directive, it turns out that ipa-client-install disables chronyd in favour of ntpd, and ntpd refuses to make large clock adjustments on initial boot (if the clock is more than 1000 seconds wrong, it just quits with an error), so the system clock is not corrected on boot, it remains incorrect...and that results in problems authenticating via FreeIPA, since kerberos requires the clock to be correct (or, more precisely, it requires the server and clients to agree on what time it is).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621216</commentid>
    <comment_count>1</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 02:01:07 -0400</bug_when>
    <thetext>Worth noting, I&apos;m in the Pacific time zone, whose offset to UTC is...-0800 (well, PST&apos;s offset is -0800 anyway; PDT&apos;s is -0700). So my first theory is that anaconda is somehow trying to adjust for timezones and making a mess of it. I&apos;ll try doing an install with the time zone set to something else, and see if the system clock comes up wrong by a different amount...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621238</commentid>
    <comment_count>2</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 02:13:37 -0400</bug_when>
    <thetext>Ah, so there&apos;s a pretty clear smoking gun here. In the Fedora 25 anaconda.log:

21:42:03,000 INFO anaconda: System time set to Tue Aug 16 21:42:03 2016 UTC
21:42:03,000 INFO anaconda: System time set to Tue Aug 16 21:42:03 2016 UTC
21:42:03,000 INFO anaconda: System time set to Tue Aug 16 21:42:03 2016 UTC

That was definitely not the correct time in UTC. I believe it&apos;s what the installer thought was the current time in the *specified timezone* - Pacific. It was actually even wrong about that, because the correct time was 22:42, not 21:42 (seems like a daylight savings error somewhere).

In the Fedora 24 anaconda.log:

22:42:44,000 INFO anaconda: System time set to Wed Aug 17 05:42:44 2016 UTC
22:42:44,000 INFO anaconda: System time set to Wed Aug 17 05:42:44 2016 UTC
22:42:44,000 INFO anaconda: System time set to Wed Aug 17 05:42:44 2016 UTC

it seems that Fedora 24 actually had the current local time correct (22:42) and also calculated the correct current UTC time (05:42).

I strongly suspect this commit:

https://github.com/rhinstaller/anaconda/commit/b3096e797a3b76862f94662a865c6a83854f45c4

since it affects `set_system_date_time()` , which calls `set_system_time()`, which logs those tell-tale &apos;System time set to...&apos; messages. CCing Robert (author of that commit).

Note that 1367604 is currently considered an Alpha release blocker. We *maaay* be able to fudge that, but still, urgent attention would be appreciated (I&apos;ll probably try and figure this one out myself, but no guarantees...)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621352</commentid>
    <comment_count>3</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 03:08:45 -0400</bug_when>
    <thetext>Still researching this. The problematic call to `set_system_date_time()` - which causes the system clock to be set to the correct UTC time in Fedora 24 but to the current *local* time in Fedora 25 - is this one:

https://github.com/rhinstaller/anaconda/blob/master/pyanaconda/ui/gui/spokes/datetime_spoke.py#L790

For debugging I added a log line just before that call which logs the minutes and seconds and timezone; that confirms that it&apos;s really that call we&apos;re hitting, and tells us what values the spoke is passing to the function.

Just adding that log line shows that there is no apparent difference in the spoke&apos;s behaviour between F24 and F25: what it passes to the function is the current *local* time (not UTC time), and the currently-configured timezone. So, right now, it&apos;s 23:56 Pacific time where I am; the logs show that in both F24 and F25, the spoke calls `set_system_date_time()` with hours 23, minutes 56, tz America/Vancouver.

Somehow, in F25, that results in the system clock being set to 23:56 UTC today, which is wrong. In F24 it results in the system clock being set to 06:52 UTC tomorrow, which is correct. Subsequently calling &apos;date&apos; from a console shows the time in UTC, but anaconda somehow still knows what timezone it&apos;s in - anaconda.log timestamps continue to match the local time, not UTC time.

I think I was wrong to suspect b3096e797a3b76862f94662a865c6a83854f45c4 , because now I realize that commit actually landed in Fedora 24 as well. There is no difference in the `set_system_date_time()` or `set_system_time()` functions between Fedora 24 and Fedora 25. So my next guess is that the behaviour of pytz or datetime has changed between F24 and F25...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621486</commentid>
    <comment_count>4</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 04:13:21 -0400</bug_when>
    <thetext>So...I&apos;ve traced this down a bit farther. At least part of the problem seems to be the calculation of the epoch in `set_system_date_time()`:


    # Calculate the number of seconds between this time and timestamp 0
    epoch = tz.localize(datetime.datetime.fromtimestamp(0))

if you log the value of &apos;epoch&apos; after that, it comes out different. Further, if you log the result of just calling `datetime.datetime.fromtimestamp(0)` at that point in the code, that result is different too. I tested with this:

    # Calculate the number of seconds between this time and timestamp 0
    epoch = tz.localize(datetime.datetime.fromtimestamp(0))
    log.info(&quot;datetime0: %s&quot;, datetime.datetime.fromtimestamp(0))
    log.info(&quot;set_date: %s&quot;, set_date)
    log.info(&quot;epoch: %s&quot;, epoch)
    log.info(&quot;tz: %s&quot;, tz)
    timestamp = (set_date - epoch).total_seconds()

on Fedora 24, we get:

01:05:22,081 INFO anaconda: datetime0: 1969-12-31 16:00:00
01:05:22,082 INFO anaconda: set_date: 2016-08-17 01:05:22-07:00
01:05:22,082 INFO anaconda: epoch: 1969-12-31 16:00:00-08:00
01:05:22,082 INFO anaconda: tz: America/Vancouver
01:05:22,000 INFO anaconda: System time set to Wed Aug 17 08:05:22 2016 UTC
01:05:22,001 INFO anaconda: datetime0: 1969-12-31 16:00:00
01:05:22,001 INFO anaconda: set_date: 2016-08-17 01:05:22-07:00
01:05:22,002 INFO anaconda: epoch: 1969-12-31 16:00:00-08:00
01:05:22,002 INFO anaconda: tz: America/Vancouver
01:05:22,000 INFO anaconda: System time set to Wed Aug 17 08:05:22 2016 UTC
01:05:22,001 INFO anaconda: datetime0: 1969-12-31 16:00:00
01:05:22,001 INFO anaconda: set_date: 2016-08-17 01:05:22-07:00
01:05:22,001 INFO anaconda: epoch: 1969-12-31 16:00:00-08:00
01:05:22,002 INFO anaconda: tz: America/Vancouver
01:05:22,000 INFO anaconda: System time set to Wed Aug 17 08:05:22 2016 UTC
01:05:22,000 INFO anaconda: Thread Done: AnaDateTimeThread (140176785712896)

On Fedora 25, we get:

08:05:23,513 INFO anaconda: datetime0: 1970-01-01 00:00:00
08:05:23,518 INFO anaconda: set_date: 2016-08-17 01:05:23-07:00
08:05:23,518 INFO anaconda: epoch: 1970-01-01 00:00:00-08:00
08:05:23,518 INFO anaconda: tz: America/Vancouver
00:05:23,000 INFO anaconda: System time set to Wed Aug 17 00:05:23 2016 UTC
00:05:23,001 INFO anaconda: datetime0: 1970-01-01 00:00:00
00:05:23,001 INFO anaconda: set_date: 2016-08-17 01:05:23-07:00
00:05:23,002 INFO anaconda: epoch: 1970-01-01 00:00:00-08:00
00:05:23,002 INFO anaconda: tz: America/Vancouver
00:05:23,000 INFO anaconda: System time set to Wed Aug 17 00:05:23 2016 UTC
00:05:23,001 INFO anaconda: datetime0: 1970-01-01 00:00:00
00:05:23,005 INFO anaconda: set_date: 2016-08-17 01:05:23-07:00
00:05:23,005 INFO anaconda: epoch: 1970-01-01 00:00:00-08:00
00:05:23,005 INFO anaconda: tz: America/Vancouver
00:05:23,000 INFO anaconda: System time set to Wed Aug 17 00:05:23 2016 UTC
00:05:23,001 INFO anaconda: Thread Done: AnaDateTimeThread (140500485011200)

note that datetime0 and epoch are different. Also note that on Fedora 24 the timestamps on all three sets of log messages (it seems `set_system_date_time` gets called three times, for some reason) are the same (they are, in fact, the correct current time in the local time zone - it was 01:05 when I ran the test), while on Fedora 25 the timestamps on the first set of log messages are not adjusted, while the timestamps on the second two *are* adjusted (to a time one hour out from the correct local time)...but all three calls seem to result in the same &apos;datetime0&apos; and &apos;epoch&apos;.

Rather bizarre...but I think we may be looking at a difference in what Python thinks the time is when we call `datetime.datetime.fromtimestamp(0)`.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621588</commentid>
    <comment_count>5</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 04:44:56 -0400</bug_when>
    <thetext>I may just have been staring at this for too long, but it looks rather a lot to me like this code is badly wrong and F24 just happens to get things right more or less by dumb luck...

as I noted before, logging seems to show pretty clearly that the datetime spoke passes the current *local* time to `set_system_date_time()`. But then `set_system_date_time()` goes ahead and calls `tz.localize` on it...which seems clearly wrong, since you&apos;re supposed to use `tz.localize` to convert a UTC time to the current timezone (the docs say &apos;naive time&apos;, but what it basically does is apply the current timezones offset to the specified time).

It then does another thing which seems pretty clearly wrong per the &apos;datetime&apos; docs - that is, this:

epoch = tz.localize(datetime.datetime.fromtimestamp(0))

the problem there is that datetime.fromtimestamp is documented as *already* attempting to adjust for the local timezone:

https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp

&quot;Return the local date and time corresponding to the POSIX timestamp&quot;

so once again it winds up adjusting for local time *twice*.

All this would make sense if the date/time spoke passed a *UTC* time to `set_system_date_time()`, but it clearly does not. In Fedora 24 this seems to wind up actually giving the right delta in seconds, since both times are doubly adjusted, but in Fedora 25 it seems datetime.datetime.fromtimestamp(0) does not actually return the epoch in the local time zone, it returns the epoch in UTC. So the epoch gets singly adjusted but the current date/time gets doubly adjusted, and we wind up with a delta that&apos;s too short.

And jesus christ I&apos;m too tired for this mess. I&apos;m going to bed. Someone else figure it out.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621670</commentid>
    <comment_count>6</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 05:05:00 -0400</bug_when>
    <thetext>Hmm, no, I was misunderstanding `localize()` there. It doesn&apos;t *change* the time you give it exactly, just turns it from a naive into an aware datetime object; I think it&apos;s actually correct. The real problem here is just that the datetime.datetime.fromtimestamp(0) call is not giving us the correct result, I think. It should be giving us a naive datetime object which is the date of the epoch with the correct offset for the current timezone - so for Pacific time it should give 1969-12-31 at 16:00 . Then when we run `localize` on it that turns it into an aware object with the correct timezone, thus unambiguously representing the epoch. In F24 it does this, in F25 it does not, it gives us a naive datetime object for 1970-01-01 at 00:00 - i.e. the epoch in UTC.

I believe I have a way to work around the problem:

diff --git a/pyanaconda/isys/__init__.py b/pyanaconda/isys/__init__.py
index 84d9569..ce7fcab 100644
--- a/pyanaconda/isys/__init__.py
+++ b/pyanaconda/isys/__init__.py
@@ -130,7 +130,7 @@ def set_system_date_time(year=None, month=None, day=None, hour=None, minute=None
     set_date = tz.localize(datetime.datetime(year, month, day, hour, minute, second))
 
     # Calculate the number of seconds between this time and timestamp 0
-    epoch = tz.localize(datetime.datetime.fromtimestamp(0))
+    epoch = tz.fromutc(datetime.datetime.utcfromtimestamp(0))
     timestamp = (set_date - epoch).total_seconds()
 
     set_system_time(int(timestamp))


in a quick smoke test, this works...at least, it causes the system time to be set to the correct UTC time, and the date/time spoke now shows the correct local time (without my fix it shows a wrong local time). But it&apos;s more of a dodge than a fix; it doesn&apos;t explain what changed such that `datetime.datetime.fromtimestamp()` no longer does the right thing. I suspect there&apos;s actually a bug in setting the current timezone - so Python returns the &apos;wrong&apos; date for the epoch because the system timezone is not actually set to Pacific. So now I guess I go to look at what does that and what&apos;s going wrong with it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9621778</commentid>
    <comment_count>7</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 05:27:10 -0400</bug_when>
    <thetext>This bug seems to have shown up between 2016-06-16 and 2016-07-08 (that&apos;s the smallest delta I could find in the nightlies I have lying around). A 2016-06-16 nightly behaves like F24: the system clock is set to the correct time in UTC, and subsequent anaconda log messages have the correct local time as their timestamp. A 2016-07-08 nightly behaves like F25: the system clock is set to the wrong time in UTC.

My next suspect is this libtimezone update by David Shea:

http://koji.fedoraproject.org/koji/buildinfo?buildID=776644

I&apos;m *suspecting* it may possibly have somehow resulted in the timezone so far as anaconda/python is concerned not being set when the timezone is changed in anaconda&apos;s configuration (either interactively by the user, or automatically by the geolocation stuff that runs on startup). That would explain all the symptoms: the way datetime.datetime.fromtimestamp() seems to think the system timezone is UTC, and the way anaconda log messages get whatever the system thinks the current UTC time is as their timestamp (they don&apos;t get a timezone adjustment).

It&apos;s pretty much a guess, but possibly this patch:

http://pkgs.fedoraproject.org/cgit/rpms/libtimezonemap.git/tree/0006-Do-not-use-tz_location_get_utc_offset.patch

could be to blame - perhaps anaconda was actually relying on the bug that fixed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9623619</commentid>
    <comment_count>8</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 13:20:49 -0400</bug_when>
    <thetext>So I think I confirmed that it&apos;s something in libtimezonemap . I made some logging changes:

diff --git a/pyanaconda/isys/__init__.py b/pyanaconda/isys/__init__.py
index 84d9569..32f6d0f 100644
--- a/pyanaconda/isys/__init__.py
+++ b/pyanaconda/isys/__init__.py
@@ -29,6 +29,7 @@ import blivet.arch
 import time
 import datetime
 import pytz
+import os
 
 import logging
 log = logging.getLogger(&quot;anaconda&quot;)
@@ -130,6 +131,10 @@ def set_system_date_time(year=None, month=None, day=None, hour=None, minute=None
     set_date = tz.localize(datetime.datetime(year, month, day, hour, minute, second))
 
     # Calculate the number of seconds between this time and timestamp 0
+    log.info(&quot;time.tzname: %s&quot;, &apos; &apos;.join(time.tzname))
+    log.info(&quot;datetime0: %s&quot;, datetime.datetime.fromtimestamp(0))
+    log.info(&quot;datetimenow: %s&quot;, datetime.datetime.now())
+    log.info(&quot;env TZ: %s&quot;, os.getenv(&apos;TZ&apos;, &apos;not set&apos;))
     epoch = tz.localize(datetime.datetime.fromtimestamp(0))
     timestamp = (set_date - epoch).total_seconds()
 
then built an updates.img with the older libtimezonemap package in it:

./scripts/makeupdates -t anaconda-25.20-1 -a /tmp/libtimezonemap-0.4.5-2.fc24.x86_64.rpm

booting Fedora 25 with that updates.img , everything behaves like Fedora 24: datetime0 is correctly adjusted to local time (1969-12-31 16:00:00), the system clock is set to the correct current time in UTC, and the anaconda log timestamps after the time is adjusted are correct.

So I started fiddling with the libtimezonemap patch set. The smallest change I can make to drop the patch I suspect - 0006-Do-not-use-tz_location_get_utc_offset.patch - also involves dropping 0013-Fix-the-calculation-of-time-zone-offsets.patch , 0018-Improve-the-location-selected-when-setting-the-timez.patch and 0022-Fix-compiler-warnings.patch , which all follow on from patch6 in some way. With those four patches dropped, but all others since 0.4.5-2 still applied, the bug is not present. The scratch build for that is http://koji.fedoraproject.org/koji/taskinfo?taskID=15287464 . The updates.img (against anaconda-25.20-1) is https://www.happyassassin.net/updates/1367647.tzmap04531.img .

Looking at it the other way, the smallest possible change I can make from 0.4.5-2 in order to produce the bug seems to be to include just Patch6 (slightly modified to account for the lack of Patch2) and Patch13 (which fixes an error in Patch6&apos;s math). With just those two patches included, the bug occurs. The scratch build for that is http://koji.fedoraproject.org/koji/taskinfo?taskID=15287614 . The updates.img is https://www.happyassassin.net/updates/1367647.tzmap04532.img .

So far my suspicion is that anaconda actually turns out to be relying on the behaviour that Patch6 fixes - the setting of the &apos;TZ&apos; environment variable. This *does* seem to affect the output of timedate.timedate.fromtimestamp() in testing; if you fiddle with the value of os.environ[&apos;TZ&apos;] and run timedate.timedate.fromtimestamp(0) , you can get different values. However, it&apos;s not totally clear-cut...the updates images also have the logging lines, and the logged result of os.getenv(&apos;TZ&apos;, &apos;not set&apos;) is never anything but &apos;not set&apos;. I was expecting it to be set when the bug did not occur, and not set when the bug did occur...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9623880</commentid>
    <comment_count>9</comment_count>
    <who name="David Shea">dshea</who>
    <bug_when>2016-08-17 14:32:02 -0400</bug_when>
    <thetext>Ok.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9623883</commentid>
    <comment_count>10</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-08-17 14:34:10 -0400</bug_when>
    <thetext>libtimezonemap-0.4.5-4.fc25 has been submitted as an update to Fedora 25. https://bodhi.fedoraproject.org/updates/FEDORA-2016-8988869509</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9623975</commentid>
    <comment_count>11</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2016-08-17 15:04:47 -0400</bug_when>
    <thetext>built an update to test that:

https://www.happyassassin.net/updates/1367647.tzmap0454.img

and it seems to work; the behaviour returns to match F24&apos;s, the installed system&apos;s time is pretty much correct at boot. I can&apos;t confirm yet that it fixes 1367604 for stupid reasons I won&apos;t go into, but I&apos;m pretty sure it should. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9624070</commentid>
    <comment_count>12</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-08-17 15:51:42 -0400</bug_when>
    <thetext>libtimezonemap-0.4.5-4.fc25 has been pushed to the Fedora 25 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2016-8988869509</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9628838</commentid>
    <comment_count>13</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-08-18 22:24:07 -0400</bug_when>
    <thetext>libtimezonemap-0.4.5-4.fc25 has been pushed to the Fedora 25 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10326628</commentid>
    <comment_count>14</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-04-11 18:58:48 -0400</bug_when>
    <thetext>What looks like the exact same bug is back in F26:

https://bugzilla.redhat.com/show_bug.cgi?id=1433560

but the libtimezonemap &apos;fix&apos; is still there. So I&apos;m not sure why it&apos;s suddenly started happening again.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>