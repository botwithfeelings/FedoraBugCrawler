<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1263350</bug_id>
          
          <creation_ts>2015-09-15 11:34:00 -0400</creation_ts>
          <short_desc>systemd user sessions running with the wrong context.</short_desc>
          <delta_ts>2016-12-06 12:03:37 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>selinux-policy</component>
          <version>24</version>
          <rep_platform>Unspecified</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>ERRATA</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>high</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>1262933</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Miroslav Grepl">mgrepl</reporter>
          <assigned_to name="Lukas Vrabec">lvrabec</assigned_to>
          <cc>dominick.grift</cc>
    
    
    <cc>dwalsh</cc>
    
    
    <cc>extras-qa</cc>
    
    
    <cc>johannbg</cc>
    
    
    <cc>jsynacek</cc>
    
    
    <cc>lnykryn</cc>
    
    
    <cc>lvrabec</cc>
    
    
    <cc>mgrepl</cc>
    
    
    <cc>msekleta</cc>
    
    
    <cc>plautrba</cc>
    
    
    <cc>rlpowell</cc>
    
    
    <cc>s</cc>
    
    
    <cc>systemd-maint</cc>
    
    
    <cc>zbyszek</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in></cf_fixed_in>
          <cf_doc_type>Bug Fix</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          <cf_clone_of>1262933</cf_clone_of>
          <cf_environment></cf_environment>
          <cf_last_closed>2016-12-06 12:03:37</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8637299</commentid>
    <comment_count>0</comment_count>
    <who name="Miroslav Grepl">mgrepl</who>
    <bug_when>2015-09-15 11:34:08 -0400</bug_when>
    <thetext>+++ This bug was initially created as a clone of Bug #1262933 +++

The mechanism for launching user sessions via dbus has changed in rawhide, which is causing apps to run as unconfined_service_t

--- Additional comment from Daniel Walsh on 2015-09-14 12:24:24 EDT ---

Discussion on IRC

&lt;dwalsh&gt; poettering, Hey did kdbus just get turned on in Rawhide?  I am seeing some weird SELinux issues.  Lots of processes being started by dbus are running as unconfined_service_t.  This only happens if init_t or systemd_dbusd_t executes a file labeled bin_t.  What executeable launches sessions/services with kdbus?
&lt;dvdhrm&gt; dwalsh, no, it did not.
&lt;dvdhrm&gt; dwalsh, might be related to Dbus updates, though.
&lt;dvdhrm&gt; They&apos;re optionally started on the user-bus.
&lt;dwalsh&gt; I see sessions in my login as well as system sessions.  setroubleshootd, udisksd etc, In my user session, I am seeing gnome-terminal running as unconfined_service_t.
&lt;dvdhrm&gt; dwalsh, weird.
&lt;dwalsh&gt; http://ur1.ca/ns54a
&lt;dwalsh&gt; Actually it looks like it is mostly session bus, for gdm and my login
&lt;dvdhrm&gt; dwalsh, it&apos;s all session-bus
&lt;dvdhrm&gt; dwalsh, Hm. They should still be spawned by dbus-daemon.
&lt;dvdhrm&gt; But applications are free to enable dbus-activation via --user units.
&lt;dwalsh&gt; Is session-bus now spawned by dbus-daemon, where as it was different before.
&lt;dvdhrm&gt; dwalsh, dbus-daemon is now spawned by --user, so maybe that&apos;s the issue.
&lt;dvdhrm&gt; Before it was spawned by gdm/X
&lt;dvdhrm&gt; dwalsh, there&apos;s now a systemd unit for dbus-daemon (dbus.service / dbus.socket)
&lt;dwalsh&gt; Right, I see /usr/bin/dbus-daemon --session  running as dbusd_exec_t in the user session where it used to run as unconfined_dbusd_t
&lt;dvdhrm&gt; dwalsh, Can you fix this? I&apos;ll gladly provide you more information, but I&apos;m kinda lost, sorry.
&lt;dwalsh&gt; How does dbus-daemon --session now get launched?
&lt;dvdhrm&gt; dwalsh, via systemd --user. It&apos;s socket activated via /run/user/$uid/bus
&lt;halfline&gt; so previously when you first logged in GDM would start a dbus daemon right before it started the user session
&lt;halfline&gt; GDM only does this if DBUS_SESSION_BUS_ADDRESS isn&apos;t set
&lt;dvdhrm&gt; Yepp.
&lt;halfline&gt; i assume now, pam_systemd settings DBUS_SESSION_BUS_ADDRESS ?
&lt;dvdhrm&gt; dbus-daemon-1.10 optionally supports the user-bus to make it socket-activated
&lt;halfline&gt; and it it implicitly activates dbus-daemon from the session stack of the pam service ?
&lt;dvdhrm&gt; systemd-226 also added support for this, if the socket-activation is enabled.
&lt;dvdhrm&gt; Nah, systemd doesn&apos;t enable it. Only if the dbus.socket/service unit is enabled, the user-bus is used.
&lt;dwalsh&gt; Well we might need to patch systemd to get the right thing to happen. Basically we want the session bus to run based off of the caller process.  If it is unconfined_t it should run it as unconfined_dbusd_t
&lt;dwalsh&gt; if staff_t run it as staff_dbusd_t.
&lt;dwalsh&gt; This happens automatically via transition rules.
&lt;dwalsh&gt; unconfined_t @dbusd_exec_t -&gt; unconfined_dbusd_t
&lt;halfline&gt; is the dbus.socket user unit enabled by default now ?
&lt;dwalsh&gt; Seems to be
&lt;dvdhrm&gt; dbus-daemon-1.10 installs it by default as multi-user dependency, yes.
&lt;halfline&gt; so what&apos;s 1) connecting to the socket first to make it activate at login time 2) pushing DBUS_SESSION_BUS_ADDRESS into the environment before GDM runs its own instance ?
&lt;dvdhrm&gt; halfline, pam_systemd pushes it into the environment if the socket in /run exists
&lt;dvdhrm&gt; Regarding 1): no-one. Socket activation does _not_ require activation at login time
&lt;dvdhrm&gt; It&apos;s transparent.
&lt;halfline&gt; oh, i understand now, the socket address is a well known name, so pam_systemd sets it before hand
&lt;dvdhrm&gt; Yes, it&apos;s even hard-coded in gdbus, libdbus, etc.
&lt;halfline&gt; gotcah
&lt;halfline&gt; *gotcha
&lt;dvdhrm&gt; dwalsh, `systemd --user` is run from within a pam-session of the user. dbus-daemon is then forked off there.
&lt;halfline&gt; s/a/the first/
&lt;dvdhrm&gt; true
&lt;dwalsh&gt; &lt;dwalsh&gt; We need systemd to do something like, ask kernel if SOURCE executes dbusd_exec_t, what context should it run as, and then setexeccon on it.
&lt;dwalsh&gt; &lt;dwalsh&gt; unconfined_t @ dbusd_exec_t -&gt; unconfined_dbusd_t
&lt;dwalsh&gt; &lt;dwalsh&gt; staff_t @dbusd_exec_t -&gt; staff_dbusd_t
&lt;dwalsh&gt; If the process that is talking to the socket is running as unconfined_t this will work.
&lt;halfline&gt; yea it should be unconfined by default since it&apos;s a child of the first pam session
&lt;halfline&gt; hmm there&apos;s a bit of asymmetry here though
&lt;halfline&gt; if something causes a system service to activate, the activated service doesn&apos;t run in the context of the thing activating it
&lt;dwalsh&gt; Currently it is just executing the dbusd_exec_t based on systemds label.  init_t @dbusd_exec_t -&gt; system_dbusd_t Which is very wrong.
&lt;halfline&gt; e.g. if I run &quot;systemctl start foo.service&quot; foo.service doesn&apos;t run unconfined
&lt;dwalsh&gt; As long as the session bus is running as unconfined_dbusd_t or staff_dbusd_t the rest of the transitions will work.
&lt;dwalsh&gt; Correct.
&lt;dwalsh&gt; The problem is just with systemd executing dbusd_exec_t on behalf of a user.
&lt;halfline&gt; but you&apos;re suggesting that if i run systemctl --user start foo.service it should run the foo user service as the context of the process that ran the command
&lt;dwalsh&gt; No I am suggesting that it follow the rules as is the user session ran dbusd_exec_t itself.
&lt;dwalsh&gt; Rather then init_t running itself.
&lt;dwalsh&gt; init_t @ dbusd_exec_t -&gt; system_dbusd_t
&lt;dwalsh&gt; unconfined_t @dbusd_exec_t -&gt; unconfined_dbusd_t
&lt;dwalsh&gt; Which is what we have in f23 and before.
&lt;halfline&gt; okay so you&apos;re not saying to look at the source directly, i misunderstood
&lt;dvdhrm&gt; What&apos;s &quot;systemd --user&quot; running as?
&lt;dwalsh&gt; Right we have two options from systemd it either queries the policy, which systemd already does for other impersonations.  Or it could do a fork(), setcon(SOURCE); exec dbusd_exec_t
&lt;dwalsh&gt; dvdhrm, unconfined_t or staff_t or gdm_t 
&lt;dwalsh&gt; It is running in the uses session. 
&lt;dwalsh&gt; It is running in the user session. 
&lt;dwalsh&gt; When systemd does socket activation for a service, it is doing this via setcon()  IE If it listens for apache it does it as httpd_t, if it does it for sshd it does it as sshd_t, at least theoretically.
&lt;sd-bot7&gt; [systemd|jwrdegoede] hwdb: Add Thinkpad X1 carbon 3rd gen to 70-pointingstick.hwdb https://github.com/systemd/systemd/commit/c01705b
&lt;sd-bot7&gt; [systemd|zonque] Merge pull request #1267 from systemd-mailing-devs/1442233013-14985-1-git-send-email-hdegoede@redhat.com https://github.com/systemd/systemd/commit/e72b93f
&lt;halfline&gt; dwalsh: so i don&apos;t understand how it&apos;s running as dbus_exec_t
&lt;halfline&gt; if it&apos;s parent is systemd --user running as unconfined_t how is it transitioning to dbus_exec_t right now?
&lt;halfline&gt; if it didn&apos;t do that wouldn&apos;t things be golden ?
&lt;halfline&gt; socket activation is handled by the systemd --user instance, not the systemd system instance if i understand correctly
&lt;dwalsh&gt; I think systemd --user sends a message to systemd and systemd executes the user session.
&lt;dwalsh&gt; I don&apos;t think systemd --user is executing dbusd directly.

--- Additional comment from Miroslav Grepl on 2015-09-14 14:29:35 EDT ---

Ok, this is maybe a problem with 

/usr/lib/systemd/systemd --user

running as init_t instead of unconfined_t for unconfined_u SELinux user. So the problem is we lack of pam_selinux support for /etc/pam.d/systemd-user. AFAIK there is a bug for this.

$ ps axfZ | grep dbus
http://pastebin.test.redhat.com/312551

But we need to do more testing if this could be a solution here.

--- Additional comment from Miroslav Grepl on 2015-09-14 14:31:18 EDT ---

(In reply to Miroslav Grepl from comment #2)
&gt; Ok, this is maybe a problem with 
&gt; 
&gt; /usr/lib/systemd/systemd --user
&gt; 
&gt; running as init_t instead of unconfined_t for unconfined_u SELinux user. So
&gt; the problem is we lack of pam_selinux support for /etc/pam.d/systemd-user.
&gt; AFAIK there is a bug for this.
&gt; 
&gt; $ ps axfZ | grep dbus
&gt; http://pastebin.test.redhat.com/312551

This is with pam_selinux + systemd-user.

&gt; 
&gt; But we need to do more testing if this could be a solution here.

--- Additional comment from Miroslav Grepl on 2015-09-15 02:23:02 EDT ---

For testing you need to uncomment pam_selinux.so calling in /etc/pam.d/systemd-user and add the following local policy

$ cat mysystemdpam.cil
(allow userdomain init_exec_t(file (entrypoint)))
(allow init_t userdomain( process (transition)))

# semodule -i mysystemdpam.cil 

Note: It has been tested only for unconfined_u SELinux user. I see some pam_selinux troubles with SELinux confined users which need to be more explored.

--- Additional comment from Petr Lautrbach on 2015-09-15 04:35:58 EDT ---

I&apos;ve added the following 2 lines to /etc/pam.d/systemd-user and it seems to work for stafff_u and session services while system services stay unconfined_service_t.

session    required     pam_selinux.so close
session    required     pam_selinux.so open env_params

system_u:system_r:system_dbusd_t:s0-s0:c0.c1023 1101 ? Ssl   0:00 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
system_u:system_r:unconfined_service_t:s0-s0:c0.c1023 1702 ? Sl   0:00 /usr/sbin/abrt-dbus -t133
system_u:system_r:xdm_t:s0-s0:c0.c1023  dbus-launch --autolaunch=562c1ca6bb7244098a931fe890f9e2fc --binary-syntax --close-stderr
system_u:system_r:xdm_t:s0-s0:c0.c1023  /usr/bin/dbus-daemon --fork --print-pid 5 --print-address 7 --session
staff_u:staff_r:staff_t:s0-s0:c0.c1023  dbus-launch --sh-syntax --exit-with-session
staff_u:staff_r:staff_dbusd_t:s0-s0:c0.c1023 /usr/bin/dbus-daemon --fork --print-pid 5 --print-address 7 --session
staff_u:staff_r:staff_dbusd_t:s0-s0:c0.c1023  /bin/dbus-daemon --config-file=/etc/at-spi2/accessibility.conf --nofork --print-address 3

--- Additional comment from Daniel Walsh on 2015-09-15 09:23:55 EDT ---

So gdm seems to be working correctly?  Only abrt-dbus is a problem?  Or is this a separate issue?

--- Additional comment from Miroslav Grepl on 2015-09-15 11:31:52 EDT ---

(In reply to Daniel Walsh from comment #6)
&gt; So gdm seems to be working correctly?  Only abrt-dbus is a problem?  Or is
&gt; this a separate issue?

Yes, this is a separate issue which we have also for setroubleshoot (#1262993).

Thank you for testing. Going to create a policy clone and add fixes to rawhide. 

We will need to have 

# This file is part of systemd.
#
# Used by systemd --user instances.

account  include system-auth
# pam_selinux.so close should be the first session rule
session    required     pam_selinux.so close
# pam_selinux.so open should only be followed by sessions to be executed in the user context
session    required     pam_selinux.so nottys open
session  include system-auth

in /etc/pam.d/systemd-user.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9094260</commentid>
    <comment_count>1</comment_count>
    <who name="Jan Kurik">jkurik</who>
    <bug_when>2016-02-24 10:31:02 -0500</bug_when>
    <thetext>This bug appears to have been reported against &apos;rawhide&apos; during the Fedora 24 development cycle.
Changing version to &apos;24&apos;.

More information and reason for this action is here:
https://fedoraproject.org/wiki/Fedora_Program_Management/HouseKeeping/Fedora24#Rawhide_Rebase</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9747413</commentid>
    <comment_count>2</comment_count>
    <who name="Fedora Admin XMLRPC Client">fedora-admin-xmlrpc</who>
    <bug_when>2016-09-27 11:13:17 -0400</bug_when>
    <thetext>This package has changed ownership in the Fedora Package Database.  Reassigning to the new owner of this component.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9954166</commentid>
    <comment_count>3</comment_count>
    <who name="Robin Powell">rlpowell</who>
    <bug_when>2016-12-04 04:18:06 -0500</bug_when>
    <thetext>I can&apos;t tell if this is related or not, but systemd --user is utterly failing for me on both my F24 and Rawhide systems unless selinux is unenforcing.

If I do this:

sudo systemctl restart user@1000.service

I get:


type=AVC msg=audit(1480842972.704:1769): avc:  denied  { write } for  pid=10222 comm=&quot;systemd&quot; name=&quot;user@1000.service&quot; dev=&quot;cgroup&quot; ino=371 scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.704:1770): avc:  denied  { remove_name } for  pid=10222 comm=&quot;systemd&quot; name=&quot;dbus.socket&quot; dev=&quot;cgroup&quot; ino=499 scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.704:1771): avc:  denied  { rmdir } for  pid=10222 comm=&quot;systemd&quot; name=&quot;dbus.socket&quot; dev=&quot;cgroup&quot; ino=499 scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.704:1772): avc:  denied  { add_name } for  pid=10222 comm=&quot;systemd&quot; name=&quot;systemd-exit.service&quot; scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.704:1773): avc:  denied  { create } for  pid=10222 comm=&quot;systemd&quot; name=&quot;systemd-exit.service&quot; scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=staff_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.814:1779): avc:  denied  { ioctl } for  pid=10521 comm=&quot;systemd&quot; path=&quot;socket:[79663]&quot; dev=&quot;sockfs&quot; ino=79663 ioctlcmd=0x5401 scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:system_r:init_t:s0 tclass=unix_stream_socket permissive=1
type=AVC msg=audit(1480842972.849:1780): avc:  denied  { write } for  pid=10521 comm=&quot;systemd&quot; name=&quot;user@1000.service&quot; dev=&quot;cgroup&quot; ino=371 scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.849:1781): avc:  denied  { add_name } for  pid=10521 comm=&quot;systemd&quot; name=&quot;dbus.socket&quot; scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=system_u:object_r:cgroup_t:s0 tclass=dir permissive=1
type=AVC msg=audit(1480842972.849:1782): avc:  denied  { create } for  pid=10521 comm=&quot;systemd&quot; name=&quot;dbus.socket&quot; scontext=staff_u:staff_r:staff_t:s0-s0:c0.c1023 tcontext=staff_u:object_r:cgroup_t:s0 tclass=dir permissive=1

Not having user-level systemd is pretty bad, so please let me know if I should open another ticket, or anything else I can do to help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9961277</commentid>
    <comment_count>4</comment_count>
    <who name="Lukas Vrabec">lvrabec</who>
    <bug_when>2016-12-06 12:03:37 -0500</bug_when>
    <thetext>This is another bug. You opened one issue for this. We&apos;ll discuss it there.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>