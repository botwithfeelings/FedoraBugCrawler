<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1238406</bug_id>
          
          <creation_ts>2015-07-01 15:45:00 -0400</creation_ts>
          <short_desc>Glibc locale subpackaging</short_desc>
          <delta_ts>2016-04-20 10:46:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>Changes Tracking</component>
          <version>24</version>
          <rep_platform>Unspecified</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>NEXTRELEASE</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>ChangeAcceptedF23, SystemWideChange, ChangeAcceptedF24</status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>unspecified</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>1300569</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jan Kurik">jkurik</reporter>
          <assigned_to name="Mike FABIAN">mfabian</assigned_to>
          <cc>codonell</cc>
    
    
    <cc>fweimer</cc>
    
    
    <cc>mfabian</cc>
    
    
    <cc>mnewsome</cc>
    
    
    <cc>pnemade</cc>
    
    
    <cc>psatpute</cc>
    
    
    <cc>stsp</cc>
          
          
          <cf_fixed_in></cf_fixed_in>
          <cf_doc_type>Bug Fix</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2016-03-26 15:02:14</cf_last_closed>
          <cf_type>---</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>8399007</commentid>
    <comment_count>0</comment_count>
    <who name="Jan Kurik">jkurik</who>
    <bug_when>2015-07-01 15:45:21 -0400</bug_when>
    <thetext>This is a tracking bug for Change: Glibc locale subpackaging
For more details, see: https://fedoraproject.org//wiki/Changes/Glibc_locale_subpackaging

This change should make it possible to install or uninstall locales individually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8437939</commentid>
    <comment_count>1</comment_count>
    <who name="Jan Kurik">jkurik</who>
    <bug_when>2015-07-14 10:02:52 -0400</bug_when>
    <thetext>This message is a reminder that Fedora 23 Change Checkpoint: Completion deadline (testable) is on 2015-07-28 [1].

At this point, all accepted Changes should be substantially complete, and testable. Additionally, if a change is to be enabled by default, it must be so enabled at Change Completion deadline.

This bug should be set at least to the MODIFIED state to indicate that it achieved completeness. Status will be provided to FESCo right after the deadline. If, for any reasons, your Change is not in required state, let me know and we will try to find solution. For Changes you decide to cancel/move to the next release, please use the NEW status and set needinfo on me and it will be acted upon. 

In case of any questions, don&apos;t hesitate to ask Wrangler (jkurik). Thank you.

[1] https://fedoraproject.org/wiki/Releases/23/Schedule</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8443401</commentid>
    <comment_count>2</comment_count>
    <who name="Jan Kurik">jkurik</who>
    <bug_when>2015-07-15 09:52:04 -0400</bug_when>
    <thetext>This bug appears to have been reported against &apos;rawhide&apos; during the Fedora 23 development cycle.
Changing version to &apos;23&apos;.

(As we did not run this process for some time, it could affect also pre-Fedora 23 development
cycle bugs. We are very sorry. It will help us with cleanup during Fedora 23 End Of Life. Thank you.)

More information and reason for this action is here:
https://fedoraproject.org/wiki/BugZappers/HouseKeeping/Fedora23</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8505668</commentid>
    <comment_count>3</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2015-08-03 09:58:27 -0400</bug_when>
    <thetext>There are still too many open questions and I have not yet started the implementation. Therefore, I think this must be moved to rawhide.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8511988</commentid>
    <comment_count>4</comment_count>
    <who name="Parag Nemade">pnemade</who>
    <bug_when>2015-08-05 02:40:15 -0400</bug_when>
    <thetext>Thanks Mike for providing update, I am removing(by commenting) this Change from https://fedoraproject.org/wiki/Releases/23/ChangeSet and moving back the category of wiki page as ChangePageIncomplete state.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8995191</commentid>
    <comment_count>5</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2016-01-20 06:00:20 -0500</bug_when>
    <thetext>The proposed change is pushed to the
git branch &quot;private-mfabian-locale-subpackaging-folders&quot; in
our Fedora git repository for the glibc package.

Packages for testing the locale sub-packaging on F23 are here: https://mfabian.fedorapeople.org/glibc/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>8998528</commentid>
    <comment_count>6</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2016-01-21 03:15:00 -0500</bug_when>
    <thetext>Copr repo for testing:

https://copr.fedoraproject.org/coprs/mfabian/glibc/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9065282</commentid>
    <comment_count>7</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2016-02-15 11:50:02 -0500</bug_when>
    <thetext>New branch for this in the git-dist repo for glibc:

private-mfabian-locale-subpackaging-folders-new</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9093076</commentid>
    <comment_count>8</comment_count>
    <who name="Jan Kurik">jkurik</who>
    <bug_when>2016-02-24 09:26:17 -0500</bug_when>
    <thetext>On 2016-Feb-23, we have reached Fedora 24 Change Checkpoint: Completion deadline (testable).

At this point, all accepted changes should be substantially complete, and testable. Additionally, if a change is to be enabled by default, it must be so enabled at Change Completion deadline.

Change tracking bug should be set to the MODIFIED state to indicate it achieved completeness.

Incomplete and non testable Changes will be reported to FESCo on 2016-Feb-26 meeting.  Contingency plan for System Wide Changes, if planned for Alpha (or in case of serious doubts regarding Change completion), will be activated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9097796</commentid>
    <comment_count>9</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2016-02-25 09:31:22 -0500</bug_when>
    <thetext>The latest work is now in the 

private-mfabian-locale-subpackaging-folders-2016-02-25

branch in dist-git.

Seems to work fine. After a final review by Carlos O&apos;Donell, I think
I can push it to rawhide/f24 today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9107306</commentid>
    <comment_count>10</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-02-29 16:50:58 -0500</bug_when>
    <thetext>Hello.

After the today&apos;s &quot;yum update&quot; (on f24) I&apos;ve lost my locale
and half of the programs stopped working. Others are unreadable.

$ locale
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_ALL to default locale: No such file or directory
LANG=ru_RU.UTF-8
LC_CTYPE=&quot;ru_RU.UTF-8&quot;
LC_NUMERIC=&quot;ru_RU.UTF-8&quot;
LC_TIME=&quot;ru_RU.UTF-8&quot;
LC_COLLATE=&quot;ru_RU.UTF-8&quot;
LC_MONETARY=&quot;ru_RU.UTF-8&quot;
LC_MESSAGES=&quot;ru_RU.UTF-8&quot;
LC_PAPER=&quot;ru_RU.UTF-8&quot;
LC_NAME=&quot;ru_RU.UTF-8&quot;
LC_ADDRESS=&quot;ru_RU.UTF-8&quot;
LC_TELEPHONE=&quot;ru_RU.UTF-8&quot;
LC_MEASUREMENT=&quot;ru_RU.UTF-8&quot;
LC_IDENTIFICATION=&quot;ru_RU.UTF-8&quot;
LC_ALL=

$ locale -a
locale: Cannot set LC_CTYPE to default locale: No such file or directory
locale: Cannot set LC_MESSAGES to default locale: No such file or directory
locale: Cannot set LC_COLLATE to default locale: No such file or directory
C
C.utf8
POSIX


$ gnome-terminal 
(process:3770): Gtk-WARNING **: Locale not supported by C library.
        Using the fallback &apos;C&apos; locale.
Error constructing proxy for org.gnome.Terminal:/org/gnome/Terminal/Factory0: Error calling StartServiceByName for org.gnome.Terminal: GDBus.Error:org.freedesktop.DBus.Error.Spawn.ChildExited: Process org.gnome.Terminal exited with status 9


How to bring the system back to live? Help!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9108401</commentid>
    <comment_count>11</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-02-29 22:55:27 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #10)
&gt; Hello.
&gt; 
&gt; After the today&apos;s &quot;yum update&quot; (on f24) I&apos;ve lost my locale
&gt; and half of the programs stopped working. Others are unreadable.
&gt; 
&gt; $ locale
&gt; locale: Cannot set LC_CTYPE to default locale: No such file or directory
&gt; locale: Cannot set LC_MESSAGES to default locale: No such file or directory
&gt; locale: Cannot set LC_ALL to default locale: No such file or directory
&gt; LANG=ru_RU.UTF-8
&gt; LC_CTYPE=&quot;ru_RU.UTF-8&quot;
&gt; LC_NUMERIC=&quot;ru_RU.UTF-8&quot;
&gt; LC_TIME=&quot;ru_RU.UTF-8&quot;
&gt; LC_COLLATE=&quot;ru_RU.UTF-8&quot;
&gt; LC_MONETARY=&quot;ru_RU.UTF-8&quot;
&gt; LC_MESSAGES=&quot;ru_RU.UTF-8&quot;
&gt; LC_PAPER=&quot;ru_RU.UTF-8&quot;
&gt; LC_NAME=&quot;ru_RU.UTF-8&quot;
&gt; LC_ADDRESS=&quot;ru_RU.UTF-8&quot;
&gt; LC_TELEPHONE=&quot;ru_RU.UTF-8&quot;
&gt; LC_MEASUREMENT=&quot;ru_RU.UTF-8&quot;
&gt; LC_IDENTIFICATION=&quot;ru_RU.UTF-8&quot;
&gt; LC_ALL=
&gt; 
&gt; $ locale -a
&gt; locale: Cannot set LC_CTYPE to default locale: No such file or directory
&gt; locale: Cannot set LC_MESSAGES to default locale: No such file or directory
&gt; locale: Cannot set LC_COLLATE to default locale: No such file or directory
&gt; C
&gt; C.utf8
&gt; POSIX
&gt; 
&gt; 
&gt; $ gnome-terminal 
&gt; (process:3770): Gtk-WARNING **: Locale not supported by C library.
&gt;         Using the fallback &apos;C&apos; locale.
&gt; Error constructing proxy for
&gt; org.gnome.Terminal:/org/gnome/Terminal/Factory0: Error calling
&gt; StartServiceByName for org.gnome.Terminal:
&gt; GDBus.Error:org.freedesktop.DBus.Error.Spawn.ChildExited: Process
&gt; org.gnome.Terminal exited with status 9
&gt; 
&gt; 
&gt; How to bring the system back to live? Help!

`dnf install glibc-all-langpacks` will fix this. We are working to resolver this issue as quickly as possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9109195</commentid>
    <comment_count>12</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-01 03:36:12 -0500</bug_when>
    <thetext>With glibc-2.23.90-3.fc25 and glibc-2.23.1-5.fc24 we have now fixed
the issue in several important ways.

See:
https://lists.fedoraproject.org/archives/list/devel@lists.fedoraproject.org/message/WXOOUGA3YCB2O4O77JGLSJZ25BS4RFK5/

You should now always get glibc-all-langpacks by default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110064</commentid>
    <comment_count>13</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 07:56:46 -0500</bug_when>
    <thetext>I still don&apos;t understand why things broke in a
way they did. If I would be switched the the C
locale then fine. Why instead programs started
failing to start, or write unreadable chars?
Surely the fall-back should be handled better.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110474</commentid>
    <comment_count>14</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-01 09:47:17 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #13)
&gt; I still don&apos;t understand why things broke in a
&gt; way they did. If I would be switched the the C
&gt; locale then fine. Why instead programs started
&gt; failing to start, or write unreadable chars?
&gt; Surely the fall-back should be handled better.

The failure is entirely on the part of the glibc team. We didn&apos;t test enough end-user applications to determine that several key applications would actually fail if a call to setlocale failed. In theory these applications are poorly written and not robust. These applications need to all be updated to handle running in C or C.UTF-8 locales. In practice we had to fix these cases by changing the dependency requirements to install all the glibc language packs when transitioning from a non-language-pack system to one that supports language-packs. We will continue to work to ensure this transition is smooth. We will also look into running systems in pure C.UTF-8 mode i.e. only glibc-minimal-langpack installed and file bugs for every program that fails to operate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110618</commentid>
    <comment_count>15</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 10:07:13 -0500</bug_when>
    <thetext>&gt; The failure is entirely on the part of the glibc team. We didn&apos;t test enough 
&gt; end-user applications to determine that several key applications would
&gt; actually fail if a call to setlocale failed. In theory these applications are
&gt; poorly written and not robust.
It seems to me that even setlocale(LC_ALL,&quot;&quot;) fails.
According to the man page,
       For  glibc, first (regardless of cate‐
       gory), the environment variable LC_ALL is inspected, next the  environ‐
       ment variable with the same name as the category (see the table above),
       and finally the environment variable LANG.  The first existing environ‐
       ment  variable  is used.  If its value is not a valid locale specifica‐
       tion, the locale is unchanged, and setlocale() returns NULL.

... so in its current implementation it should indeed fail.
Wouldn&apos;t it be better if it try some fall-back like &quot;C&quot; first?
IMHO that glibc-specific implementation is not robust, not the apps.
You want the apps to simply ignore the setlocale(LC_ALL,&quot;&quot;) return value?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110837</commentid>
    <comment_count>16</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-01 10:49:24 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #15)
&gt; &gt; The failure is entirely on the part of the glibc team. We didn&apos;t test enough 
&gt; &gt; end-user applications to determine that several key applications would
&gt; &gt; actually fail if a call to setlocale failed. In theory these applications are
&gt; &gt; poorly written and not robust.
&gt; It seems to me that even setlocale(LC_ALL,&quot;&quot;) fails.

Correct.

&gt; ... so in its current implementation it should indeed fail.

Correct.

&gt; Wouldn&apos;t it be better if it try some fall-back like &quot;C&quot; first?

No. It&apos;s the responsibility of the application to do this, because only the application knows if a translation is critical, particuarly when UTF-8 support is needed.

&gt; IMHO that glibc-specific implementation is not robust, not the apps.
&gt; You want the apps to simply ignore the setlocale(LC_ALL,&quot;&quot;) return value?

No. The application must decide if the locale is critical to operation or not. In many of the cases I&apos;ve seen, particularly gnome-terminal, the terminal could have continued to operate with the C or C.UTF-8 locale. I see no reason for gnome-terminal to exit with an error. Therefor it should be robust and (a) try C.UTF-8 to get UTF-8 support, or otherwise (b) fall back to trying C, and using that.

For something like ssh the question is more difficult to answer because converting from UTF-8 input to ASCII is lossy, and may result in output that is unrepresentable and makes the terminal useless. Even then ssh could also fall back to C.UTF-8 and if that doesn&apos;t work (it would allow you to represent all language characters but not their cultural conventions) then you might fail instead of trying C.

Does that clarify our position?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110955</commentid>
    <comment_count>17</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 11:15:51 -0500</bug_when>
    <thetext>&gt; No. It&apos;s the responsibility of the application to do this, because only the
&gt; application knows if a translation is critical, particuarly when UTF-8 support
&gt; is needed.
Could you please confirm that you mean exactly setlocale(LC_ALL,&quot;&quot;)?
I thought if an apps does this, it implies that the translation
is not critical. Please note that the problem is not only that
the apps do not start. I suppose the ones that do not start, are
indeed locale-sensitive, and they do not do setlocale(LC_ALL,&quot;&quot;)
at first place (maybe they do setlocale(LC_ALL,&quot;C.UTF-8&quot;) or something -
then they should be fixed the way you suggest).
The problem is that the apps that DO start, still write the unreadable
chars. This presumably comes from the fact that setlocale(LC_ALL,&quot;&quot;)
fails, but they ignore the return value.
I wonder if someone ever checks the return value of setlocale(LC_ALL,&quot;&quot;)
at all. So maybe at least this part of the problem can be fixed on a
glibc level?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9110993</commentid>
    <comment_count>18</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-01 11:21:56 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #17)
&gt; &gt; No. It&apos;s the responsibility of the application to do this, because only the
&gt; &gt; application knows if a translation is critical, particuarly when UTF-8 support
&gt; &gt; is needed.
&gt; Could you please confirm that you mean exactly setlocale(LC_ALL,&quot;&quot;)?

Calling setlocale(LC_ALL,&quot;&quot;) simply means that the application has been tested with and expects to work with *all* locales the user might possible set via environment variables. Such a call *may* fail if the user sets invalid values in their environment variables, and the application needs to decide if it should or should not support this case.

&gt; I thought if an apps does this, it implies that the translation
&gt; is not critical. 

It does not imply that at all. Calling setlocale(LC_ALL,&quot;&quot;) means that the environment is examined to set the locale. The application must still decide if failure is fatal or not.

&gt; The problem is that the apps that DO start, still write the unreadable
&gt; chars. This presumably comes from the fact that setlocale(LC_ALL,&quot;&quot;)
&gt; fails, but they ignore the return value.

Yes. If you used C.UTF-8 you&apos;d always be able to write *any* characters.

&gt; I wonder if someone ever checks the return value of setlocale(LC_ALL,&quot;&quot;)
&gt; at all. So maybe at least this part of the problem can be fixed on a
&gt; glibc level?

The only fix at the glibc level is to provide C.UTF-8 for application usage and to make it a standard for all distributions such that upstream can rely on it.

If you find a distribution that *doesn&apos;t* have C.UTF-8, please contact me and I&apos;ll work with the liason for that distribution in upstream glibc to discuss options and solutions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111035</commentid>
    <comment_count>19</comment_count>
    <who name="Mike FABIAN">mfabian</who>
    <bug_when>2016-03-01 11:27:48 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #17)
&gt; &gt; No. It&apos;s the responsibility of the application to do this, because only the
&gt; &gt; application knows if a translation is critical, particuarly when UTF-8 support
&gt; &gt; is needed.
&gt; Could you please confirm that you mean exactly setlocale(LC_ALL,&quot;&quot;)?
&gt; I thought if an apps does this, it implies that the translation
&gt; is not critical. Please note that the problem is not only that
&gt; the apps do not start. I suppose the ones that do not start, are
&gt; indeed locale-sensitive, and they do not do setlocale(LC_ALL,&quot;&quot;)
&gt; at first place (maybe they do setlocale(LC_ALL,&quot;C.UTF-8&quot;) or something -
&gt; then they should be fixed the way you suggest).

I think you misunderstand what setlocale(LC_ALL,&quot;&quot;) means.

man setlocale&gt; If locale  is an empty string,  &quot;&quot;, each part of  the locale
man setlocale&gt; that should be modified is  set according to the environment
man setlocale&gt; variables.

So if an app uses setlocale(LC_ALL, &quot;&quot;), it does not mean at all that
it does not want to use translations. It sets the locales according ot
the environment variables, which contain the locales the user wants to
use, including the locale the use wants to use for the translation.

setlocale(LC_ALL,&quot;C.UTF-8&quot;) does *not* use the environment variables
but just sets the C.UTF-8 locale. The user will not get translations
in that case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111048</commentid>
    <comment_count>20</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 11:29:05 -0500</bug_when>
    <thetext>&gt; Calling setlocale(LC_ALL,&quot;&quot;) simply means that the application has been tested
&gt; with and expects to work with *all* locales the user might possible set via
&gt; environment variables.
Yes, so since it can work with all and any locale
(even &quot;C&quot; or &quot;C.UTF-8&quot;), then I don&apos;t see a big problem
if such locale is forced to it as a fall-back. As you say,
it can work with anything, so why would it care? Why would
it break on such a fall-back? So that&apos;s the logic I&apos;d like
to put for considerations.
Thanks for your explanations!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111057</commentid>
    <comment_count>21</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 11:30:56 -0500</bug_when>
    <thetext>&gt; So if an app uses setlocale(LC_ALL, &quot;&quot;), it does not mean at all that
&gt; it does not want to use translations.
No, I didn&apos;t mean that either.
Its just that it can work with anything user wants.
And since it can work with anything, it looks exactly
like the right place for the fall-back. Is it not? :)
Anyway, that&apos;s just an idea.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111404</commentid>
    <comment_count>22</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-01 13:25:32 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #21)
&gt; &gt; So if an app uses setlocale(LC_ALL, &quot;&quot;), it does not mean at all that
&gt; &gt; it does not want to use translations.
&gt; No, I didn&apos;t mean that either.
&gt; Its just that it can work with anything user wants.
&gt; And since it can work with anything, it looks exactly
&gt; like the right place for the fall-back. Is it not? :)
&gt; Anyway, that&apos;s just an idea.

Except that glibc is the wrong place to decide this and it would violate the specification of the API. Only the application knows if a fallback is OK if the user&apos;s selected locale is missing. There is too much application specific knowledge required to make that decision. So we leave it up to the application:
...
/* Try to load the locale the user wanted.  */
char old_locale;
if ((old_locale = setlocale (LC_ALL, &quot;&quot;)) == NULL)
  {
    /* Given that we are mostly a UI app, we&apos;ll ignore
       the failure, but we&apos;ll add an icon in the UI to
       warn the user that their locale settings are wrong.
       However, because we might need to dispaly all sorts
       of characters, we want UTF-8 support, so try C.UTF-8.  */
    failed_locale_load = true;
    if ((old_locale = setlocale (LC_ALL, &quot;C.UTF-8&quot;)) == NULL)
      {
        /* Error!  */
        ...
      } 
  }
/* Either we set the user&apos;s locale or we set C.UTF-8.  */
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111626</commentid>
    <comment_count>23</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 15:08:37 -0500</bug_when>
    <thetext>OK, how about the simpler fix: the default
locale can be &quot;C.UTF-8&quot; instead of &quot;C&quot;.
Then the fall-back is not needed and the app still
has the control over the wrongly set locale. But if
setlocale() fails, the &quot;C.UTF-8&quot; locale will remain.
Can this work?

&gt; if ((old_locale = setlocale (LC_ALL, &quot;&quot;)) == NULL)
&gt;   {
&gt;     if ((old_locale = setlocale (LC_ALL, &quot;C.UTF-8&quot;)) == NULL)
This work-around may be reasonable for an apps that
want to handle the wrongly set locale, but 99% of them
do not want to deal with that. I maintain at least 2
apps that do setlocale(LC_ALL, &quot;&quot;) without checking
an error, and I would object to calling them &quot;poorly
written and not robust&quot; as this method was very common
and widely used - all until yesterday.
Lets just find a good compromise, I am sure it exists somewhere. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9111808</commentid>
    <comment_count>24</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-01 16:33:57 -0500</bug_when>
    <thetext>Or if the default can&apos;t be changed
that easily, how about adding an env var that
specifies the default locale?
In this case all apps that do not call setlocale(),
will work with whatever this var contains, or &quot;C&quot; if
it is not set. The same will be true if setlocale()
fails, so the problem will be solved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9113825</commentid>
    <comment_count>25</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-02 07:04:11 -0500</bug_when>
    <thetext>(In reply to Stas Sergeev from comment #23)
&gt; OK, how about the simpler fix: the default
&gt; locale can be &quot;C.UTF-8&quot; instead of &quot;C&quot;.
&gt; Then the fall-back is not needed and the app still
&gt; has the control over the wrongly set locale. But if
&gt; setlocale() fails, the &quot;C.UTF-8&quot; locale will remain.
&gt; Can this work?

That can work. We would need to discuss this upstream. Essentially expanding C to support UTF-8 transparently (since C is a subset of C.UTF-8). It would be hard to argue a case where you don&apos;t want UTF-8 support.

&gt; This work-around may be reasonable for an apps that
&gt; want to handle the wrongly set locale, but 99% of them
&gt; do not want to deal with that. I maintain at least 2
&gt; apps that do setlocale(LC_ALL, &quot;&quot;) without checking
&gt; an error, and I would object to calling them &quot;poorly
&gt; written and not robust&quot; as this method was very common
&gt; and widely used - all until yesterday.

That&apos;s the exact definition of non-robust e.g. unable to adapt to allowed system changes (removal of locales).

&gt; Lets just find a good compromise, I am sure it exists somewhere. :)

Agreed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9113837</commentid>
    <comment_count>26</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-03-02 07:07:59 -0500</bug_when>
    <thetext>(In reply to Carlos O&apos;Donell from comment #25)
&gt; (In reply to Stas Sergeev from comment #23)
&gt; &gt; OK, how about the simpler fix: the default
&gt; &gt; locale can be &quot;C.UTF-8&quot; instead of &quot;C&quot;.
&gt; &gt; Then the fall-back is not needed and the app still
&gt; &gt; has the control over the wrongly set locale. But if
&gt; &gt; setlocale() fails, the &quot;C.UTF-8&quot; locale will remain.
&gt; &gt; Can this work?
&gt; 
&gt; That can work. We would need to discuss this upstream. Essentially expanding
&gt; C to support UTF-8 transparently (since C is a subset of C.UTF-8). It would
&gt; be hard to argue a case where you don&apos;t want UTF-8 support.
&gt;

We can fix this immediately in Fedora Rawhide and experiment a bit with it.
https://bugzilla.redhat.com/show_bug.cgi?id=1313818</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9113876</commentid>
    <comment_count>27</comment_count>
    <who name="Stas Sergeev">stsp</who>
    <bug_when>2016-03-02 07:14:47 -0500</bug_when>
    <thetext>(In reply to Carlos O&apos;Donell from comment #26)
&gt; We can fix this immediately in Fedora Rawhide and experiment a bit with it.
&gt; https://bugzilla.redhat.com/show_bug.cgi?id=1313818
Thanks!
I didn&apos;t even went for other work-arounds and have
the system still broken, in a hope for something like
this to happen. :) I&apos;d be glad to test that fix on f24.

I am not sure though why you write this:
---
* Change setlocale code to try C.UTF-8 loading before falling back to the builtin C/POSIX locales.
---
What fix do you have in mind when saying that?
The fix I mentioned, didn&apos;t involve setlocale code,
because I proposed to have &quot;C.UTF-8&quot; by default, i.e.
when setlocale() is not even called. So you probably
went for something else after all?</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>