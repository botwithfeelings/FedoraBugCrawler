<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1373451</bug_id>
          
          <creation_ts>2016-09-06 06:19:00 -0400</creation_ts>
          <short_desc>Xwayland leaks FDs, eventually crashes with “too many open files”</short_desc>
          <delta_ts>2017-01-12 08:49:05 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>xorg-x11-server</component>
          <version>24</version>
          <rep_platform>x86_64</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>CURRENTRELEASE</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>unspecified</priority>
          <bug_severity>unspecified</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Will Thompson">will</reporter>
          <assigned_to name="X/OpenGL Maintenance List">xgl-maint</assigned_to>
          <cc>esteban.xandri</cc>
    
    
    <cc>maggu2810</cc>
    
    
    <cc>ofourdan</cc>
    
    
    <cc>xgl-maint</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in></cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2017-01-12 08:49:05</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>9681834</commentid>
    <comment_count>0</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-06 06:19:40 -0400</bug_when>
    <thetext>Description of problem:

When I run a VirtualBox (an X11 application, built with Qt) VM via Xwayland, the Xwayland process appears to leak fds whenever a substantial amount of the VM&apos;s virtual display is redrawn. Eventually, Xwayland hits the (default in Fedora) 1024 FD limit and, in due course, falls over. When running a GNOME-on-Wayland session, this crashes GNOME Shell and I lose my session. I can reproduce the problem under Weston: in that case, Weston itself survives.

The FDs that get (apparently) leaked are those created by os_create_anonymous_file(), based on correlating strace output with the contents of /proc/&lt;pid&gt;/fd. For example:

[pid 20626] open(&quot;/run/user/1000/xwayland-shared-Izz5lm&quot;, O_RDWR|O_CREAT|O_EXCL, 0600) = 5
[pid 20626] fcntl(5, F_GETFD)           = 0
[pid 20626] fcntl(5, F_SETFD, FD_CLOEXEC) = 0
[pid 20626] unlink(&quot;/run/user/1000/xwayland-shared-Izz5lm&quot;) = 0
[pid 20626] fcntl(5, F_DUPFD_CLOEXEC, 512) = 943
[pid 20626] close(5)                    = 0

and fd 943 is leaked.

This could of course be a bug in VirtualBox. If that were the case, I would expect to see it also leaking FDs (which I do not see based on a script which monitors all the relevant /proc/&lt;pid&gt;/fd directories every second); and I&apos;d rather my GNOME session didn&apos;t crash because of a buggy app :-)

Version-Release number of selected component (if applicable):

xorg-x11-server-Xwayland-1.18.4-4.fc24.x86_64
VirtualBox-5.1-5.1.4_110228_fedora24-1.x86_64

I believe this wasn&apos;t a problem when I had the following versions installed, but I haven&apos;t had a chance to try downgrading to test.

xorg-x11-server-Xwayland-1.18.4-1.fc24.x86_64
VirtualBox-5.1-5.1.2_108956_fedora24-1.x86_64

I have also not found another X11 application which triggers this behaviour, though I confess I haven&apos;t tried very many.

How reproducible: always

Steps to Reproduce:
1. Launch a VirtualBox VM under Xwayland
2. Cause redraws within the VM; open menus in the VirtualBox window; generally cause activity. Watch the number of open FDs in the Xwayland process increase
3. Eventually see the following output from Xwayland as it dies:

(EE) 
Fatal server error:
(EE) dup failed: Too many open files
(EE)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9682239</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-06 08:27:01 -0400</bug_when>
    <thetext>I(In reply to Will Thompson from comment #0)
&gt; [...]
&gt; 
&gt; The FDs that get (apparently) leaked are those created by
&gt; os_create_anonymous_file(), based on correlating strace output with the
&gt; contents of /proc/&lt;pid&gt;/fd. For example:
&gt; 
&gt; [pid 20626] open(&quot;/run/user/1000/xwayland-shared-Izz5lm&quot;,
&gt; O_RDWR|O_CREAT|O_EXCL, 0600) = 5
&gt; [pid 20626] fcntl(5, F_GETFD)           = 0
&gt; [pid 20626] fcntl(5, F_SETFD, FD_CLOEXEC) = 0
&gt; [pid 20626] unlink(&quot;/run/user/1000/xwayland-shared-Izz5lm&quot;) = 0
&gt; [pid 20626] fcntl(5, F_DUPFD_CLOEXEC, 512) = 943
&gt; [pid 20626] close(5)                    = 0

That&apos;s create_tmpfile_cloexec() in xwayland-shm.c

&gt; and fd 943 is leaked.

If it&apos;s leaked, then it means the close() in xwl_shm_destroy_pixmap() is not called, either because xwl_shm_destroy_pixmap() itself is not called or because xwl_pixmap is NULL or pixmap-&gt;refcnt is not equal to 1.

If we end up in the xwl_shm_*_pixmap() code, it&apos;s because either we are not using glamor (unlikely) or it&apos;s the cursor (as xwl_realize_cursor() calls in xwl_shm_create_pixmap() directly) - That&apos;s more likely.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9682446</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-06 09:13:22 -0400</bug_when>
    <thetext>Now, it&apos;s also possible that the application might be leaking pixmaps.

Do you see a unusual high number of pixmaps, increasing in &quot;xrestop&quot; for that application?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9682747</commentid>
    <comment_count>3</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-06 09:59:57 -0400</bug_when>
    <thetext>(In reply to Olivier Fourdan from comment #2)
&gt; Now, it&apos;s also possible that the application might be leaking pixmaps.
&gt; 
&gt; Do you see a unusual high number of pixmaps, increasing in &quot;xrestop&quot; for
&gt; that application?

Good question. In `xrestop` I don&apos;t see &quot;Pxms&quot; increasing but I do see &quot;Misc&quot; increasing whenever the FD count in Xwayland increases. I suppose it would make sense for Xwayland (serving many clients) to run out of FDs before the one client does.

I will try varying the version of VirtualBox – perhaps it&apos;s a regression there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9682784</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-06 10:09:53 -0400</bug_when>
    <thetext>Note that creating an X resource does not create a file descriptor for the client, it&apos;s the X server who allocates resources on behalf on its clients and in the case of Xwayland also open a file descriptor with using shm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9683011</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-06 10:59:49 -0400</bug_when>
    <thetext>I am try to reproduce, downloaded and installed virtualbox, running on Wayland, but I don&apos;t see the number of file descriptors increasing unfortunately.

Could you lease attach the output of &quot;journalctl -b -0 -t org.gnome.Shell.desktop&quot; (to see if Xwayland is using glamor) and the output of &quot;lsof&quot; as well?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9683216</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-06 11:38:51 -0400</bug_when>
    <thetext>I *can* reproduce the &quot;dup failed: Too many open files&quot; error, but it&apos;s not a &quot;leak&quot; in the sense that it&apos;s not a single app allocating consituously new pixmaps, I can reproduce by simply running several X11 based apps that use several cursors each.

Xwayland will allocate the resources on behalf of its clients, so the more clients, the more resources for the single Xwayland process.

As the cursor code uses a xwl_shm_*_pixmap()  which will open a new file descriptor each time, it doesn&apos;t take that many X11 apps to reach the limit of file descriptors.

But then, there&apos;s Rui&apos;s patch:

https://patchwork.freedesktop.org/patch/72738/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685383</commentid>
    <comment_count>7</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 03:38:12 -0400</bug_when>
    <thetext>(In reply to Olivier Fourdan from comment #5)
&gt; I am try to reproduce, downloaded and installed virtualbox, running on
&gt; Wayland, but I don&apos;t see the number of file descriptors increasing
&gt; unfortunately.

Your guess that it&apos;s probably the cursor is correct. When I mouse over the password field in the (Windows) VM login screen, for example, the VM cursor changes to an I-bar and I get 23 calls to xwl_shm_create_pixmap() as below and the open FD count on Xwayland increases by 23.

Thread 1 &quot;Xwayland&quot; hit Breakpoint 1, 0x0000000000426d00 in xwl_shm_create_pixmap ()
#0  0x0000000000426d00 in xwl_shm_create_pixmap ()
#1  0x00000000004268df in xwl_realize_cursor ()
#2  0x00000000004ee9ee in AnimCurRealizeCursor ()
#3  0x000000000054a28a in RealizeCursorAllScreens ()
#4  0x000000000054a718 in AllocARGBCursor ()
#5  0x00000000004eab1c in ProcRenderCreateCursor ()
#6  0x0000000000556c1f in Dispatch ()
#7  0x000000000055ac43 in dix_main ()
#8  0x00007fbd71c67731 in __libc_start_main () from /lib64/libc.so.6
#9  0x0000000000423919 in _start ()

&gt; Could you lease attach the output of &quot;journalctl -b -0 -t
&gt; org.gnome.Shell.desktop&quot; (to see if Xwayland is using glamor)

Here&apos;s the important bit:

Sep 07 08:22:32 tensionsheet org.gnome.Shell.desktop[1971]: glamor: EGL version 1.4 (DRI2):

&gt;  and the output
&gt; of &quot;lsof&quot; as well?

Coming up. The offending Xwayland process has pid 1978.

&gt; I *can* reproduce the &quot;dup failed: Too many open files&quot; error, but it&apos;s
&gt; not a &quot;leak&quot; in the sense that it&apos;s not a single app allocating consituously
&gt; new pixmaps, I can reproduce by simply running several X11 based apps that
&gt; use several cursors each.

You&apos;re more patient than me! I experimented with the gtk3-demo&apos;s cursor demo app, but couldn&apos;t get the same behaviour.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685507</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-07 04:06:43 -0400</bug_when>
    <thetext>(In reply to Will Thompson from comment #7)
&gt; Your guess that it&apos;s probably the cursor is correct. When I mouse over the
&gt; password field in the (Windows) VM login screen, for example, the VM cursor
&gt; changes to an I-bar and I get 23 calls to xwl_shm_create_pixmap() as below
&gt; and the open FD count on Xwayland increases by 23.

That sounds like a leak from the client though, it the client calls XRenderCreateCursor() without ever freeing them, this is a bug in the client.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685536</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-07 04:12:55 -0400</bug_when>
    <thetext>So I think we might have two problems actually:

 - An X client who&apos;s leaking cursors, which causes Xwayland to reach the maximum number of open file descriptors (because Xwayland opens a file descriptor for each new cursor) - This should be seen in xrestop, cursors show up as &quot;Misc&quot; iirc.

 - Xwayland keeping the file descriptors open for as long as the pixmap exist when using shm.

We can (or try to) improve the latter, but the former will inevitably cause trouble and should be fixed in the application (if the application is actually leaking cursors, of course)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685583</commentid>
    <comment_count>10</comment_count>
      <attachid>1198581</attachid>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 04:27:23 -0400</bug_when>
    <thetext>Created attachment 1198581
PyQt5 sample to reproduce this problem

Okay, I wrote a minimal PyQt5 app which exhibits the same problem under Xwayland when run with `WAYLAND_DISPLAY= ./cursors`, in an attempt to take VirtualBox out of the picture.

Repeatedly click the button (which creates a new cursor from a pixmap, and sets it as the cursor for the button). I don&apos;t see what more the application could do to clean up the old cursors (though I confess to not being a (Py)Qt expert!) and yet I see the same problem here: the app seems to leak the cursors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685594</commentid>
    <comment_count>11</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 04:32:08 -0400</bug_when>
    <thetext>(In reply to Will Thompson from comment #10)
&gt; the app seems to leak the
&gt; cursors.

Indeed, it calls xcb_render_create_cursor() but never xcb_free_cursor(). I guess this could be a Qt5 bug, a PyQt5 bug, or (most likely, of course!) a bug in this little app.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685896</commentid>
    <comment_count>12</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 05:57:42 -0400</bug_when>
    <thetext>Same thing, no Python: https://bugzilla.redhat.com/show_bug.cgi?id=1373451</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685897</commentid>
    <comment_count>13</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 05:58:01 -0400</bug_when>
    <thetext>Apparently today&apos;s the day for copy-paste mistakes: https://github.com/wjt/cursors</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9685903</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-07 05:59:14 -0400</bug_when>
    <thetext>And yet xcb_free_cursor() should be called from the destructor ~QXcbCursor()

https://github.com/qt/qtbase/blob/dev/src/plugins/platforms/xcb/qxcbcursor.cpp#L334</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9686015</commentid>
    <comment_count>15</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 06:36:41 -0400</bug_when>
    <thetext>Indeed. I can&apos;t spend any longer on this today, but will dig further later in the week…</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9686627</commentid>
    <comment_count>16</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-07 08:56:00 -0400</bug_when>
    <thetext>Robin Burchell discovered that there is only one QXcbCursor instance per screen, so the cache lasts (essentially) the lifetime of the application (or until you hot-unplug the screen). He&apos;s working on a patch to Qt.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9696809</commentid>
    <comment_count>17</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-11 12:56:29 -0400</bug_when>
    <thetext>https://codereview.qt-project.org/#/c/170426/ makes Qt cache only one pixmap cursor at a time, rather than all of them forever. I&apos;ve tested this patch with both my toy test app and the original VirtualBox VM, and it seems to do the trick.

I haven&apos;t read the patch at https://patchwork.freedesktop.org/patch/72738/ closely but I agree with you in principle :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9697728</commentid>
    <comment_count>18</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-09-12 02:40:34 -0400</bug_when>
    <thetext>Brilliant, thanks for your follow up on the Qt side! That will be beneficial on X native as well...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9754746</commentid>
    <comment_count>19</comment_count>
    <who name="Will Thompson">will</who>
    <bug_when>2016-09-29 13:03:31 -0400</bug_when>
    <thetext>The Qt patch has been merged, we can apparently expect that it will be included in 5.6.3 in a couple of months. (NB. the next release is 5.6.2.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9839987</commentid>
    <comment_count>20</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2016-11-02 04:16:14 -0400</bug_when>
    <thetext>So there are two issues here (comment 9), one is a bug in Qt and another one was a weakness in Xwayland that would keep the FD open as long as the cursor pixmap is used.

Rui&apos;s patch for the cursor which would greatly mitigate the issue has been merged upstream and is part of the latest F25 package xorg-x11-server-Xwayland-1.19.0-0.3.20161026.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10057195</commentid>
    <comment_count>21</comment_count>
    <who name="Olivier Fourdan">ofourdan</who>
    <bug_when>2017-01-12 08:49:05 -0500</bug_when>
    <thetext>Closing as current release, the Xwayland issue is fixed in 1.19.x.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>1198581</attachid>
            <date>2016-09-07 04:27:00 -0400</date>
            <delta_ts>2016-09-07 04:27:23 -0400</delta_ts>
            <desc>PyQt5 sample to reproduce this problem</desc>
            <filename>cursors</filename>
            <type>text/plain</type>
            <size>1032</size>
            <attacher name="Will Thompson">will</attacher>
            
              <data encoding="base64">IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIER1bWIgdGVzdCBhcHAgZm9yIGh0dHBzOi8vYnVnemls
bGEucmVkaGF0LmNvbS9zaG93X2J1Zy5jZ2k/aWQ9MTM3MzQ1MQppbXBvcnQgb3MKaW1wb3J0IHNp
cAppbXBvcnQgc3lzCmZyb20gUHlRdDUuUXRHdWkgaW1wb3J0ICgKICAgIFFQaXhtYXAsIFFDdXJz
b3IsCikKZnJvbSBQeVF0NS5RdFdpZGdldHMgaW1wb3J0ICgKICAgIFFBcHBsaWNhdGlvbiwgUVdp
ZGdldCwgUVB1c2hCdXR0b24sCikKCgpjbGFzcyBDdXJzb3JzKFFXaWRnZXQpOgogICAgZGVmIF9f
aW5pdF9fKHNlbGYpOgogICAgICAgIHN1cGVyKEN1cnNvcnMsIHNlbGYpLl9faW5pdF9fKCkKCiAg
ICAgICAgc2VsZi5wYXRocyA9IFtdCiAgICAgICAgZm9yIGQsIGRzLCBmcyBpbiBvcy53YWxrKCcv
dXNyL3NoYXJlL2ljb25zL2hpY29sb3IvMzJ4MzInKToKICAgICAgICAgICAgc2VsZi5wYXRocy5l
eHRlbmQoKG9zLnBhdGguam9pbihkLCBmKSBmb3IgZiBpbiBmcykpCgogICAgICAgIHNlbGYuYiA9
IFFQdXNoQnV0dG9uKCdIaXQgTWUnLCBzZWxmKQogICAgICAgIHNlbGYuYi5yZXNpemUoc2VsZi5i
LnNpemVIaW50KCkpCiAgICAgICAgc2VsZi5iLmNsaWNrZWQuY29ubmVjdChzZWxmLl9jbGlja2Vk
KQoKICAgICAgICBzZWxmLnNob3coKQoKICAgIGRlZiBfY2xpY2tlZChzZWxmLCAqYXJncyk6CiAg
ICAgICAgcCA9IFFQaXhtYXAoc2VsZi5wYXRocy5wb3AoKSkKICAgICAgICBjID0gUUN1cnNvcihw
KQogICAgICAgIHByaW50KGlkKGMpLCBoZXgoc2lwLnVud3JhcGluc3RhbmNlKGMpKSkKICAgICAg
ICBzZWxmLmIuc2V0Q3Vyc29yKGMpCgogICAgICAgICMgU2hvdWxkIGFsbCBiZSB1bm5lY2Vzc2Fy
eSBidXQgbGV0J3MgcGxheSBhbG9uZzoKICAgICAgICBwLmRldGFjaCgpCiAgICAgICAgZGVsIGMK
ICAgICAgICBkZWwgcAoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CiAgICBhcHAgPSBRQXBw
bGljYXRpb24oc3lzLmFyZ3YpCiAgICBjID0gQ3Vyc29ycygpCiAgICBzeXMuZXhpdChhcHAuZXhl
Y18oKSkK
</data>

          </attachment>
      

    </bug>

</bugzilla>