<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1379863</bug_id>
          
          <creation_ts>2016-09-27 18:48:00 -0400</creation_ts>
          <short_desc>nss.io.Socket.import_tcp_socket imports socket as closed</short_desc>
          <delta_ts>2016-11-19 12:23:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>python-nss</component>
          <version>24</version>
          <rep_platform>Unspecified</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>ERRATA</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>Reopened</keywords>
          <priority>unspecified</priority>
          <bug_severity>unspecified</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>1367216</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Dennis">jdennis</reporter>
          <assigned_to name="John Dennis">jdennis</assigned_to>
          <cc>dennis</cc>
    
    
    <cc>extras-qa</cc>
    
    
    <cc>jdennis</cc>
    
    
    <cc>john</cc>
    
    
    <cc>puiterwijk</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in>python-nss-1.0.0-2.fc24</cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          <cf_clone_of>1367216</cf_clone_of>
          <cf_environment></cf_environment>
          <cf_last_closed>2016-11-19 12:23:11</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>9748532</commentid>
    <comment_count>0</comment_count>
    <who name="John Dennis">jdennis</who>
    <bug_when>2016-09-27 18:48:18 -0400</bug_when>
    <thetext>+++ This bug was initially created as a clone of Bug #1367216 +++

Description of problem:
After using nss.io.Socket.import_tcp_socket, the moment I try to read from the imported socket, I get a ValueError: I/O operation on closed socket.

Version-Release number of selected component (if applicable):
python-nss-1.0.0-beta1.2.fc24.1

How reproducible:
Consistent

Steps to Reproduce:
1. Run the below code

Actual results:
Traceback (most recent call last):
  File &quot;test.py&quot;, line 31, in &lt;module&gt;
    test()
  File &quot;test.py&quot;, line 29, in test
    print c1_nss.recv(1024)
ValueError: I/O operation on closed socket


Expected results:
Hello world

Additional info:
This works on the same machine if I downgrade python-nss to 0.16.0.


Code:
import socket
import nss
import nss.ssl
import nss.io

def _tcp_socketpair():
    &apos;&apos;&apos;Like socket.socketpair(), but using AF_INET sockets.

    This is necessary because NSS uses getsockname() to create session
    identifiers and it does not support AF_UNIX sockets created by
    socket.socketpair().&apos;&apos;&apos;

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM,
                           socket.IPPROTO_TCP)
    server.bind((&apos;&apos;, 0))
    server.listen(1)
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM,
                           socket.IPPROTO_TCP)
    client.connect(server.getsockname())
    (server2, _) = server.accept()
    server.close()
    return (client, server2)

def test():
    (c1, s1) = _tcp_socketpair()
    c1_nss = nss.io.Socket.import_tcp_socket(c1.fileno())
    s1.sendall(&apos;hello world&apos;)
    print c1_nss.recv(1024)

test()

--- Additional comment from Patrick Uiterwijk on 2016-08-15 17:48:42 EDT ---



--- Additional comment from Patrick Uiterwijk on 2016-08-15 18:14:02 EDT ---

It&apos;s not just import_tcp_socket that&apos;s broken. The nss.io.Socket.new_tcp_pair is also broken.
This reproducer has the same effect:


import nss.io

(c1, s1) = nss.io.Socket.new_tcp_pair()
s1.sendall(&apos;hello world&apos;)
print c1.recv(1024)

--- Additional comment from John Dennis on 2016-08-16 12:25:19 EDT ---

Mostly making notes for myself in this comment.

I built a scratch version for Patrick which removed all the socket state tracking code and checks for the socket being open (patch attached: remove_open_for_read.patch) and that solved his problem, but it&apos;s probably not the correct solution.

The socket state code was added to address a segfault identified in bug #1229748

It&apos;s obvious to me now that trying to track the state of a socket is futile, especially since external fd&apos;s can be passed in and manipulated outside of the python binding. The central issue seems to be whether pr_socket should be set to NULL on close and where and when PR Socket resources are cleaned up.

We still need to protect against a segfault so we either need to not set pr_socket to null in the python Socket object when close is called, or we need similar code to SOCKET_CHECK_OPEN that only tests if pr_socket is NULL.

I need to check what happens when PR_Close() is called, is the handle still valid? Who cleans up the resources for the PR Socket? Is there a separate call for that or does that happen when PR_Close() is called? I probably knew the answers at one point but the code in question was written so many years ago I now forget. The answer dictates whether Socket_close() should set pr_socket to NULL or not. There does not seem to be any code in Socket_delloc() that closes the socket and frees PR resources. That looks like an oversight and potential leak.

--- Additional comment from John Dennis on 2016-08-16 12:28 EDT ---

trial patch to see if it solves Patrick&apos;s problem, it&apos;s not a correct solution but has elements of what needs to be adjusted. Mostly here to identify all the code locations that need to be looked at.

--- Additional comment from Patrick Uiterwijk on 2016-09-19 12:11:15 EDT ---



--- Additional comment from Patrick Uiterwijk on 2016-09-19 12:13:35 EDT ---

Could this please be backported to supported Fedora releases?

--- Additional comment from Fedora Update System on 2016-09-22 05:55:17 EDT ---

python-nss-1.0.0-1.fc25 has been pushed to the Fedora 25 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2016-189a2448ae

--- Additional comment from Fedora Update System on 2016-09-23 04:01:08 EDT ---

python-nss-1.0.0-1.fc24 has been pushed to the Fedora 24 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2016-1801ff25bd

--- Additional comment from Fedora Update System on 2016-09-25 16:56:10 EDT ---

python-nss-1.0.0-1.fc25 has been pushed to the Fedora 25 stable repository. If problems still persist, please make note of it in this bug report.

--- Additional comment from John Dennis on 2016-09-27 18:47:05 EDT ---

re comment #6, this bz was filed against rawhide, I&apos;m cloning it into f24 and will update f24. f23 cannot be updated because f23 is still at the 0 major release version and we&apos;re not supposed to bump major versions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9752088</commentid>
    <comment_count>1</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-09-28 22:50:07 -0400</bug_when>
    <thetext>python-nss-1.0.0-2.fc24 has been pushed to the Fedora 24 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2016-c93fd2726a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9776472</commentid>
    <comment_count>2</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-10-09 09:51:21 -0400</bug_when>
    <thetext>python-nss-1.0.0-2.fc24 has been pushed to the Fedora 24 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2016-c93fd2726a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9905489</commentid>
    <comment_count>3</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2016-11-19 12:23:11 -0500</bug_when>
    <thetext>python-nss-1.0.0-2.fc24 has been pushed to the Fedora 24 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>