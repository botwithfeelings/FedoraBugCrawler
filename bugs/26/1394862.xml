<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugzilla.redhat.com/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.12068.1"
          urlbase="https://bugzilla.redhat.com/"
          
          maintainer="bugzilla-error-list@redhat.com"
>

    <bug>
          <bug_id>1394862</bug_id>
          
          <creation_ts>2016-11-14 10:35:00 -0500</creation_ts>
          <short_desc>libdb: Assumes that internal condition variable layout never changes</short_desc>
          <delta_ts>2017-07-11 23:21:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Fedora</classification>
          <product>Fedora</product>
          <component>libdb</component>
          <version>26</version>
          <rep_platform>Unspecified</rep_platform>
          <op_sys>Unspecified</op_sys>
          <bug_status>CLOSED</bug_status>
          <resolution>ERRATA</resolution>
          
          <see_also>https://bugzilla.redhat.com/show_bug.cgi?id=1397087</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>https://fedoraproject.org/wiki/Common_F26_bugs#libdb-rebuilddb https://fedoraproject.org/wiki/Common_F26_bugs#upgrade-libdb</status_whiteboard>
          <keywords>CommonBugs</keywords>
          <priority>unspecified</priority>
          <bug_severity>unspecified</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>1346768</blocked>
    
    
    <blocked>1397087</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jan Pazdziora">jpazdziora</reporter>
          <assigned_to name="Petr Kubat">pkubat</assigned_to>
          <cc>arjun.is</cc>
    
    
    <cc>awilliam</cc>
    
    
    <cc>besser82</cc>
    
    
    <cc>bugzilla</cc>
    
    
    <cc>chkr</cc>
    
    
    <cc>codonell</cc>
    
    
    <cc>dj</cc>
    
    
    <cc>dominik</cc>
    
    
    <cc>fche</cc>
    
    
    <cc>fweimer</cc>
    
    
    <cc>gryt2</cc>
    
    
    <cc>hhorak</cc>
    
    
    <cc>hyc</cc>
    
    
    <cc>jakub</cc>
    
    
    <cc>jpazdziora</cc>
    
    
    <cc>jstanek</cc>
    
    
    <cc>law</cc>
    
    
    <cc>lslebodn</cc>
    
    
    <cc>mfabian</cc>
    
    
    <cc>mhonek</cc>
    
    
    <cc>pavel.sklenak</cc>
    
    
    <cc>pfrankli</cc>
    
    
    <cc>pkubat</cc>
    
    
    <cc>pmatilai</cc>
    
    
    <cc>rjones</cc>
    
    
    <cc>robatino</cc>
    
    
    <cc>samuel-rhbugs</cc>
    
    
    <cc>sgraf</cc>
    
    
    <cc>sid</cc>
    
    
    <cc>sixpack13</cc>
    
    
    <cc>triegel</cc>
    
    
    <cc>zing</cc>
          <qa_contact name="Fedora Extras Quality Assurance">extras-qa</qa_contact>
          
          <cf_fixed_in>libdb-5.3.28-24.fc26 libdb-5.3.28-24.fc24 libdb-5.3.28-24.fc25</cf_fixed_in>
          <cf_doc_type>If docs needed, set a value</cf_doc_type>
          <cf_release_notes></cf_release_notes>
          <cf_story_points>---</cf_story_points>
          
          <cf_environment></cf_environment>
          <cf_last_closed>2017-07-07 19:00:28</cf_last_closed>
          <cf_type>Bug</cf_type>
          <cf_regression_status>---</cf_regression_status>
          <cf_mount_type>---</cf_mount_type>
          <cf_documentation_action>---</cf_documentation_action>
          <cf_crm></cf_crm>
          <cf_verified_branch></cf_verified_branch>
          <cf_category>---</cf_category>
          <cf_ovirt_team>---</cf_ovirt_team>
          
          <cf_cloudforms_team>---</cf_cloudforms_team>
          <external_bugs name="Sourceware">21119</external_bugs>
          
          
          
          <target_release>---</target_release>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>9888750</commentid>
    <comment_count>0</comment_count>
    <who name="Jan Pazdziora">jpazdziora</who>
    <bug_when>2016-11-14 10:35:21 -0500</bug_when>
    <thetext>Description of problem:

Building Fedora rawhide container image from Dockerfile

FROM fedora:rawhide
RUN dnf install -y httpd

works fine.

However, adding RUN dnf upgrade -y glibc before the dnf install line causes the build process to hang.

Version-Release number of selected component (if applicable):

glibc-2.24.90-13.fc26.x86_64

How reproducible:

Deterministic for this particular Dockerfile on my machines. But it&apos;s not always apr-util or the second package on which it gets stuck.

Steps to Reproduce:
1. Have Dockerfile

FROM fedora:rawhide
RUN dnf upgrade -y glibc
RUN dnf install -y httpd

2. Attempt to build the image: docker build -t rawhide .

Actual results:

Install  7 Packages

Total download size: 1.7 M
Installed size: 4.7 M
Downloading Packages:
--------------------------------------------------------------------------------
Total                                           1.1 MB/s | 1.7 MB     00:01     
Running transaction check
Transaction check succeeded.
Running transaction test
Transaction test succeeded.
Running transaction
  Installing  : apr-1.5.2-4.fc25.x86_64                                     1/7 
  Installing  : apr-util-1.5.4-3.fc24.x86_64                                2/7

and here the process hangs.

Expected results:

All packages installed, image created.

Additional info:

The same hang happens with plain docker run:

docker run --rm -ti fedora:rawhide bash -c &apos;dnf upgrade -y glibc &amp;&amp; dnf install -y httpd&apos;

With glibc-2.24.90-2.fc26.x86_64 (which is on the 3 month old fedora:rawhide image), things work, that&apos;s why filing against glibc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9888769</commentid>
    <comment_count>1</comment_count>
    <who name="Jan Pazdziora">jpazdziora</who>
    <bug_when>2016-11-14 10:38:05 -0500</bug_when>
    <thetext>The OS and environment on the host do not matter -- I see the same hang on Fedora 24 with docker-1.10.3-54.gite03ddb8.fc24.x86_64 and on RHEL 7.3 with docker-1.12.3-4.el7.x86_64.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9888773</commentid>
    <comment_count>2</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-14 10:38:50 -0500</bug_when>
    <thetext>Please provide a process tree (ps axuf) when the hang occurs.  Attaching GDB to the hanging subprocess would be helpful, too, but it could prove difficult to get GDB to pick up the proper separate debuginfo.  Alternatively, please create a coredump of the hanging process with gcore and upload it somewhere.  Then we can analyze it offline.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9892011</commentid>
    <comment_count>3</comment_count>
    <who name="Jan Pazdziora">jpazdziora</who>
    <bug_when>2016-11-15 05:48:29 -0500</bug_when>
    <thetext>The bt against the hung process is

#0  0x00007fd8520f82c1 in futex_wait (private=&lt;optimized out&gt;, expected=4294967295, futex_word=0x7fd842759c04) at ../sysdeps/unix/sysv/linux/futex-internal.h:61
#1  futex_wait_simple (private=&lt;optimized out&gt;, expected=4294967295, futex_word=0x7fd842759c04) at ../sysdeps/nptl/futex-internal.h:135
#2  __pthread_cond_destroy (cond=cond@entry=0x7fd842759be0) at pthread_cond_destroy.c:54
#3  0x00007fd846d969cf in __db_pthread_mutex_destroy (env=env@entry=0x55ac4daae720, mutex=mutex@entry=340) at ../../src/mutex/mut_pthread.c:757
#4  0x00007fd846d9610f in __db_tas_mutex_destroy (env=env@entry=0x55ac4daae720, mutex=mutex@entry=340) at ../../src/mutex/mut_tas.c:602
#5  0x00007fd846e4dda8 in __mutex_free_int (env=0x55ac4daae720, locksys=locksys@entry=1, indxp=indxp@entry=0x7fd84036f550) at ../../src/mutex/mut_alloc.c:248
#6  0x00007fd846e4e3c5 in __mutex_free (env=env@entry=0x55ac4daae720, indxp=indxp@entry=0x7fd84036f550) at ../../src/mutex/mut_alloc.c:217
#7  0x00007fd846eb329b in __memp_bhfree (dbmp=dbmp@entry=0x55ac4cc383f0, infop=0x55ac4daf5b30, mfp=mfp@entry=0x7fd8403052d0, hp=&lt;optimized out&gt;, 
    bhp=bhp@entry=0x7fd84036f550, flags=flags@entry=1) at ../../src/mp/mp_bh.c:663
#8  0x00007fd846eb5aca in __memp_fget (dbmfp=dbmfp@entry=0x55ac4d9e50f0, pgnoaddr=pgnoaddr@entry=0x7ffc5622bb5c, ip=ip@entry=0x7fd84045f770, txn=txn@entry=0x0, 
    flags=flags@entry=8, addrp=addrp@entry=0x7ffc5622bb60) at ../../src/mp/mp_fget.c:479
#9  0x00007fd846ebb4fc in __memp_ftruncate (dbmfp=dbmfp@entry=0x55ac4d9e50f0, txn=0x0, ip=0x7fd84045f770, pgno=pgno@entry=19, flags=flags@entry=0)
    at ../../src/mp/mp_method.c:856
#10 0x00007fd846e7199e in __db_free (dbc=dbc@entry=0x55ac4d9e8280, h=&lt;optimized out&gt;, flags=flags@entry=0) at ../../src/db/db_meta.c:525
#11 0x00007fd846e75ddb in __db_doff (dbc=dbc@entry=0x55ac4d9e8280, pgno=&lt;optimized out&gt;) at ../../src/db/db_overflow.c:479
#12 0x00007fd846da3a8f in __bam_ditem (dbc=dbc@entry=0x55ac4d9e8280, h=0x7fd84036b388, indx=indx@entry=7) at ../../src/btree/bt_delete.c:138
#13 0x00007fd846da8160 in __bam_iitem (dbc=dbc@entry=0x55ac4d9e8280, key=key@entry=0x7ffc5622c1d0, data=data@entry=0x7ffc5622c1a0, op=6, flags=flags@entry=0)
    at ../../src/btree/bt_put.c:421
#14 0x00007fd846da2e5d in __bamc_put (dbc=0x55ac4d9e8280, key=0x7ffc5622c1d0, data=0x7ffc5622c1a0, flags=14, pgnop=0x7ffc5622c0b4)
    at ../../src/btree/bt_cursor.c:2240
#15 0x00007fd846e5d1dc in __dbc_iput (dbc=0x55ac4daad330, key=0x7ffc5622c1d0, data=0x7ffc5622c1a0, flags=14) at ../../src/db/db_cam.c:2136
#16 0x00007fd846e5f70d in __dbc_put (dbc=dbc@entry=0x55ac4daad330, key=key@entry=0x7ffc5622c1d0, data=data@entry=0x7ffc5622c1a0, flags=&lt;optimized out&gt;, 
    flags@entry=14) at ../../src/db/db_cam.c:2049
#17 0x00007fd846e6c9c1 in __dbc_put_pp (dbc=0x55ac4daad330, key=0x7ffc5622c1d0, data=0x7ffc5622c1a0, flags=14) at ../../src/db/db_iface.c:2751
#18 0x00007fd84754b235 in dbiCursorPut.isra.5 () from /lib64/librpm.so.7
#19 0x00007fd84754d211 in updateIndex.part.8 () from /lib64/librpm.so.7
#20 0x00007fd84754d5e1 in db3_idxdbPut () from /lib64/librpm.so.7
#21 0x00007fd847553168 in tag2index () from /lib64/librpm.so.7
#22 0x00007fd847556c6b in rpmdbAdd () from /lib64/librpm.so.7
#23 0x00007fd84756a86d in rpmpsmRun () from /lib64/librpm.so.7
#24 0x00007fd84757e125 in rpmteProcess () from /lib64/librpm.so.7
#25 0x00007fd847584a3e in rpmtsRun () from /lib64/librpm.so.7
#26 0x00007fd84559d204 in rpmts_Run () from /usr/lib64/python3.5/site-packages/rpm/_rpm.cpython-35m-x86_64-linux-gnu.so
#27 0x00007fd8523b67e9 in PyCFunction_Call (func=&lt;built-in method run of TransactionSet object at remote 0x7fd843940b28&gt;, 
    args=(&lt;method at remote 0x7fd84458a1c8&gt;, &apos;&apos;, 64), kwds=&lt;optimized out&gt;) at /usr/src/debug/Python-3.5.2/Objects/methodobject.c:98
#28 0x00007fd85236eeb7 in PyObject_Call (func=&lt;built-in method run of TransactionSet object at remote 0x7fd843940b28&gt;, arg=&lt;optimized out&gt;, kw=&lt;optimized out&gt;)
    at /usr/src/debug/Python-3.5.2/Objects/abstract.c:2165
#29 0x00007fd852425d17 in PyEval_CallObjectWithKeywords (func=func@entry=&lt;built-in method run of TransactionSet object at remote 0x7fd843940b28&gt;, 
    arg=arg@entry=(&lt;method at remote 0x7fd84458a1c8&gt;, &apos;&apos;, 64), kw=kw@entry=0x0) at /usr/src/debug/Python-3.5.2/Python/ceval.c:4609
#30 0x00007fd852389b38 in methoddescr_call (descr=&lt;optimized out&gt;, args=(&lt;method at remote 0x7fd84458a1c8&gt;, &apos;&apos;, 64), kwds=0x0)
    at /usr/src/debug/Python-3.5.2/Objects/descrobject.c:250
#31 0x00007fd85236eeb7 in PyObject_Call (func=&lt;method_descriptor at remote 0x7fd845bfd708&gt;, arg=&lt;optimized out&gt;, kw=&lt;optimized out&gt;)
    at /usr/src/debug/Python-3.5.2/Objects/abstract.c:2165
#32 0x00007fd85242a491 in do_call (nk=&lt;optimized out&gt;, na=4, pp_stack=0x7ffc5622ca60, func=&lt;optimized out&gt;) at /usr/src/debug/Python-3.5.2/Python/ceval.c:4965
#33 call_function (oparg=&lt;optimized out&gt;, pp_stack=0x7ffc5622ca60) at /usr/src/debug/Python-3.5.2/Python/ceval.c:4761
#34 PyEval_EvalFrameEx (
    f=f@entry=Frame 0x7fd842bae048, for file /usr/lib64/python3.5/site-packages/rpm/transaction.py, line 103, in run (self=&lt;TransactionSet(_probFilter=64) at remote 0x7fd843940b28&gt;, callback=&lt;method at remote 0x7fd84458a1c8&gt;, data=&apos;&apos;), throwflag=throwflag@entry=0) at /usr/src/debug/Python-3.5.2/Python/ceval.c:3260
#35 0x00007fd85242dcfb in fast_function (nk=&lt;optimized out&gt;, na=&lt;optimized out&gt;, n=3, pp_stack=0x7ffc5622cba0, func=&lt;optimized out&gt;)
    at /usr/src/debug/Python-3.5.2/Python/ceval.c:4832
#36 call_function (oparg=&lt;optimized out&gt;, pp_stack=0x7ffc5622cba0) at /usr/src/debug/Python-3.5.2/Python/ceval.c:4759
#37 PyEval_EvalFrameEx (
    f=f@entry=Frame 0x55ac4da0bba8, for file /usr/lib/python3.5/site-packages/dnf/base.py, line 735, in _run_transaction (self=&lt;BaseCli(_tempfile_persistor=None, _ds_callback=&lt;DepSolveProgressCallBack(loops=1) at remote 0x7fd843950710&gt;, _comps=None, _group_persistor=None, _plugins=&lt;Plugins(plugin_cls=[&lt;type at remote 0x55ac4bdef758&gt;, &lt;type at remote 0x55ac4bde9c38&gt;, &lt;type at remote 0x55ac4bdef3a8&gt;, &lt;type at remote 0x55ac4bdf24b8&gt;, &lt;type at remote 0x55ac4bdfcdd8&gt;, &lt;type at remote 0x55ac4bdf1f58&gt;, &lt;type at remote 0x55ac4bde8a38&gt;, &lt;type at remote 0x55ac4bdedaa8&gt;, &lt;type at remote 0x55ac4bdf3f08&gt;, &lt;type at remote 0x55ac4bdf3b58&gt;], plugins=[&lt;DebuginfoInstall(cli=&lt;Cli(cmdstring=&apos;dnf install -y httpd &apos;, command=&lt;InstallCommand(cli=&lt;...&gt;, opts=&lt;Namespace(ip_resolve=None, debuglevel=None, command=[&apos;install&apos;], help=False, color=None, setopts=[], allowerasing=None, rpmverbosity=None, quiet=None, repos_ed=[], showdupesfromrepos=None, releasever=None, verbose=None, plugins=None, assumeno=None, version=None, excludepkgs=[], debugsolver=N...(truncated), throwflag=throwflag@entry=0) at /usr/src/debug/Python-3.5.2/Python/ceval.c:3260
#38 0x00007fd85242f5c3 in _PyEval_EvalCodeWithName (_co=&lt;optimized out&gt;, globals=&lt;optimized out&gt;, locals=locals@entry=0x0, args=args@entry=0x55ac4c8bac90, 
    argcount=1, kws=0x55ac4c8bac98, kwcount=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=&apos;_run_transaction&apos;, qualname=&apos;Base._run_transaction&apos;)
    at /usr/src/debug/Python-3.5.2/Python/ceval.c:4047
#39 0x00007fd85242be39 in fast_function (nk=&lt;optimized out&gt;, na=&lt;optimized out&gt;, n=&lt;optimized out&gt;, pp_stack=0x7ffc5622cdb0, func=&lt;optimized out&gt;)
    at /usr/src/debug/Python-3.5.2/Python/ceval.c:4842
#40 call_function (oparg=&lt;optimized out&gt;, pp_stack=0x7ffc5622cdb0) at /usr/src/debug/Python-3.5.2/Python/ceval.c:4759
#41 PyEval_EvalFrameEx (
    f=f@entry=Frame 0x55ac4c8baaa8, for file /usr/lib/python3.5/site-packages/dnf/base.py, line 661, in do_transaction (self=&lt;BaseCli(_tempfile_persistor=None, _ds_callback=&lt;DepSolveProgressCallBack(loops=1) at remote 0x7fd843950710&gt;, _comps=None, _group_persistor=None, _plugins=&lt;Plugins(plugin_cls=[&lt;type at remote 0x55ac4bdef758&gt;, &lt;type at remote 0x55ac4bde9c38&gt;, &lt;type at remote 0x55ac4bdef3a8&gt;, &lt;type at remote 0x55ac4bdf24b8&gt;, &lt;type at remote 0x55ac4bdfcdd8&gt;, &lt;type at remote 0x55ac4bdf1f58&gt;, &lt;type at remote 0x55ac4bde8a38&gt;, &lt;type at remote 0x55ac4bdedaa8&gt;, &lt;type at remote 0x55ac4bdf3f08&gt;, &lt;type at remote 0x55ac4bdf3b58&gt;], plugins=[&lt;Debugi---Type &lt;return&gt; to continue, or q &lt;return&gt; to quit---

The ps output in the container is

# ps axuwwf
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root        11  0.0  0.0  12588  3716 ?        Ss   10:46   0:00 bash
root        34  0.0  0.0  39828  3256 ?        R+   10:48   0:00  \_ ps axuwwf
root         1  1.3  2.2 541256 91700 ?        Ss+  10:46   0:01 /usr/libexec/system-python /usr/bin/dnf install -y httpd</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9892027</commentid>
    <comment_count>4</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-15 05:56:46 -0500</bug_when>
    <thetext>(In reply to Jan Pazdziora from comment #3)
&gt; The bt against the hung process is
&gt; 
&gt; #0  0x00007fd8520f82c1 in futex_wait (private=&lt;optimized out&gt;,
&gt; expected=4294967295, futex_word=0x7fd842759c04) at
&gt; ../sysdeps/unix/sysv/linux/futex-internal.h:61
&gt; #1  futex_wait_simple (private=&lt;optimized out&gt;, expected=4294967295,
&gt; futex_word=0x7fd842759c04) at ../sysdeps/nptl/futex-internal.h:135
&gt; #2  __pthread_cond_destroy (cond=cond@entry=0x7fd842759be0) at
&gt; pthread_cond_destroy.c:54

This could be due to glibc-swbz13165.patch (new condition variable implementation).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9892712</commentid>
    <comment_count>5</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-15 08:41:29 -0500</bug_when>
    <thetext>I was able to reproduce it, but only in a Docker image.  Here&apos;s the condvar state:

(gdb) print *cond
$2 = {__data = {{__wseq = 0, __wseq32 = {__low = 0, __high = 0}}, {
      __g1_start = 0, __g1_start32 = {__low = 0, __high = 0}}, 
    __g_refs = {0, 0}, __g_size = {0, 0}, 
    __g1_orig_size = 4294967295, __wrefs = 4294967295, 
    __g_signals = {0, 0}}, 
  __size = &apos;\000&apos; &lt;repeats 32 times&gt;, &quot;\377\377\377\377\377\377\377\377\000\000\000\000\000\000\000&quot;, __align = 0}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9893108</commentid>
    <comment_count>6</comment_count>
    <who name="Torvald Riegel">triegel</who>
    <bug_when>2016-11-15 10:19:53 -0500</bug_when>
    <thetext>It seems that the root cause is that the program tries to use a condvar instance that has been initialized with a prior version of glibc.  The condvar appears to be in a database file (/var/lib/rpm/__db.002 in our reproducer).  With the (glibc-internal) condvar definition in the old glibc version, the bits represent a valid, unused condvar:
$4 = {__data = {__lock = 0, __futex = 0, __total_seq = 0, 
                __wakeup_seq = 0,  __woken_seq = 0, __mutex = 
                0xffffffffffffffff, __nwaiters = 0,  __broadcast_seq = 0},

The same bits do not represent a valid condvar if given the condvar definition in the new version of glibc.

Storing the condvar in the database file means that effectively, the program is expecting different versions of glibc to use the same bit representations of internal data structures.  This is not guaranteed to work.

It seems that either BDB should be changed to not store the condvar in database files, or dnf needs to reinitialize the databases it relies on when glibc is updated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9893130</commentid>
    <comment_count>7</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-15 10:23:57 -0500</bug_when>
    <thetext>The hang goes away if I add a “rpm --rebuilddb” step to the container build file:

FROM fedora:rawhide
RUN dnf upgrade -y glibc
RUN rpm --rebuilddb
RUN dnf install -y httpd</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9893331</commentid>
    <comment_count>8</comment_count>
    <who name="Jan Pazdziora">jpazdziora</who>
    <bug_when>2016-11-15 11:15:42 -0500</bug_when>
    <thetext>(In reply to Torvald Riegel from comment #6)
&gt; It seems that the root cause is that the program tries to use a condvar
&gt; instance that has been initialized with a prior version of glibc.

Thank you for the analysis.

&gt; The
&gt; condvar appears to be in a database file (/var/lib/rpm/__db.002 in our
&gt; reproducer).  With the (glibc-internal) condvar definition in the old glibc
&gt; version, the bits represent a valid, unused condvar:
&gt; $4 = {__data = {__lock = 0, __futex = 0, __total_seq = 0, 
&gt;                 __wakeup_seq = 0,  __woken_seq = 0, __mutex = 
&gt;                 0xffffffffffffffff, __nwaiters = 0,  __broadcast_seq = 0},
&gt; 
&gt; The same bits do not represent a valid condvar if given the condvar
&gt; definition in the new version of glibc.

Can the same issue happen during upgrade from (say) Fedora 24 to rawhide?

How hard would it be to make this old unused bit value also understood as unused value in new glibc?

&gt; Storing the condvar in the database file means that effectively, the program
&gt; is expecting different versions of glibc to use the same bit representations
&gt; of internal data structures.  This is not guaranteed to work.
&gt; 
&gt; It seems that either BDB should be changed to not store the condvar in
&gt; database files, or dnf needs to reinitialize the databases it relies on when
&gt; glibc is updated.

It would likely need to be rpm, not dnf.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9893453</commentid>
    <comment_count>9</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-11-15 11:46:50 -0500</bug_when>
    <thetext>(In reply to Torvald Riegel from comment #6)
&gt; It seems that the root cause is that the program tries to use a condvar
&gt; instance that has been initialized with a prior version of glibc.  The
&gt; condvar appears to be in a database file (/var/lib/rpm/__db.002 in our
&gt; reproducer).  With the (glibc-internal) condvar definition in the old glibc
&gt; version, the bits represent a valid, unused condvar:
&gt; $4 = {__data = {__lock = 0, __futex = 0, __total_seq = 0, 
&gt;                 __wakeup_seq = 0,  __woken_seq = 0, __mutex = 
&gt;                 0xffffffffffffffff, __nwaiters = 0,  __broadcast_seq = 0},
&gt; 
&gt; The same bits do not represent a valid condvar if given the condvar
&gt; definition in the new version of glibc.
&gt; 
&gt; Storing the condvar in the database file means that effectively, the program
&gt; is expecting different versions of glibc to use the same bit representations
&gt; of internal data structures.  This is not guaranteed to work.
&gt; 
&gt; It seems that either BDB should be changed to not store the condvar in
&gt; database files, or dnf needs to reinitialize the databases it relies on when
&gt; glibc is updated.

This is unsupported by POSIX, you must _always_ reinitialize the POISX thread objects per:
~~~
2.9.9 Synchronization Object Copies and Alternative Mappings

For barriers, condition variables, mutexes, and read-write locks, [TSH] [Option Start]  if the process-shared attribute is set to PTHREAD_PROCESS_PRIVATE, [Option End]  only the synchronization object at the address used to initialize it can be used for performing synchronization. The effect of referring to another mapping of the same object when locking, unlocking, or destroying the object is undefined. [TSH] [Option Start]  If the process-shared attribute is set to PTHREAD_PROCESS_SHARED, only the synchronization object itself can be used for performing synchronization; however, it need not be referenced at the address used to initalize it (that is, another mapping of the same object can be used). [Option End]  The effect of referring to a copy of the object when locking, unlocking, or destroying it is undefined.

For spin locks, the above requirements shall apply as if spin locks have a process-shared attribute that is set from the pshared argument to pthread_spin_init(). For semaphores, the above requirements shall apply as if semaphores have a process-shared attribute that is set to PTHREAD_PROCESS_PRIVATE if the pshared argument to sem_init() is zero and set to PTHREAD_PROCESS_SHARED if pshared is non-zero.
~~~

The serialization of the POSIX thread object into the database is undefined behaviour as noted under &quot;The effect of referring to a copy of the object when locking, unlocking, or destroying it is undefined.&quot;

You may only use initialized objects.

I&apos;m moving this to libdb to get fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9893486</commentid>
    <comment_count>10</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-15 11:57:49 -0500</bug_when>
    <thetext>(In reply to Carlos O&apos;Donell from comment #9)

Torvald and I looked at the POSIX wording as well, and it is not sufficiently clear if the libdb usage is actually undefined.  POSIX likely intends this to be undefined: some implementations do not have a unified page cache, and the effect of the mutex/condition variable initialization may happen completely outside the context of the file mapping.

The key question is whether you may continue to use the resource after the process which has initialized it unmapped the file and exited.  The historic Berkeley DB use case requires the initialization to persist, although I do think it is problematic, as explained above.  Even the existing database environment liveness checks are likely insufficient because they cannot detect the case where all applications detached orderly, and reattach after a glibc update.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9894225</commentid>
    <comment_count>11</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2016-11-15 15:30:04 -0500</bug_when>
    <thetext>I found where POSIX says that the libdb usage is undefined.  It&apos;s in the specfication for mmap and unmmap:

“The state of synchronization objects such as mutexes, semaphores, barriers, and conditional variables placed in shared memory mapped with MAP_SHARED becomes undefined when the last region in any process containing the synchronization object is unmapped.”

If we posit that glibc updates need system reboots, this means that the format of these data structures on disk does not have to be retained across glibc updates.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9894291</commentid>
    <comment_count>12</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-11-15 15:58:10 -0500</bug_when>
    <thetext>(In reply to Florian Weimer from comment #11)
&gt; I found where POSIX says that the libdb usage is undefined.  It&apos;s in the
&gt; specfication for mmap and unmmap:
&gt; 
&gt; “The state of synchronization objects such as mutexes, semaphores, barriers,
&gt; and conditional variables placed in shared memory mapped with MAP_SHARED
&gt; becomes undefined when the last region in any process containing the
&gt; synchronization object is unmapped.”
&gt; 
&gt; If we posit that glibc updates need system reboots, this means that the
&gt; format of these data structures on disk does not have to be retained across
&gt; glibc updates.

Correct, with the alignment and size being constrained by the ABI, so that needs to remain constant, but yes, the internal details of the type and the bit patterns and their meanings can and may change from release to release. You must reinitialize the objects before using them.

(In reply to Florian Weimer from comment #10)
&gt; (In reply to Carlos O&apos;Donell from comment #9)
&gt; 
&gt; Torvald and I looked at the POSIX wording as well, and it is not
&gt; sufficiently clear if the libdb usage is actually undefined.  POSIX likely
&gt; intends this to be undefined: some implementations do not have a unified
&gt; page cache, and the effect of the mutex/condition variable initialization
&gt; may happen completely outside the context of the file mapping.

The &quot;why&quot; is covered in the non-normative text under &quot;Alternate Implementations Possible&quot; here:
http://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_init.html

&gt; The key question is whether you may continue to use the resource after the
&gt; process which has initialized it unmapped the file and exited.  The historic
&gt; Berkeley DB use case requires the initialization to persist, although I do
&gt; think it is problematic, as explained above.  Even the existing database
&gt; environment liveness checks are likely insufficient because they cannot
&gt; detect the case where all applications detached orderly, and reattach after
&gt; a glibc update.

You cannot continue to use the synchronization resource after the last mapping is removed, as you noted in comment 11.

(In reply to Jan Pazdziora from comment #8)
&gt; (In reply to Torvald Riegel from comment #6)
&gt; &gt; The
&gt; &gt; condvar appears to be in a database file (/var/lib/rpm/__db.002 in our
&gt; &gt; reproducer).  With the (glibc-internal) condvar definition in the old glibc
&gt; &gt; version, the bits represent a valid, unused condvar:
&gt; &gt; $4 = {__data = {__lock = 0, __futex = 0, __total_seq = 0, 
&gt; &gt;                 __wakeup_seq = 0,  __woken_seq = 0, __mutex = 
&gt; &gt;                 0xffffffffffffffff, __nwaiters = 0,  __broadcast_seq = 0},
&gt; &gt; 
&gt; &gt; The same bits do not represent a valid condvar if given the condvar
&gt; &gt; definition in the new version of glibc.
&gt; 
&gt; Can the same issue happen during upgrade from (say) Fedora 24 to rawhide?

Yes, the same issue may happen when upgrading from Fedora 24 to Rawhide. It is conceivable that this issue becomes a blocker for F26 if it reproduces consistently during installs or upgrades.

This needs to be fixed in Berkeley DB, this is a error in the use of the POSIX threads primitives which constrains the implementation from moving forward with beneficial changes e.g. correctness and performance for condition variables (the reason the internal type representation changed).

&gt; How hard would it be to make this old unused bit value also understood as
&gt; unused value in new glibc?

TLDR; we would never support detecting of the old unused bit value. The cost is too high for other applications.

You would have to detect all possible marshalled bit patterns and reinitialize the condition variable in all API interfaces that might be passed the unmarshalled state. The cost is non-zero, the cost is on the hot path for all other applications that use the type (even with versioning apps pay the price until they are recompiled), and it would be only to support an undefined use.

&gt; &gt; Storing the condvar in the database file means that effectively, the program
&gt; &gt; is expecting different versions of glibc to use the same bit representations
&gt; &gt; of internal data structures.  This is not guaranteed to work.
&gt; &gt; 
&gt; &gt; It seems that either BDB should be changed to not store the condvar in
&gt; &gt; database files, or dnf needs to reinitialize the databases it relies on when
&gt; &gt; glibc is updated.
&gt; 
&gt; It would likely need to be rpm, not dnf.

It would actually be in Berkeley DB, which is where we have assigned this bug to e.g. libdb.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9894316</commentid>
    <comment_count>13</comment_count>
    <who name="Carlos O&apos;Donell">codonell</who>
    <bug_when>2016-11-15 16:08:36 -0500</bug_when>
    <thetext>(In reply to Carlos O&apos;Donell from comment #12)
&gt; &gt; How hard would it be to make this old unused bit value also understood as
&gt; &gt; unused value in new glibc?
&gt; 
&gt; TLDR; we would never support detecting of the old unused bit value. The cost
&gt; is too high for other applications.
&gt; 
&gt; You would have to detect all possible marshalled bit patterns and
&gt; reinitialize the condition variable in all API interfaces that might be
&gt; passed the unmarshalled state. The cost is non-zero, the cost is on the hot
&gt; path for all other applications that use the type (even with versioning apps
&gt; pay the price until they are recompiled), and it would be only to support an
&gt; undefined use.

FYI.

For the sake of openness and transparency there are two cases which glibc doesn&apos;t support which it could, and it is the following:

(1) Mixed implementations with PTHREAD_PROCESS_SHARED.

(a) Process A running glibc X initializes a condition variable in shared memory with PTHREAD_PROCESS_SHARED.
(b) Process B running glibc X+1 (with a different condition variable definition) attaches to that shared memory and tries to use it.

It is clear that process A and process B have two different understandings of the condition variable. The use of PTHREAD_PROCESS_SHARED has to trigger some kind of versioned data interface e.g. a condvar with a version field which detects the version in use and switches to the appropriate algorithm. This would incur significant costs when using PTHREAD_PROCESS_SHARED objects, and the use case has never become so important to support that we have supported it. Either way the glibc upgrade for Process B required a reboot, so as Florian argues you need to reboot, in which case you get a consistent view of the condvar and everything works optimally. The text as written in POSIX argues the above should be supported, but glibc doesn&apos;t support it.

(2) Mixed 32-bit and 64-bit implementations with PTHREAD_PROCESS_SHARED (similar to (1)).

While this is similar to (1) and can be considered a case of &quot;another implementation of narrower type&quot; I want to call it out separately.

The other case is a mixed 32-bit and 64-bit process case where the processes share types in shared memory, and this doesn&apos;t work correctly for the obvious reasons that the types are different ABIs. Making it work could again be part of making PTHREAD_PROCESS_SHARED truly &quot;proces shared&quot; across an ABI boundary for 32-bit and 64-bit code (reserve a bit in the version field for an ABI flag). Again this use case has never been important enough from a user perspective that we would attempt to fix it (though we face a similar problem in nscd with shared maps of the database caches).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9896147</commentid>
    <comment_count>14</comment_count>
    <who name="Torvald Riegel">triegel</who>
    <bug_when>2016-11-16 05:43:58 -0500</bug_when>
    <thetext>I had a quick look at src/mutex/mut_pthread.c, and I&apos;d like to stress that this applies to all pthreads synchronization primitives, not just condvars.  libdb should not try to persist instances of these types; if it does, the database becomes tied to a particular glibc version.  A new rwlock implementation is in the queue for testing in Rawhide, and we may alter plain mutexes too in the future.

libdb will have to either implement custom synchronization, or it has to require clients to all use the same glibc version and architecture (including 32b vs. 64b on x86_64, for example).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>9896745</commentid>
    <comment_count>15</comment_count>
    <who name="Fedora Admin XMLRPC Client">fedora-admin-xmlrpc</who>
    <bug_when>2016-11-16 08:31:44 -0500</bug_when>
    <thetext>This package has changed ownership in the Fedora Package Database.  Reassigning to the new owner of this component.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10030579</commentid>
    <comment_count>16</comment_count>
    <who name="Torvald Riegel">triegel</who>
    <bug_when>2017-01-03 08:29:49 -0500</bug_when>
    <thetext>glibc upstream now contains the new condition variable.  Has any work been started on the libdb (users) side to fix this libdb bug?

libdb has to be fixed very soon or we will get into issues when updating glibc.  I can help with how to fix this in libdb, but I do need help from the libdb maintainers, in particular in terms of (1) testing, (2) ensuring that all users of libdb enable whatever solution we come up with, and (3) notifying other distributions about this.

Who are the people that should be involved in this?  I suppose upstream-first isn&apos;t possible in this case?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10030653</commentid>
    <comment_count>17</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-01-03 08:54:28 -0500</bug_when>
    <thetext>Thanks for bringing this up.
I have not yet managed to take a deeper look at this but I can see how this might prove problematic in the near future. I will definitely appreciate any help you can offer with fixing libdb.
As for testing this change, libdb has some kind of test suite that might be useful but has not been used yet in any way. I will take a look at it and see if I can get it working.

I am not sure whether we are going to get any support from upstream with this issue given that we are running on an older (possibly already unsupported?) release, but I can try asking anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10031237</commentid>
    <comment_count>18</comment_count>
    <who name="Torvald Riegel">triegel</who>
    <bug_when>2017-01-03 12:31:42 -0500</bug_when>
    <thetext>Note that I haven&apos;t ever worked with or on libdb before, so it would be good to get people involved that have some experience.  I don&apos;t have the spare time to see this through in detail.  I can help regarding how to use pthreads properly and with general concurrency considerations.

To reiterate, the problem is that libdb uses the glibc-internal binary representation in databases, and either (1) libdb or (2) how dnf uses libdb cause new glibc code to try to work on binary representation of old glibc code.  

I&apos;m splitting this up in (1) and (2) because it is not yet clear to me who exactly is at fault here.  libdb&apos;s documentation on upgrading libdb (see docs/upgrading/upgrade_process.html in libdb&apos;s source) is rather vague and fails to include glibc (or whatever provides pthreads) in it&apos;s consideration but does mention the compiler; this is odd at least from our perspective because things like datastructure layout are part of the ABI guarantees but glibc-internal representations are not part of the ABI.  libdb could state that any pthreads-implementation update is to be considered to be a libdb major/minor update -- but it does not do that AFAIK, and it&apos;s unclear whether that would help.

libdb could require that only the same build of libdb including the same build of the pthreads implementation are active on the same database concurrently.  If it would shut down all mutexes when there are no references left and reinitialize them when a new reference comes in, this should be sufficient to not trigger the glibc update problem under that requirement.  In this case, it may be simply dnf&apos;s fault if dnf does not enforce that no process must hold a reference on dnf&apos;s databases while glibc is upgraded.
Second, I have looked a bit at the code for libdb mutex, mutex regions, and environments, but I haven&apos;t figured out yet whether libdb actually destroys all mutexes when the last reference to a database is removed.
Nonetheless, making this scenario work could be a solution.

Another solution could be to say that glibc upgrades are like libdb major/minor upgrades, and then follow (some of) the steps outlined in docs/upgrading/upgrade_process.html for every user of libdb.  This requires touching more packages, but may be easier to enforce than the first solution, which requires checking whether libdb clients cannot hold a reference across updates of glibc.

A third solution would be to version databases and include glibc&apos;s version in there.  But that doesn&apos;t provide automatic capability, and would probably require quite a few changes to libdb.

I guess it would be best to look at the first solution first, starting with trying to find out what libdb actually guarantees or intends to guarantee.  Any suggestions for where to get this information?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10032861</commentid>
    <comment_count>19</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-01-04 01:53:47 -0500</bug_when>
    <thetext>Just FWIW: dnf does not use libdb directly, rpm does. Dnf is only involved as a librpm API consumer. The rpmdb is never closed during a transaction so there&apos;s always a &quot;reference&quot; to the database environment when an upgrade is in process.

From rpm POV the simplest option would be to just flick on DB_PRIVATE mode. Which sort of equals disabling db locking but then non-root queries (which I&apos;d assume to be the vast majority) run in DB_PRIVATE mode for the simple reason of not having permission to grab locks, and the world hasn&apos;t ended. Single writer is enforced via a separate transaction lock anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10033443</commentid>
    <comment_count>20</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-01-04 06:39:06 -0500</bug_when>
    <thetext>(In reply to Torvald Riegel from comment #18)
&gt; Second, I have looked a bit at the code for libdb mutex, mutex regions, and
&gt; environments, but I haven&apos;t figured out yet whether libdb actually destroys
&gt; all mutexes when the last reference to a database is removed.
&gt; Nonetheless, making this scenario work could be a solution.

To my knowledge, mutexes located in libdb&apos;s regions are not destroyed or re-initialized when the last process that references them exists.
 
&gt; Another solution could be to say that glibc upgrades are like libdb
&gt; major/minor upgrades, and then follow (some of) the steps outlined in
&gt; docs/upgrading/upgrade_process.html for every user of libdb.  This requires
&gt; touching more packages, but may be easier to enforce than the first
&gt; solution, which requires checking whether libdb clients cannot hold a
&gt; reference across updates of glibc.

This would be possible for the packages we know of but not helpful for user applications built upon libdb that would find themselves unable to use it and would have to make some manual changes on their own.
This could however be used as a workaround for rpm which would otherwise block the upgrade to F26.

&gt; A third solution would be to version databases and include glibc&apos;s version
&gt; in there.  But that doesn&apos;t provide automatic capability, and would probably
&gt; require quite a few changes to libdb.
&gt; 
&gt; I guess it would be best to look at the first solution first, starting with
&gt; trying to find out what libdb actually guarantees or intends to guarantee. 
&gt; Any suggestions for where to get this information?

Unfortunately my knowledge about libdb is also very limited given that I have not been taking care of it for too long.
I have contacted upstream regarding this issue. The thread is publicly available at:
https://community.oracle.com/message/14170069
My hope is that Oracle might help us answer the questions we have about their implementation at least.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10039851</commentid>
    <comment_count>21</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-01-06 02:49:59 -0500</bug_when>
    <thetext>Discussion with Oracle moved to email. They promised to take a look at this issue but it will take a while before they can work on it actively. Do we know when the new implementation is going to get into an upstream release? So Oracle know what timeframe to work with.

I have also verified with Oracle that libdb does not do any reinitialization checks of synchronization primitives on its own, so the only way to currently work around this is by opening the environment with the DB_RECOVER (or DB_PRIVATE as Panu pointed out) flag set.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142317</commentid>
    <comment_count>22</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-02-13 04:53:40 -0500</bug_when>
    <thetext>Forwarding new information from upstream:

----

We have been looking at this.  this is a bit tricky.   The problem as we see it, is the glibc library changes the pthread_cond_t structure in a way that breaks backward compatibility.   So we cannot look at structure size and make any conclusions.  The idea that we came up with is this ....

   -  add a check in the configure code to see if gnu_get_libc_version() exists on the system -- This should be true for nearly all Linuxes
 - if true, we compile in some extra code that is executed during the environment open
 - This code will clean the mutex region if the glibc version is different.

  consequences of this patch ....

  - we will store the glibc version in the environment and on open we will grab the current version and if we detect a mismatch we will recreate the region files.  This should prevent the hang that you are seeing.

----

This could work as a workaround to the issue, however I have voiced some concerns regarding already existing environments that do not have the glibc version variable yet (as we had problems with modifying environment structures before).
Also upstream asks whether it is possible to get into a situation in which two rpm processes are accessing libdb environment each using a different glibc version (after performing the glibc upgrade).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142364</commentid>
    <comment_count>23</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-02-13 05:15:26 -0500</bug_when>
    <thetext>(In reply to Petr Kubat from comment #22)
&gt; Also upstream asks whether it is possible to get into a situation in which
&gt; two rpm processes are accessing libdb environment each using a different
&gt; glibc version (after performing the glibc upgrade).

This is one of the reasons why calling rpm from rpm scriptlets is such a bad idea: while it appears to work most of the time, every once in a blue moon it breaks in that single transaction where glibc innards change and there&apos;s no way to predict when this might happen and reproducing can be a bit tricky too.

It&apos;s also a fine example of the wacko complications involved with the rpm database...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142495</commentid>
    <comment_count>24</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-02-13 06:09:02 -0500</bug_when>
    <thetext>(In reply to Panu Matilainen from comment #23)
&gt; This is one of the reasons why calling rpm from rpm scriptlets is such a bad
&gt; idea: while it appears to work most of the time, every once in a blue moon
&gt; it breaks in that single transaction where glibc innards change and there&apos;s
&gt; no way to predict when this might happen and reproducing can be a bit tricky
&gt; too.
&gt; 
&gt; It&apos;s also a fine example of the wacko complications involved with the rpm
&gt; database...

Ah, right. I forgot running rpm inside a rpm scriptlet is a thing. Thanks for reminding me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142506</commentid>
    <comment_count>25</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-02-13 06:15:03 -0500</bug_when>
    <thetext>(In reply to Petr Kubat from comment #24)
&gt; 
&gt; Ah, right. I forgot running rpm inside a rpm scriptlet is a thing. Thanks
&gt; for reminding me.

It&apos;s very much a discouraged thing. Not that discouraging ever *stopped* people from doing it though...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142525</commentid>
    <comment_count>26</comment_count>
    <who name="Florian Weimer">fweimer</who>
    <bug_when>2017-02-13 06:19:34 -0500</bug_when>
    <thetext>(In reply to Petr Kubat from comment #22)
&gt; Forwarding new information from upstream:
&gt; 
&gt; ----
&gt; 
&gt; We have been looking at this.  this is a bit tricky.   The problem as we see
&gt; it, is the glibc library changes the pthread_cond_t structure in a way that
&gt; breaks backward compatibility.   So we cannot look at structure size and
&gt; make any conclusions.  The idea that we came up with is this ....
&gt; 
&gt;    -  add a check in the configure code to see if gnu_get_libc_version()
&gt; exists on the system -- This should be true for nearly all Linuxes
&gt;  - if true, we compile in some extra code that is executed during the
&gt; environment open
&gt;  - This code will clean the mutex region if the glibc version is different.
&gt; 
&gt;   consequences of this patch ....
&gt; 
&gt;   - we will store the glibc version in the environment and on open we will
&gt; grab the current version and if we detect a mismatch we will recreate the
&gt; region files.  This should prevent the hang that you are seeing.
&gt; 
&gt; ----

I don&apos;t think this is quite sufficient because the data structure layout could change without the glibc version changing.

I suppose we could provide a pthread_layout_version_np function in glibc which returns an int which refers to version number of the current pthread data structure layout.  it is a bit tricky to come up with a single version number which is consistent across all distributions, but we can probably provide something.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142610</commentid>
    <comment_count>27</comment_count>
    <who name="Torvald Riegel">triegel</who>
    <bug_when>2017-02-13 06:57:58 -0500</bug_when>
    <thetext>(In reply to Florian Weimer from comment #26)
&gt; (In reply to Petr Kubat from comment #22)
&gt; &gt; Forwarding new information from upstream:
&gt; &gt; 
&gt; &gt; ----
&gt; &gt; 
&gt; &gt; We have been looking at this.  this is a bit tricky.   The problem as we see
&gt; &gt; it, is the glibc library changes the pthread_cond_t structure in a way that
&gt; &gt; breaks backward compatibility.   So we cannot look at structure size and
&gt; &gt; make any conclusions.  The idea that we came up with is this ....
&gt; &gt; 
&gt; &gt;    -  add a check in the configure code to see if gnu_get_libc_version()
&gt; &gt; exists on the system -- This should be true for nearly all Linuxes
&gt; &gt;  - if true, we compile in some extra code that is executed during the
&gt; &gt; environment open
&gt; &gt;  - This code will clean the mutex region if the glibc version is different.
&gt; &gt; 
&gt; &gt;   consequences of this patch ....
&gt; &gt; 
&gt; &gt;   - we will store the glibc version in the environment and on open we will
&gt; &gt; grab the current version and if we detect a mismatch we will recreate the
&gt; &gt; region files.  This should prevent the hang that you are seeing.
&gt; &gt; 
&gt; &gt; ----
&gt; 
&gt; I don&apos;t think this is quite sufficient because the data structure layout
&gt; could change without the glibc version changing.
&gt; 
&gt; I suppose we could provide a pthread_layout_version_np function in glibc
&gt; which returns an int which refers to version number of the current pthread
&gt; data structure layout.  it is a bit tricky to come up with a single version
&gt; number which is consistent across all distributions, but we can probably
&gt; provide something.

I agree that we could be able to build such a version number, but I don&apos;t think we should.  First, libdb should show that it can&apos;t just do reference counting, for example, and re-initialize any condvars it uses whenever the a database transitions from not being used to used.  I&apos;ll talk with libdb upstream about this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10142830</commentid>
    <comment_count>28</comment_count>
    <who name="Howard Chu">hyc</who>
    <bug_when>2017-02-13 07:46:51 -0500</bug_when>
    <thetext>If you can guarantee that a reboot will occur between version changes, a simple fix is to always configure BDB to use a shared memory region instead of a mmap&apos;d file for its environment. Then the shared memory region is automatically destroyed/recreated by rebooting the system.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10170909</commentid>
    <comment_count>29</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-02-21 08:46:51 -0500</bug_when>
    <thetext>Some more information from the discussion with libdb upstream.

We have 2 ideas we are looking at right now.

1. have BDB scroll away the glibc version and on an open do some checking to see if glibc version changed and force a recovery under the covers
2. DBENV recovery on glibc version change via a %posttrans cleanup action

The first idea I have already mentioned in comment 22.
The second idea is something I have thrown into the discussion as a workaround  specifically for rpm. I have tried looking at this idea a bit more to see if it would actually work and found out, that there are additional issues connected with it.
AFAIK there are 3 ways to go about forcing the environment to recover:
First &quot;rpm --rebuilddb&quot;, but this does not work as it needs a transaction lock that is held by the rpm process doing the install/update action.
Second is &quot;db_recover -h /var/lib/rpm&quot; which is the libdb way of doing the recovery. This does work in recovering the environment but results in the rpm process throwing DB_RUNRECOVERY errors.
Third way is just removing the problematic region files by force via &quot;rm -f /var/lib/__db.00*&quot; but it seems rpm is recreating them with the old glibc structures in place when the db/dbenv is closed.

Generally libdb upstream is against modifying their code to rebuild the environment every time it is accessed as that (together with the implementation of an &quot;in-use&quot; counter) would be a non-negligible hit to performance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10173689</commentid>
    <comment_count>30</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-02-22 03:48:49 -0500</bug_when>
    <thetext>A correction to the third way of environment recovery (&quot;rm -f /var/lib/__db.00*&quot;) - the region files are not recreated on closing the db/dbenv, but during dnf&apos;s verification process, which is still a problem since the hang is not removed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10173727</commentid>
    <comment_count>31</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-02-22 04:03:53 -0500</bug_when>
    <thetext>The underlying problem with the verification step might be the same to the one that I encountered a while ago in yum (bug 1351060).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10191572</commentid>
    <comment_count>32</comment_count>
    <who name="Fedora End Of Life">jkurik</who>
    <bug_when>2017-02-28 05:36:52 -0500</bug_when>
    <thetext>This bug appears to have been reported against &apos;rawhide&apos; during the Fedora 26 development cycle.
Changing version to &apos;26&apos;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10381035</commentid>
    <comment_count>33</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-03 02:37:14 -0400</bug_when>
    <thetext>Some more information from upstream:

They are going with the basic solution that they had originally proposed (cleaning up the environment files on glibc version change). The main issue is doing this in a dynamic way.

Right now upstream is waiting for a pass on all of their regressions tests so hopefully we will get a patch we can work with soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10415698</commentid>
    <comment_count>34</comment_count>
      <attachid>1279226</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-16 04:07:23 -0400</bug_when>
    <thetext>Created attachment 1279226
upstream patch

Earlier today, upstream sent me the promised patch for our version of libdb (attached).
Only had time to do a quick test but it seems to work out of the box. Will do a thorough review later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10441650</commentid>
    <comment_count>35</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-23 18:43:34 -0400</bug_when>
    <thetext>libdb-5.3.28-18.fc24 has been submitted as an update to Fedora 24. https://bodhi.fedoraproject.org/updates/FEDORA-2017-9d674be444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10441653</commentid>
    <comment_count>36</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-23 18:44:08 -0400</bug_when>
    <thetext>libdb-5.3.28-18.fc25 has been submitted as an update to Fedora 25. https://bodhi.fedoraproject.org/updates/FEDORA-2017-6e056b68bf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10441655</commentid>
    <comment_count>37</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-23 18:44:32 -0400</bug_when>
    <thetext>libdb-5.3.28-18.fc26 has been submitted as an update to Fedora 26. https://bodhi.fedoraproject.org/updates/FEDORA-2017-a4c41ecc27</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10441663</commentid>
    <comment_count>38</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-05-23 18:50:49 -0400</bug_when>
    <thetext>As this is blocking Fedora 26 beta, and the patch tested out with a scratch build (see https://bugzilla.redhat.com/show_bug.cgi?id=1443415#c19 ), I went ahead and submitted updates for all releases. Petr, of course if you spot anything wrong on review, I will withdraw the updates.

For F24 and F25 I synced up with master, pulling in a couple of other recent fixes; I reviewed them and they seemed to be quite safe to include, but again, please let me know if not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10442371</commentid>
    <comment_count>39</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-24 02:36:10 -0400</bug_when>
    <thetext>As for the patch I found one thing that bothered me and also might pose some issues:

~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~

diff -r db78da0996b1 src/env/env_region.c
--- a/src/env/env_region.c  Mon Sep 09 11:09:35 2013 -0400
+++ b/src/env/env_region.c  Sat Apr 29 04:10:18 2017 -0700
@@ -14,17 +14,54 @@
 #include &quot;dbinc/log.h&quot;
 #include &quot;dbinc/txn.h&quot;

+#define static
 static int  __env_des_get __P((ENV *, REGINFO *, REGINFO *, REGION **));
 static int  __env_faultmem __P((ENV *, void *, size_t, int));
 static int  __env_sys_attach __P((ENV *, REGINFO *, REGION *));

~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~

I already have a patch for this (and other minor things) prepared but wanted to first get in touch with upstream to ask if there is not a good reason for the define to stay in (there is not).
I will make new builds for libdb across all the branches that already have the original fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10442433</commentid>
    <comment_count>40</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-05-24 02:56:26 -0400</bug_when>
    <thetext>Thanks for the heads-up - please do go ahead and edit my updates with your new builds if you have the power, or submit new updates to supersede them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10442637</commentid>
    <comment_count>41</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-24 03:50:39 -0400</bug_when>
    <thetext>New builds have been added to the existing updates.

As for how libdb now handles environment rebuild checks - when the environment is opened libdb checks the modify timestamp of libpthread.so, compares it with the value stored in the environment and on mismatch exclusively locks the environment and rebuilds it with new variables in place.
Libdb now also rebuilds the environment the same way when either the internal layout of its regions&apos; variables changes (as is the case with the addition of pthreads_timestamp) or when libdb is updated to a newer version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10448828</commentid>
    <comment_count>42</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-05-25 15:20:08 -0400</bug_when>
    <thetext>libdb-5.3.28-19.fc26 has been pushed to the Fedora 26 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-a4c41ecc27</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10450221</commentid>
    <comment_count>43</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-26 03:32:49 -0400</bug_when>
    <thetext>(In reply to Adam Williamson from comment #38)
&gt; As this is blocking Fedora 26 beta, and the patch tested out with a scratch
&gt; build (see https://bugzilla.redhat.com/show_bug.cgi?id=1443415#c19 ), I went
&gt; ahead and submitted updates for all releases. Petr, of course if you spot
&gt; anything wrong on review, I will withdraw the updates.
&gt; 
&gt; For F24 and F25 I synced up with master, pulling in a couple of other recent
&gt; fixes; I reviewed them and they seemed to be quite safe to include, but
&gt; again, please let me know if not.

Adam,
Thank you very much. I really appreciate that you &quot;tested&quot; this update properly.
[root@vm-174 ~]# dnf check-update
error: rpmdb: BDB0113 Thread/process 17153/139837515298560 failed: BDB1507 Thread died in Berkeley DB library
error: db5 error(-30973) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery
error: cannot open Packages index using db5 -  (-30973)
error: cannot open Packages database in /var/lib/rpm
Error: Error: rpmdb open failed
[root@vm-174 ~]# 
[root@vm-174 ~]# rpm -q libdb
error: rpmdb: BDB0113 Thread/process 17153/139837515298560 failed: BDB1507 Thread died in Berkeley DB library
error: db5 error(-30973) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery
error: cannot open Packages index using db5 -  (-30973)
error: cannot open Packages database in /var/lib/rpm
error: rpmdb: BDB0113 Thread/process 17153/139837515298560 failed: BDB1507 Thread died in Berkeley DB library
error: db5 error(-30973) from dbenv-&gt;failchk: BDB0087 DB_RUNRECOVERY: Fatal error, run database recovery
error: cannot open Packages index using db5 -  (-30973)
error: cannot open Packages database in /var/lib/rpm
package libdb is not installed</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10450233</commentid>
    <comment_count>44</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-05-26 03:36:59 -0400</bug_when>
    <thetext>Lukas: I didn&apos;t test it; people hitting the bug did, and it fixed the bug. Updates go to testing in order to find problems like that. I already unpushed the updates several hours ago. You may want to follow https://bugzilla.redhat.com/show_bug.cgi?id=1443415 , the discussion is more active there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10450297</commentid>
    <comment_count>45</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-26 03:47:45 -0400</bug_when>
    <thetext>Then it would be good to close this BZ as a duplicate or vice versa.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10451047</commentid>
    <comment_count>46</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-26 07:58:13 -0400</bug_when>
    <thetext>(In reply to Adam Williamson from comment #44)
&gt; Lukas: I didn&apos;t test it; people hitting the bug did, and it fixed the bug.
And that is the biggest problem. It is a critical package and you blindly pushed 5.3.28-18 to updates-testing.

You would have not pushed package to updates-tesing if had tried dnf update + links from koji.
  e.g. dnf update https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/18.fc26/x86_64/libdb-5.3.28-18.fc26.x86_64.rpm https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/18.fc26/x86_64/libdb-utils-5.3.28-18.fc26.x86_64.rpm

Because it does not work. I know is not just your problem because package maintainer didn&apos;t tested it&apos;s build either (5.3.28-19). (dnf update + links from koji)

&gt; Updates go to testing in order to find problems like that.
Fedora users should just help with testing packages in updates-testing. They should not supplement this role. updates-testing should be used to find corner-case. But this is a basic use case. Update from update -&gt; updates testing.

&gt; I already unpushed the updates several hours ago.
Then there is a bug in fedora release engineering. It is obvious that unpushed packages were released. It would be good to prevent such situation in future. If you know where to file ticket for fedora releng then I would appreciate if you could do that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10451086</commentid>
    <comment_count>47</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-26 08:08:33 -0400</bug_when>
    <thetext>Lukas,
libdb has been tested. It is unfortunate that another issue broke rpm in some configurations (I guess yours included) but that is something that most of the times cannot be forseen, which is exactly the reason why we are pushing packages to updates-testing where a lot of users with different configurations can install and test the package.

This is not a libdb issue, nor is it a dnf/yum issue. If anything this is either an issue of rpm, that allows calling rpm commands inside scriplets, or an issue of packages, that actually do it, even though it is strongly discouraged. But let us not throw blame around and concentrate on fixing things instead.

Follows a log from my box for anyone interested with openldap-servers package installed and libdb being updated (via rpm -Uvv &quot;libdb-5.3.28-19.fc26.x86_64.rpm&quot;)

~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~
D: %triggerin(openldap-servers-2.4.44-10.fc25.x86_64): scriptlet start
fdio:       2 writes,      368 total bytes in 0.000009 secs
D: %triggerin(openldap-servers-2.4.44-10.fc25.x86_64): execv(/bin/sh) pid 8412
D: Plugin: calling hook scriptlet_fork_post in selinux plugin
D: setexecfilecon: (/bin/sh) 
+ &apos;[&apos; 2 -eq 2 &apos;]&apos;
++ wc -l
++ sort -u
++ sed &apos;s/\.[0-9]*$//&apos;
++ rpm -q &apos;--qf=%{version}\n&apos; libdb
+ &apos;[&apos; 1 &apos;!=&apos; 1 &apos;]&apos;
+ rm -f /var/lib/ldap/rpm_upgrade_libdb
+ exit 0
D: %triggerin(openldap-servers-2.4.44-10.fc25.x86_64): waitpid(8412) rc 8412 status 0
error: rpmdb: DB_LOCK-&gt;lock_put: Lock is no longer valid
error: db5 error(22) from dbcursor-&gt;c_close: Invalid argument
Segmentation fault (core dumped)
~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~

Not sure yet why libdb dies here with segfault. Should be complaining about environment version mismatch instead.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10451304</commentid>
    <comment_count>48</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-26 09:14:48 -0400</bug_when>
    <thetext>It&apos;s not even just scriptlets calling rpm, it&apos;s *anything* opening the rpmdb ... during a transaction that happens to change the futex implementation or such. Which occurs once every few years - totally unpredictable except for the fact that the next time WILL come, most likely when everybody has mostly forgotten the issue exists at all :-/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10451798</commentid>
    <comment_count>49</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-05-26 10:54:13 -0400</bug_when>
    <thetext>(In reply to Petr Kubat from comment #47)
&gt; Lukas,
&gt; libdb has been tested. It is unfortunate that another issue broke rpm in
&gt; some configurations (I guess yours included)

It is not broken just in some configuration. It is broken for everyone on 26.

I am sorry but you didn&apos;t tested upgrade of your own package and you try to persuade us that there is nothing wrong in libdb. If there is a change in libdb which required change in rpm then both packages should be updated at once. Or both maintainers should be in sync. But breaking upgrade for everyone is not a solution. libdb is ***critical*** package on fedora (due to rpm)

&gt; but that is something that most
&gt; of the times cannot be forseen, which is exactly the reason why we are
&gt; pushing packages to updates-testing where a lot of users with different
&gt; configurations can install and test the package.
&gt;

BTW the updates-testing is a poor excuse. I do not want to say that you had to test all test cases with rpm. But upgrading of own package is a minimal use-case which should not be tested by users.



Are you sure it is not bug in libdb?
Then please explain why it happens when libdb-5.3.28-17.fc26.x86_64.rpm is upgraded to newer version. And libdb-5.3.28-17.fc26.x86_64.rpm is a default version in f26 https://apps.fedoraproject.org/packages/libdb

sh# rpm -qa libdb*
libdb-utils-5.3.28-17.fc26.x86_64
libdb-5.3.28-17.fc26.x86_64

sh# rpm -q --scripts libdb libdb-utils
postinstall program: /sbin/ldconfig
postuninstall program: /sbin/ldconfig

sh# rpm -Uvh https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/19.fc26/x86_64/libdb-5.3.28-19.fc26.x86_64.rpm https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/19.fc26/x86_64/libdb-utils-5.3.28-19.fc26.x86_64.rpm
Retrieving https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/19.fc26/x86_64/libdb-5.3.28-19.fc26.x86_64.rpm
Retrieving https://kojipkgs.fedoraproject.org//packages/libdb/5.3.28/19.fc26/x86_64/libdb-utils-5.3.28-19.fc26.x86_64.rpm

Preparing...                          ################################# [100%]
Updating / installing...
   1:libdb-5.3.28-19.fc26             ################################# [ 25%]
error: rpmdb: DB_LOCK-&gt;lock_put: Lock is no longer valid
error: db5 error(22) from dbcursor-&gt;c_close: Invalid argument</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10452178</commentid>
    <comment_count>50</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-26 12:49:56 -0400</bug_when>
    <thetext>&gt;Then please explain why it happens when libdb-5.3.28-17.fc26.x86_64.rpm is upgraded to newer version.

If you were to provide a proper debugging output (like with the example I posted in my last comment) I would be able to answer that question. Alas you failed and so I cannot.

&gt;It&apos;s not even just scriptlets calling rpm, it&apos;s *anything* opening the rpmdb ... 

True but it feels like the scriplets use case is one of the more visible ones given I seem to hit some issues with them pretty often.
In any way I am out of ideas on how to make this work for scriplets. We cannot remove the environment during scriplets as that breaks rpm since it does not expect that a scriplet might do that. On the other hand even if we were able to make scriplets use the old libdb shared library (is that even possible after it is already installed?) that would just cause issues in the packages running those scriplets (since those would just fail on environment version mismatch).
This leaves us once again with trying to keep the environment signature the same between those two versions, which, however would cause us to not be able to remember the pthreads version libdb was build against as it is currently saved in the environment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10454876</commentid>
    <comment_count>51</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-29 03:49:38 -0400</bug_when>
    <thetext>&gt;On the other hand even if we were able to make scriplets use the old libdb shared library (is that even possible after it is already installed?) that would just cause issues in the packages running those scriplets

Extending on this idea, a (very) dirty way to make this work would be to install the newer libdb-5.3.so file to some other location (or under a different name, say libdb-5.3.so.new) and then move it to the proper location in a %posttrans. This way openldap-server&apos;s scriplets would use the old version of libdb as it is still installed. As a result of openldap-server&apos;s trigger being run against the older version its libdb environment would not be upgraded but that should not pose any issues as far as I can see since libdb would just rebuild the environment by itself on the next time it is opened.

However, as the new shared library would essentially be available only after the the %posttrans has gone through, any %postun or other %posttrans scriptlets that need libdb installed to work would fail...

What do you guys think? Any other ideas?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10454938</commentid>
    <comment_count>52</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-29 04:16:22 -0400</bug_when>
    <thetext>I think all it needs is to fail cleanly in this situation, whether it&apos;s a scriptlet or manual rpm query that&apos;s causing the mismatch.

If somebodys scriptlets fail to do the right thing, it&apos;s only a case of &quot;told you so&quot; - we dont want to go out of our way and introduce dirty hacks to support an unsupported thing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455030</commentid>
    <comment_count>53</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-29 04:49:05 -0400</bug_when>
    <thetext>&gt;I think all it needs is to fail cleanly in this situation, whether it&apos;s a scriptlet or manual rpm query that&apos;s causing the mismatch.

I agree, but making the scriplet/another rpm process fail cleanly in this situation will be pretty difficult given the patch introduces an automatic environment rebuild mechanism specifically designed to avoid failing due to version mismatch...

I guess I could remove the environment rebuild on signature change for the time being to just fail on version mismatch but that would need some additional modifications from the rpm side - it would need to rebuild its environment as it would find itself failing for the same reason (due to the addition of pthreads timestamp tracking).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455126</commentid>
    <comment_count>54</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-29 05:11:57 -0400</bug_when>
    <thetext>I only skimmed through the patch, but it seems to me the ingredients to do the right thing are there: it (tries) to get an exclusive lock on the primary region initially for creation of the environment, and then downgrade to shared lock for the rest of operation. 

Clearly it should only try to rebuild the environment if it&apos;s the sole owner of the environment (and AFAICS that&apos;s what the patch does) and during a transaction that would not be the case. 

Except that of course in transaction where libdb itself is being upgraded, the region is not locked at all. So possible implementation bugs aside, the patch looks sound to me, only it doesn&apos;t handle the rather special case of update of itself. So it should somehow detect that the region is in use but not locked, and just fail without trying to rebuild the environment in that case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455141</commentid>
    <comment_count>55</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-29 05:20:09 -0400</bug_when>
    <thetext>&gt;So it should somehow detect that the region is in use but not locked, and just fail without trying to rebuild the environment in that case.

As the addition of using locks on the first region file was a result of trying to make libdb aware of whether there are other processes accessing the environment I am not sure there is any other way to check this right now.
But it is a good direction to follow, thanks! Will also ask upstream if there are some other solutions they might have scrapped in favour of locking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455148</commentid>
    <comment_count>56</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-29 05:24:40 -0400</bug_when>
    <thetext>Another possibility could be making rpm take the the region lock too, that should  then make the current patch do the right thing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455157</commentid>
    <comment_count>57</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-29 05:26:47 -0400</bug_when>
    <thetext>Hmph, but of course that still depends on somehow getting a newer rpm into the users&apos; system before trying to update libdb, so it just shifts the problem elsewhere, doesn&apos;t actually solve it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455188</commentid>
    <comment_count>58</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-29 05:40:38 -0400</bug_when>
    <thetext>One more note: in the short term at least, might be best to just leave out the automatic environment rebuild. Rpm still has this workaround in its %posttrans:

&gt; # XXX this is klunky and ugly, rpm itself should handle this
&gt; dbstat=/usr/lib/rpm/rpmdb_stat
&gt; if [ -x &quot;$dbstat&quot; ]; then
&gt;    if &quot;$dbstat&quot; -e -h /var/lib/rpm 2&gt;&amp;1 | grep -q &quot;doesn&apos;t match library version \| Invalid argument&quot;; then
&gt;        rm -f /var/lib/rpm/__db.*
&gt;    fi
&gt;fi
&gt;exit 0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10455381</commentid>
    <comment_count>59</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-29 06:41:27 -0400</bug_when>
    <thetext>&gt;Hmph, but of course that still depends on somehow getting a newer rpm into the users&apos; system before trying to update libdb, so it just shifts the problem elsewhere, doesn&apos;t actually solve it.

Yep that is the major difficulty in fixing this - how to do it only via a libdb update.

&gt;Rpm still has this workaround in its %posttrans: ...

I am aware of this workaround but this does not help us in any way for two main reasons:
1) This only removes the region files when either the minor or major versions of libdb change so we would either have to bump the versions downstream or change this %posttrans even on DB_VERSION_MISMATCH
2) afaik there is still the issue with yum/dnf which I touched in comment 31 so the environment would just be recreated with the old structures in place after nuking it...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10456163</commentid>
    <comment_count>60</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-29 10:02:22 -0400</bug_when>
    <thetext>&gt;Another possibility could be making rpm take the the region lock too, that should  then make the current patch do the right thing.

Actually how about the other way around?
afaik rpm creates some .lock files during the update of packages. How are these being used? Would it be possible for libdb to check if an update is in progress?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10457910</commentid>
    <comment_count>61</comment_count>
      <attachid>1283384</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-30 06:22:57 -0400</bug_when>
    <thetext>Created attachment 1283384
rpm lock check patch

The solution of looking at rpm&apos;s .lock file for information about a possible ongoing update looked like a good way to work around the issue (although it is very much another rpm specific hack) so I have tried it out (patch attached) and confirmed it is working. Tested with a complete update from F25 to F26 without any hangs occurring. All packages using rpm in their scriplets failed to remove the environment, resulted in DB_VERSION_MISMATCH as expected and the environment  got rebuilt when next accessed.

As far as I can see there should not be any negative influence when using this patch as the check is only used when an incompatible environment is encountered and is non-blocking, falling back to normal environment checks when the rpm lock is unavailable.

It would be nice if someone could take a look at the patch and review it. One thing I am not sure is whether to try get an exclusive lock on rpm&apos;s .lock file, or just a reader lock...
Also need to modify configure to properly set up the path to the .lock file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10458282</commentid>
    <comment_count>62</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-30 08:05:18 -0400</bug_when>
    <thetext>AFAICS that hits problems with the crazy semantics of fcntl() locks: if (and when) that test runs in the rpm that is actually doing the transaction, the lock it holds gets released there. It&apos;s not just the explicit F_UNLCK, the mere act of closing the fd will cause the lock to get released.

You could avoid the F_UNLCK by doing a F_GETLK instead of actually locking - if F_GETLK fails then somebody else is holding the lock already and libdb should not rebuild the environment. It&apos;s racy of course but no more so than what your patch does I think.

However that still leaves the problem of fd closing. You&apos;d have to deliberately leak the fd, or maybe store it into a static variable and only close it from an atexit() handler or such - closing it on db close is not okay because rpm reopens the db while holding the transaction lock. So it gets really ugly :-/

Rpm itself would be in a better position to fiddle with these locks of course. One possibility might be having rpm drop to readonly DB_PRIVATE mode when it detects a held transaction lock, which should avoid most disasters even if the exact behavior is murky.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10458387</commentid>
    <comment_count>63</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-30 08:27:58 -0400</bug_when>
    <thetext>&gt;AFAICS that hits problems with the crazy semantics of fcntl() locks: if (and when) that test runs in the rpm that is actually doing the transaction, the lock it holds gets released there. It&apos;s not just the explicit F_UNLCK, the mere act of closing the fd will cause the lock to get released.

Ah, damn. Completely forgot about this. So libdb would essentially remove the lock from rpm right at the start next time the db is accessed after the update since a rebuild of the environment would be needed... messy. Thanks for spotting this!

&gt;However that still leaves the problem of fd closing. You&apos;d have to deliberately leak the fd, or maybe store it into a static variable and only close it from an atexit() handler or such - closing it on db close is not okay because rpm reopens the db while holding the transaction lock. So it gets really ugly :-

I know libdb has some form of fd management built-in that might help but would have to look into this some more to check where and when the descriptors are released. I guess that it would most likely be at environment close though...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10458540</commentid>
    <comment_count>64</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-30 09:00:21 -0400</bug_when>
    <thetext>While we&apos;re talking about *cough* creative *cough* approaches: one could check for the existence of a lock without interfering with it by looking at /proc/locks. Determine the inode of /var/lib/rpm/.rpm.lock if it exists and look for it in /proc/locks in the sixth column:

[pmatilai@sopuli ~]$ ls -i /srv/test/var/lib/rpm/.rpm.lock 
13631516 /srv/test/var/lib/rpm/.rpm.lock
[pmatilai@sopuli ~]$ grep :13631516 /proc/locks 
1: POSIX  ADVISORY  WRITE 13458 fd:01:13631516 0 EOF

If it&apos;s there, it means rpm is in middle of transaction.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10462712</commentid>
    <comment_count>65</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-31 06:04:20 -0400</bug_when>
    <thetext>Looked at libdb&apos;s fd management subsytem and, as I expected, it is able to release still held descriptors on closing the environment which does not help us at all since rpm opens and closes the environment multiple times during an upgrade. Libdb is also very vocal about having to release the descriptors...

&gt;Determine the inode of /var/lib/rpm/.rpm.lock if it exists and look for it in /proc/locks in the sixth column:

Creativity aside, wouldn&apos;t that approach also need having the .rpm.lock file open when trying to look at its inode number?

I wonder if we could not just get away with using the rpm lock check in libdb as is (well with the modification of only trying to see if we could lock the file as Panu suggested) ...
The way I see it, right now (using the patch) we are able to survive the update of libdb which is the most important thing as any updates for rpm (or dnf, but rpm makes more sense I guess) itself would be applied by the time the next rpm command would be run. Which makes our hands a little bit less tied.
At this point rpm would just need to make sure that the environment is touched (hence rebuilt) before the transaction lock is taken since the rpm lock check will never get hit when the environment does not need to be rebuilt.

afaics dnf opens the environment before any rpm transactions take place so this should already be safe when only working through dnf.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10462754</commentid>
    <comment_count>66</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-31 06:17:47 -0400</bug_when>
    <thetext>&gt;Creativity aside, wouldn&apos;t that approach also need having the .rpm.lock file open when trying to look at its inode number?

I guess we wouldn&apos;t need to actually open the file if we went through directory&apos;s dirents trying to find the .rpm.lock&apos;s entry...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10462821</commentid>
    <comment_count>67</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-05-31 06:47:38 -0400</bug_when>
    <thetext>You can stat() a file to get the inode without opening, that&apos;s not a problem.

But the more I think about this, having system libdb muck about rpm locks seems ... not so healthy. Rpm spec has an option to build with bundled libdb, for occasions just like this one might say :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10462991</commentid>
    <comment_count>68</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-05-31 07:39:05 -0400</bug_when>
    <thetext>&gt;But the more I think about this, having system libdb muck about rpm locks seems ... not so healthy. Rpm spec has an option to build with bundled libdb, for occasions just like this one might say :)

Well yes. As I said before it is still an ugly hack that we would need to remove as soon as possible if we went through with it.

The only &quot;clean&quot; alternative to this that I see right now is pushing the patch with the automatic rebuild stripped out, fixing rpm so it expects a DB_VERSION_MISMATCH error when opening the environment and hope other packages depending on libdb have some checks of their own in place.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10465645</commentid>
    <comment_count>69</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-05-31 14:45:28 -0400</bug_when>
    <thetext>Note the parent bug is blocking Beta, and we have the second Go/No-Go for Beta tomorrow, and at present we have no *other* blockers. So it&apos;d be really good to get something in that makes this work for now, if it&apos;s at all possible, even if it&apos;s technically a Dirty Hack (TM).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10467169</commentid>
    <comment_count>70</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-01 02:50:58 -0400</bug_when>
    <thetext>Adam, thanks for the heads-up.
For the time being I will just push the fix that looks at rpm&apos;s transaction lock since that does not need any modifications from rpm&apos;s side to work. I will change it so as to leak the descriptor (the test is not run every time the environment so it should not hog too many resources) in order to not drop rpm&apos;s lock.

Also upstream replied to me that they are looking into the issue so they might provide some other ideas later on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10467750</commentid>
    <comment_count>71</comment_count>
      <attachid>1284053</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-01 05:10:34 -0400</bug_when>
    <thetext>Created attachment 1284053
rpm lock check patch v2

Attached modified patch as per comment 70. Would be nice if someone took a quick look at it before I push it</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10467867</commentid>
    <comment_count>72</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-06-01 05:37:58 -0400</bug_when>
    <thetext>+    fd = open(RPMLOCK_PATH, O_RDWR);
+    if (fd == -1)
+        return 1;

If the file doesn&apos;t exist at all then there can be no lock there either, so you could return 0 in that case. But probably doesn&apos;t matter.

I have to say I would feel less bad about this if the patch limited this thing to environments whose path contains /var/lib/rpm, rather than doing this for all users of libdb. That way completely unrelated software doesn&apos;t end up leaking fds ominuous looking fds because of this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10468140</commentid>
    <comment_count>73</comment_count>
      <attachid>1284124</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-01 06:55:52 -0400</bug_when>
    <thetext>Created attachment 1284124
rpm lock check patch v3

&gt;I have to say I would feel less bad about this if the patch limited this thing to environments whose path contains /var/lib/rpm

Yeah that might actually be a bit better. Thanks!
modified patch attached</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10468150</commentid>
    <comment_count>74</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-06-01 07:00:13 -0400</bug_when>
    <thetext>/me likes (but didn&apos;t test), thanks.

It&apos;s still one helluva gross hack but at least it&apos;s now a precision hack :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10468559</commentid>
    <comment_count>75</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-01 08:45:13 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc26 has been submitted as an update to Fedora 26. https://bodhi.fedoraproject.org/updates/FEDORA-2017-a4c41ecc27</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10468571</commentid>
    <comment_count>76</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-01 08:48:20 -0400</bug_when>
    <thetext>Pushed the changes to rawhide and f26 branches and added the f26 build to the update.

Note that previous releases do not need to have the fixes applied as all of the magic happens after libdb is updated to the fixed version. As such I have removed the upstream fix from those (f24, f25) branches.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10469973</commentid>
    <comment_count>77</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-06-01 14:43:36 -0400</bug_when>
    <thetext>&quot;Note that previous releases do not need to have the fixes applied as all of the magic happens after libdb is updated to the fixed version. As such I have removed the upstream fix from those (f24, f25) branches.&quot;

Uh - but in that case, how do we know that libdb is updated before glibc/libpthread is updated? When you&apos;re upgrading from F24 or F25 to F26, if glibc/libpthread is updated before libdb, won&apos;t that trigger the bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10471094</commentid>
    <comment_count>78</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-06-02 01:30:43 -0400</bug_when>
    <thetext>It&apos;d be really great if people could help test the new update hard: test that it fixes the actual bug, test it in the scenarios that caused trouble with -18 and -19, etc. We want to get this fix out for Beta, but we don&apos;t want to send it unless we&apos;re sure it&apos;s good. Thanks a lot!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10471183</commentid>
    <comment_count>79</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-02 02:19:08 -0400</bug_when>
    <thetext>&gt;Uh - but in that case, how do we know that libdb is updated before glibc/libpthread is updated?

I am not sure how the order of the installs is created from the list of packages but I would expect that the dependencies are installed first (and from testing out the F25 -&gt; F26 update that seems to be the case). So the install order should be glibc -&gt; libdb -&gt; whatever package that depends on libdb.

This also means that by the time a package that would be able to trigger the bug is installed, a newer version of libdb should already be present on the box (if not then that pavckage&apos;s requires need to be changed) and would not trigger the condvar issue since a newer libdb environment (and a rebuild of the old one) would be needed first.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10472062</commentid>
    <comment_count>80</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-06-02 07:21:24 -0400</bug_when>
    <thetext>Packages running rpm from scriptlets can happen anywhere in the order, never mind external accesses to the rpmdb.

I think we really need to have a patched up libdb present on the system before upgrading to the new glibc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10472357</commentid>
    <comment_count>81</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-02 09:00:37 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc25 has been submitted as an update to Fedora 25. https://bodhi.fedoraproject.org/updates/FEDORA-2017-6e056b68bf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10472364</commentid>
    <comment_count>82</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-02 09:01:12 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc24 has been submitted as an update to Fedora 24. https://bodhi.fedoraproject.org/updates/FEDORA-2017-9d674be444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10474623</commentid>
    <comment_count>83</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-04 01:10:46 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc26 has been pushed to the Fedora 26 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-a4c41ecc27</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10477031</commentid>
    <comment_count>84</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-05 08:07:44 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc24 has been submitted as an update to Fedora 24. https://bodhi.fedoraproject.org/updates/FEDORA-2017-9d674be444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10486559</commentid>
    <comment_count>85</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-07 13:41:10 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc24 has been submitted as an update to Fedora 24. https://bodhi.fedoraproject.org/updates/FEDORA-2017-9d674be444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10487165</commentid>
    <comment_count>86</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-07 16:16:03 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc25 has been submitted as an update to Fedora 25. https://bodhi.fedoraproject.org/updates/FEDORA-2017-6e056b68bf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10490143</commentid>
    <comment_count>87</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-08 12:04:48 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc24 has been pushed to the Fedora 24 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-9d674be444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10490169</commentid>
    <comment_count>88</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-08 12:10:48 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc25 has been pushed to the Fedora 25 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-6e056b68bf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10490935</commentid>
    <comment_count>89</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-08 17:07:22 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc26 has been pushed to the Fedora 26 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10492218</commentid>
    <comment_count>90</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-09 05:23:58 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc24 has been pushed to the Fedora 24 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10492599</commentid>
    <comment_count>91</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-09 07:29:18 -0400</bug_when>
    <thetext>libdb-5.3.28-21.fc25 has been pushed to the Fedora 25 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10494594</commentid>
    <comment_count>92</comment_count>
    <who name="stan">gryt2</who>
    <bug_when>2017-06-09 16:53:16 -0400</bug_when>
    <thetext>I just did a dnf update in F25 and picked up the libdb-5.3.28-21.fc25 package.  Not sure if it was from testing or stable, as I have both enabled.  However, there are issues.  When the libdb package was being installed, dnf popped up an error saying there was a database mismatch in the rpm database, though the rest of the updates completed.  But, at the end, dnf hung, and put up this message,

BDB1537 //var/lib/rpm/__db.001: unable to read system-memory information: Input/output error.

I remembered reading an email about this in the test list, and followed the instructions in that email.
rm /var/lib/rpm/_db.*
rpm --rebuilddb

That completed, and I will reboot and see if there are any problems.  I had to restart my mail client in order for it to access its database of stored passwords.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10494600</commentid>
    <comment_count>93</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-06-09 16:57:28 -0400</bug_when>
    <thetext>Yeah, you&apos;re not the only one, it now seems a few people are still having issues with -21 :( Very sorry about this, this bug is turning into a bit of a nightmare. We&apos;ll try and do all we can to deal with it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10494616</commentid>
    <comment_count>94</comment_count>
    <who name="stan">gryt2</who>
    <bug_when>2017-06-09 17:13:17 -0400</bug_when>
    <thetext>After the rpm database rebuild, and a reboot, everything seems to be working just fine again.  I ran a dnf update, and it properly told me that there was nothing to do, so the update that had the rpm db problems got integrated.  

A little excitement, and no lasting harm done.  :-)

&gt; Very sorry about this,

Not to worry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10495678</commentid>
    <comment_count>95</comment_count>
    <who name="Christian Krause">chkr</who>
    <bug_when>2017-06-11 04:45:19 -0400</bug_when>
    <thetext>I just stumbled over this bug during a regular &quot;dnf update&quot; was well:

During the update libdb was updated tolibdb.x86_64 5.3.28-21.fc25

$ dnf update
...
Complete!
Segmentation fault (core dumped)
$

The error messages of following &quot;dnf update&quot; or &quot;rpm -qa&quot; are similar to the ones already reported in:

https://bugzilla.redhat.com/show_bug.cgi?id=1394862#c43

I recovered from the situation via &quot;rpm -v --rebuilddb&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10497200</commentid>
    <comment_count>96</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-06-12 05:59:47 -0400</bug_when>
    <thetext>So people are seeing crashes after dnf prints out &quot;Complete!&quot;, at which point there shouldn&apos;t be much going on except rpmdb being *closed*. 

Unless there&apos;s something else at play, that is: for example https://bugzilla.redhat.com/show_bug.cgi?id=1397087#c48 shows etckeeper being involved. I&apos;m not really familiar with it, but it does involve dnf plugins that execute before and after (and maybe during, dunno) transaction, and seems to query rpmdb before and after the transaction.

But try as I might, I&apos;m not able to reproduce those post-trans crashes, with or without etckeeper :-/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10497549</commentid>
    <comment_count>97</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-12 07:57:52 -0400</bug_when>
    <thetext>From what I can see in dnf&apos;s code nothing else should access the rpmdb after the &quot;Complete!&quot; string is printed out, except a call to &quot;cli.command.run_transaction()&quot; which for the upgrade command seems to be a nop...

Unfortunately I cannot reproduce either. From what I can see from the logs it seems like something is accessing the rpmdb (and rebuilding it) after the transaction goes through (same behaviour as we have seen when it was removed during scriplets). The difference here is that it segfaults after the transaction has successfully completed so a &quot;rpmdb --rebuilddb&quot; fixes the issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10498093</commentid>
    <comment_count>98</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-12 10:17:40 -0400</bug_when>
    <thetext>Managed to reproduce the issue artificially by introducing a sleep() directly after the part of dnf&apos;s code where the &quot;Complete!&quot; is printed out and accessing the rpmdb from another process (rpm -qi libdb as root).
At this point it makes sense that the transaction lock is no longer taken by rpm as the transaction has already gone through so the environment is removed by the other process.
As for where the segfault happens, here is the python bt:

~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~
Traceback (most recent call first):
  File &quot;/usr/lib/python3.5/site-packages/dnf/rpm/transaction.py&quot;, line 48, in close
    self.ts.closeDB()
  File &quot;/usr/lib/python3.5/site-packages/dnf/base.py&quot;, line 373, in _ts
    self._priv_ts.close()
  File &quot;/usr/lib/python3.5/site-packages/dnf/base.py&quot;, line 329, in _closeRpmDB
    del self._ts
  File &quot;/usr/lib/python3.5/site-packages/dnf/base.py&quot;, line 301, in close
    self._closeRpmDB()
  File &quot;/usr/lib/python3.5/site-packages/dnf/base.py&quot;, line 102, in __exit__
    self.close()
  File &quot;/usr/lib/python3.5/site-packages/dnf/cli/main.py&quot;, line 62, in main
    return _main(base, args)
  File &quot;/usr/lib/python3.5/site-packages/dnf/cli/main.py&quot;, line 177, in user_main
    errcode = main(args)
  File &quot;/usr/bin/dnf&quot;, line 58, in &lt;module&gt;
    main.user_main(sys.argv[1:], exit_code=True)
~~~~~~~~~~~~~~snip~~~~~~~~~~~~~~

We can see dnf tries to close the rpmdb handle but fails to do so since it has already been removed by the other process.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499088</commentid>
    <comment_count>99</comment_count>
      <attachid>1287101</attachid>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-06-12 16:28:27 -0400</bug_when>
    <thetext>Created attachment 1287101
failed upgrade

BTW I can see failure when upgrading from -21 to -22 on f26
I didn&apos;t catch it earlier because my nightly tests were not running due to maintenance of hypervisors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499098</commentid>
    <comment_count>100</comment_count>
    <who name="sixpack13">sixpack13</who>
    <bug_when>2017-06-12 16:32:00 -0400</bug_when>
    <thetext>TL,DR

hit this bug today

update/-grade was 
from libdb.x86_64 5.3.28-21.fc26
to   libdb.x86_64 5.3.28-22.fc26

NO messages during upgrade, but after &quot;sudo dnf update --refresh -v&quot; I got:
error: db5 error(5) from dbenv-&gt;open: Input/output error
error: cannot open Packages index using db5 - Input/output error (5)
error: cannot open Packages database in /var/lib/rpm
Error: Error: rpmdb open failed

rm -rf __db* and rpm -v --rebuilddb fixed it (so far)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499107</commentid>
    <comment_count>101</comment_count>
    <who name="sixpack13">sixpack13</who>
    <bug_when>2017-06-12 16:36:00 -0400</bug_when>
    <thetext>sorry, Lukas and I wrote ours comments simultaneously, but Lukas saved it first !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499224</commentid>
    <comment_count>102</comment_count>
    <who name="stan">gryt2</who>
    <bug_when>2017-06-12 17:47:56 -0400</bug_when>
    <thetext>Well, I hit this bug today again when updating to libdb.x86_64 5.3.28-22.fc26 in F25.  But it didn&apos;t happen after the Complete!, it happened before it.  I don&apos;t think I was doing anything to access the rpm database.

Here&apos;s the error message

Upgraded:
  exfalso.noarch 3.9.1-1.fc25        fusion-icon.noarch 1:0.2.4-1.fc25  jansson.x86_64 2.10-2.fc25      jansson-devel.x86_64
  2.10-2.fc25  libdb.x86_64 5.3.28-22.fc25   libdb-cxx.x86_64 5.3.28-22.fc25  libdb-cxx-devel.x86_64 5.3.28-22.fc25
    libdb-devel.x86_64 5.3.28-22.fc25  libdb-utils.x86_64 5.3.28-22.fc25  lua-lxc.x86_64 2.0.8-2.fc25     lxc.x86_64
    2.0.8-2.fc25           lxc-libs.x86_64 2.0.8-2.fc25  lxqt-admin.x86_64 0.11.1-5.fc25  python3-lxc.x86_64 2.0.8-2.fc25
      quodlibet.noarch 3.9.1-1.fc25      tbb.x86_64 2017.7-1.fc25           tbb-devel.x86_64 2017.7-1.fc25  tbb-doc.x86_64
      2017.7-1.fc25

      Tracer:
        Program &apos;tracer&apos; crashed with following error:

        b&apos;error: db5 error(5) from dbenv-&gt;open: Input/output error\nerror: cannot open Packages index using db5 -
        Input/output error (5)\nerror: cannot open Packages database in /var/lib/rpm\nTraceback (most recent call last):\n
        File &quot;/usr/bin/tracer&quot;, line 34, in &lt;module&gt;\n    tracer.main.run()\n  File
        &quot;/usr/lib/python3.5/site-packages/tracer/main.py&quot;, line 45, in run\n    return router.dispatch()\n  File
        &quot;/usr/lib/python3.5/site-packages/tracer/resources/router.py&quot;, line 52, in dispatch\n    controller =
        DefaultController(self.args, self.packages)\n  File &quot;/usr/lib/python3.5/site-packages/tracer/controllers/default.py&quot;,
        line 62, in __init__\n    self.applications = self.tracer.trace_affected(self._user(args.user))\n  File
        &quot;/usr/lib/python3.5/site-packages/tracer/resources/tracer.py&quot;, line 96, in trace_affected\n    for file in
        self._PACKAGE_MANAGER.package_files(package.name):\n  File
        &quot;/usr/lib/python3.5/site-packages/tracer/resources/PackageManager.py&quot;, line 55, in package_files\n    return
        self.package_managers[0].package_files(pkg_name)\n  File
        &quot;/usr/lib/python3.5/site-packages/tracer/packageManagers/dnf.py&quot;, line 34, in package_files\n    if
        self._is_installed(pkg_name):\n  File &quot;/usr/lib/python3.5/site-packages/tracer/packageManagers/rpm.py&quot;, line 151, in
        _is_installed\n    mi = ts.dbMatch(\&apos;name\&apos;, pkg_name)\n_rpm.error: rpmdb open failed\n&apos;
        Please visit https://github.com/FrostyX/tracer/issues and submit the issue. Thank you
        We apologize for any inconvenience
        Complete!

I didn&apos;t go to github and enter the issue, as it seems like it probably isn&apos;t related to tracer.  That is, I&apos;m thinking tracer is just an innocent victim of the issue in rpm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499238</commentid>
    <comment_count>103</comment_count>
    <who name="stan">gryt2</who>
    <bug_when>2017-06-12 18:04:32 -0400</bug_when>
    <thetext>I removed the temp files in /var/lib/rpm (__db.00?) and rebuilt the rpm database (rpm --rebuilddb), and a subsequent install using dnf completed flawlessly.  So, this doesn&apos;t seem to do any lasting harm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499241</commentid>
    <comment_count>104</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-06-12 18:08:37 -0400</bug_when>
    <thetext>Hum, so if we send out -22, it&apos;s gonna cause problems *again* for people who already got -21? Great...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499663</commentid>
    <comment_count>105</comment_count>
    <who name="Chris Murphy">bugzilla</who>
    <bug_when>2017-06-12 23:41:37 -0400</bug_when>
    <thetext>I&apos;ve got this happening as well on a dnf update of a system that had -21 with no problems, and now the rpmdb appears corrupt.
https://bugzilla.redhat.com/show_bug.cgi?id=1394862#c100</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10499963</commentid>
    <comment_count>106</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-13 02:43:01 -0400</bug_when>
    <thetext>&gt;Hum, so if we send out -22, it&apos;s gonna cause problems *again* for people who already got -21?

Yep. This is due to -21 having modified libdb&apos;s internal environment structures which was need to fix the original issue of this bz. Since the older versions do not have the automatic rebuild mechanism libdb will fail when trying to access the new environment...

Also note that this will happen for everyone currently on -21 and not only those that hit the bug I described in comment 98.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10500158</commentid>
    <comment_count>107</comment_count>
    <who name="Panu Matilainen">pmatilai</who>
    <bug_when>2017-06-13 04:00:04 -0400</bug_when>
    <thetext>(In reply to Petr Kubat from comment #98)
&gt; Managed to reproduce the issue artificially by introducing a sleep()
&gt; directly after the part of dnf&apos;s code where the &quot;Complete!&quot; is printed out
&gt; and accessing the rpmdb from another process (rpm -qi libdb as root).
&gt; At this point it makes sense that the transaction lock is no longer taken by
&gt; rpm as the transaction has already gone through so the environment is
&gt; removed by the other process.

Okay, this makes perfect sense then: dnf post-transaction plugins run after the rpm transaction has finished, and any such plugin executing rpm will cause such problems. etckeeper is the one plugin I know that would match the pattern, but maybe there are others. At any rate, this explains why many people are not seeing problems but some are.

A dnf plugin executing rpm is just about as bad idea as running rpm queries from scriptlets, but changing that would require significant changes to etckeeper I suppose.

Anyway, since the remaining issue with -21 is now pretty well understood, my suggestion is that -22 is pulled out of circulation ASAP (and/or replaced with -23 that includes the patch from -21 again), reverting the patch will only cause even more trouble at this point.

The more productive approach might be banging all drums available to tell people to:
1) run the libdb -21 update in a transaction of its own, with --noplugins
2) if it crashes, keep calm and run rpm --rebuilddb
3) inform people about the known causes of problems (etckeeper-dnf at this point), most people will not experience any problems</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10500192</commentid>
    <comment_count>108</comment_count>
    <who name="Lukas Slebodnik">lslebodn</who>
    <bug_when>2017-06-13 04:10:08 -0400</bug_when>
    <thetext>(In reply to Panu Matilainen from comment #107)
&gt; The more productive approach might be banging all drums available to tell
&gt; people to:
&gt; 1) run the libdb -21 update in a transaction of its own, with --noplugins
&gt; 2) if it crashes, keep calm and run rpm --rebuilddb
&gt; 3) inform people about the known causes of problems (etckeeper-dnf at this
&gt; point), most people will not experience any problems
How do you want to achieve it. IIRC dnf does not have a way how to inform users before upgrade about important/breaking changes. Correct me If I am wrong.
Debian(apt) has such feature.

And I would say that most of fedora users does not follow fedora mailing lists before upgrade.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10500274</commentid>
    <comment_count>109</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-13 04:42:31 -0400</bug_when>
    <thetext>&gt;Anyway, since the remaining issue with -21 is now pretty well understood, my suggestion is that -22 is pulled out of circulation ASAP (and/or replaced with -23 that includes the patch from -21 again), reverting the patch will only cause even more trouble at this point.

Agreed. Doing a -23 makes more sense since I still need to incorporate the fix for https://bugzilla.redhat.com/show_bug.cgi?id=1460003 anyway.

&gt;And I would say that most of fedora users does not follow fedora mailing lists before upgrade.

True. But every user should be able to find information about the issue if it is hit, be it in Common bugs, one of the bugzillas, or the actual bodhi update, as long as it is properly documented.
We can also suggest the users to reboot (through the bodhi tool) which afaics also fixes the problem. But I am not sure what the result of marking the checkbox actually is since I have never had the need to use it...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10502027</commentid>
    <comment_count>110</comment_count>
    <who name="Adam Williamson">awilliam</who>
    <bug_when>2017-06-13 12:15:11 -0400</bug_when>
    <thetext>Panu: yup, that&apos;s pretty much what we agreed upon in another discussion. I&apos;ll be pulling the -22 updates and writing some blog posts etc. about this today. Sorry for all the confusion and ping-ponging, everyone.

Petr: I&apos;ll wait on you to do a -23, then, since you have that other fix to include.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10502939</commentid>
    <comment_count>111</comment_count>
    <who name="Dominik &apos;Rathann&apos; Mierzejewski">dominik</who>
    <bug_when>2017-06-13 19:29:43 -0400</bug_when>
    <thetext>It looks like the &quot;tracer&quot; dnf plugin is another trigger for this (in my case).

python3-dnf-plugins-extras-tracer-0.0.12-4.fc25.noarch
python3-tracer-0.6.12-4.fc25.noarch
tracer-common-0.6.12-4.fc25.noarch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10503913</commentid>
    <comment_count>112</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-14 03:06:15 -0400</bug_when>
    <thetext>&gt;It looks like the &quot;tracer&quot; dnf plugin is another trigger for this (in my case).

Dominik, thanks for the report!

I can confirm that the tracer dnf plugin does indeed trigger the issue some dnf users might be running into. Fortunately, once you rebuild the rpmdb after hitting the dnf-update crash you will unlikely run into any such issues again as libdb will just use its environment lock, which it holds until the environment is closed (= until after dnf plugins have run).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10518233</commentid>
    <comment_count>113</comment_count>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-19 08:46:43 -0400</bug_when>
    <thetext>Attaching a new set of patches (applied after the upstream patch):

db-5.3.28-condition-variable-ppc.patch
Fixes issues described in bug 1460003. The root problem of this bug was libdb not failing when only the modify timestamp of libpthread has been changed, e.g. when glibc is updated after having first installed libdb -21 build (as is the case in F24/25-&gt; F26 updates).
Unfortunately the issue is not fixed as easy as by forcing libdb to fail every time it encounters a libpthread timestamp change. Dnf accesses the rpmdb a few times during the update process after the glibc has updated (= timestamp changed) and if libdb were to fail in those situations the update process might not be completed successfully.
The best fix I could come up with is taking a look at libdb&apos;s lock on its environment and checking if the pid of the process holding the lock is the same as the pid of the current process as that ensures that the environment is accessed with the correct glibc library version loaded.
Afaik there is no easy way to do this check (for flock-style locks) so I have written a small parser that looks at /proc/locks and extracts the pid from there.

db-5.3.28-rpm-lock-check.patch
Since I have written a /proc/locks parser as part of the patch described above I have modified the check for rpm&apos;s transaction lock to use it as well (to at least avoid fd leaks the original patch had).
Also fixed a few issues with the original patch (properly unlock the environment when not able to get the rpm lock, return success when the rpm lock file does not exist).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10518246</commentid>
    <comment_count>114</comment_count>
      <attachid>1289098</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-19 08:47:49 -0400</bug_when>
    <thetext>Created attachment 1289098
Cond var ppc fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10518248</commentid>
    <comment_count>115</comment_count>
      <attachid>1289099</attachid>
    <who name="Petr Kubat">pkubat</who>
    <bug_when>2017-06-19 08:48:34 -0400</bug_when>
    <thetext>Created attachment 1289099
rpm lock check patch v4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10543056</commentid>
    <comment_count>116</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-27 03:33:21 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc26 has been submitted as an update to Fedora 26. https://bodhi.fedoraproject.org/updates/FEDORA-2017-2b68e14594</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10545182</commentid>
    <comment_count>117</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-27 13:21:23 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc24 has been pushed to the Fedora 24 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-014d67fa9d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10545209</commentid>
    <comment_count>118</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-27 13:26:46 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc25 has been pushed to the Fedora 25 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-372bb1edb3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10545671</commentid>
    <comment_count>119</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-06-27 16:26:18 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc26 has been pushed to the Fedora 26 testing repository. If problems still persist, please make note of it in this bug report.
See https://fedoraproject.org/wiki/QA:Updates_Testing for
instructions on how to install test updates.
You can provide feedback for this update here: https://bodhi.fedoraproject.org/updates/FEDORA-2017-2b68e14594</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10575998</commentid>
    <comment_count>120</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-07-07 19:00:28 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc26 has been pushed to the Fedora 26 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10585055</commentid>
    <comment_count>121</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-07-11 21:50:18 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc24 has been pushed to the Fedora 24 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>10585236</commentid>
    <comment_count>122</comment_count>
    <who name="Fedora Update System">updates</who>
    <bug_when>2017-07-11 23:21:51 -0400</bug_when>
    <thetext>libdb-5.3.28-24.fc25 has been pushed to the Fedora 25 stable repository. If problems still persist, please make note of it in this bug report.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1279226</attachid>
            <date>2017-05-16 04:07:00 -0400</date>
            <delta_ts>2017-05-16 04:07:23 -0400</delta_ts>
            <desc>upstream patch</desc>
            <filename>25884.patch</filename>
            <type>text/plain</type>
            <size>31683</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">IyBIRyBjaGFuZ2VzZXQgcGF0Y2gKIyBQYXJlbnQgMmVmNDYzZTY1N2U2NTY0Yzk3OTJkNDk5YmJh
YWEwOWE5Y2M4YTAwNAoKZGlmZiAtciBkYjc4ZGEwOTk2YjEgZGlzdC9hbmRyb2lkL2FuZHJvaWRf
Y29uZmlnLmluCi0tLSBhL2Rpc3QvYW5kcm9pZC9hbmRyb2lkX2NvbmZpZy5pbglNb24gU2VwIDA5
IDExOjA5OjM1IDIwMTMgLTA0MDAKKysrIGIvZGlzdC9hbmRyb2lkL2FuZHJvaWRfY29uZmlnLmlu
CVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAxNyAtMDcwMApAQCAtMTIzLDYgKzEyMyw5IEBACiAvKiBE
ZWZpbmUgdG8gMSBpZiBhbGxvY2F0ZWQgZmlsZXN5c3RlbSBibG9ja3MgYXJlIG5vdCB6ZXJvZWQu
ICovCiAvKiAjdW5kZWYgSEFWRV9GSUxFU1lTVEVNX05PVFpFUk8gKi8KIAorLyogRGVmaW5lIHRv
IDEgaWYgeW91IGhhdmUgdGhlIGBmbG9jaycgZnVuY3Rpb24uICovCisjdW5kZWYgSEFWRV9GTE9D
SworCiAvKiBEZWZpbmUgdG8gMSBpZiB5b3UgaGF2ZSB0aGUgYGZvcGVuJyBmdW5jdGlvbi4gKi8K
ICNkZWZpbmUgSEFWRV9GT1BFTiAxCiAKZGlmZiAtciBkYjc4ZGEwOTk2YjEgZGlzdC9jb25maWcu
aGluCi0tLSBhL2Rpc3QvY29uZmlnLmhpbglNb24gU2VwIDA5IDExOjA5OjM1IDIwMTMgLTA0MDAK
KysrIGIvZGlzdC9jb25maWcuaGluCVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAxNyAtMDcwMApAQCAt
OTIsNiArOTIsOSBAQAogLyogRGVmaW5lIHRvIDEgaWYgeW91IGhhdmUgdGhlIDxkbGZjbi5oPiBo
ZWFkZXIgZmlsZS4gKi8KICN1bmRlZiBIQVZFX0RMRkNOX0gKIAorLyogRGVmaW5lIHRvIDEgaWYg
eW91IGhhdmUgdGhlIGBkbF9pdGVyYXRlX3BoZHInIGZ1bmN0aW9uLiAqLworI3VuZGVmIEhBVkVf
RExfSVRFUkFURV9QSERSCisKIC8qIERlZmluZSB0byAxIHRvIHVzZSBkdHJhY2UgZm9yIHBlcmZv
cm1hbmNlIG1vbml0b3JpbmcuICovCiAjdW5kZWYgSEFWRV9EVFJBQ0UKIApAQCAtMTI1LDYgKzEy
OCw5IEBACiAvKiBEZWZpbmUgdG8gMSBpZiBhbGxvY2F0ZWQgZmlsZXN5c3RlbSBibG9ja3MgYXJl
IG5vdCB6ZXJvZWQuICovCiAjdW5kZWYgSEFWRV9GSUxFU1lTVEVNX05PVFpFUk8KIAorLyogRGVm
aW5lIHRvIDEgaWYgeW91IGhhdmUgdGhlIGBmbG9jaycgZnVuY3Rpb24uICovCisjdW5kZWYgSEFW
RV9GTE9DSworCiAvKiBEZWZpbmUgdG8gMSBpZiB5b3UgaGF2ZSB0aGUgYGZvcGVuJyBmdW5jdGlv
bi4gKi8KICN1bmRlZiBIQVZFX0ZPUEVOCiAKQEAgLTM2MCw2ICszNjYsOSBAQAogLyogRGVmaW5l
IHRvIDEgaWYgeW91IGhhdmUgdGhlIGBwc3RhdF9nZXRkeW5hbWljJyBmdW5jdGlvbi4gKi8KICN1
bmRlZiBIQVZFX1BTVEFUX0dFVERZTkFNSUMKIAorLyogRGVmaW5lIHRvIDEgaWYgeW91IGhhdmUg
ZGxfaXRlcmF0ZV9waGRyIGFuZCB1c2UgcHRocmVhZC1iYXNlZCBtdXRleGVzLiAqLworI3VuZGVm
IEhBVkVfUFRIUkVBRFNfVElNRVNUQU1QCisKIC8qIERlZmluZSB0byAxIGlmIGl0IGlzIE9LIHRv
IGluaXRpYWxpemUgYW4gYWxyZWFkeSBpbml0aWFsaXplZAogICAgcHRocmVhZF9jb25kX3QuICov
CiAjdW5kZWYgSEFWRV9QVEhSRUFEX0NPTkRfUkVJTklUX09LQVkKZGlmZiAtciBkYjc4ZGEwOTk2
YjEgZGlzdC9jb25maWd1cmUKLS0tIGEvZGlzdC9jb25maWd1cmUJTW9uIFNlcCAwOSAxMTowOToz
NSAyMDEzIC0wNDAwCisrKyBiL2Rpc3QvY29uZmlndXJlCVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAx
NyAtMDcwMApAQCAtMjMzNjgsNyArMjMzNjgsNyBAQAogIyBDaGVjayBmb3Igc3lzdGVtIGZ1bmN0
aW9ucyB3ZSBvcHRpb25hbGx5IHVzZS4KIGZvciBhY19mdW5jIGluIFwKIAlfZnN0YXRpNjQgYmFj
a3RyYWNlIGJhY2t0cmFjZV9zeW1ib2xzIGRpcmVjdGlvIGZjaG1vZCBmY2xvc2VcCi0JZmNudGwg
ZmRhdGFzeW5jIGZnZXRjIGZnZXRzIGZvcGVuIGZ3cml0ZSBnZXRnaWRcCisJZmNudGwgZmRhdGFz
eW5jIGZnZXRjIGZnZXRzIGZsb2NrIGZvcGVuIGZ3cml0ZSBnZXRnaWRcCiAJZ2V0cnVzYWdlIGdl
dHVpZCBoc3RyZXJyb3IgbXByb3RlY3QgcHN0YXRfZ2V0ZHluYW1pY1wKIAlwdGhyZWFkX3NlbGYg
cHRocmVhZF95aWVsZCByYW5kb20gc2NoZWRfeWllbGQgc2VsZWN0IHNldGdpZCBzZXR1aWRcCiAJ
c2lnYWN0aW9uIHNucHJpbnRmIHN0YXQgc3lzY29uZiB2c25wcmludGYgeWllbGQKQEAgLTI0NjY4
LDYgKzI0NjY4LDU5IEBACiAKIGZpCiAKKyMgQ2hlY2sgZm9yIGRsX2l0ZXJhdGVfcGhkcjsgZG8g
dGhlIHRlc3QgZXhwbGljaXRseSBpbnN0ZWFkIG9mIHVzaW5nCisjIEFDX0NIRUNLX0ZVTkNTIGJl
Y2F1c2UgPG5ldGRiLmg+IGlzbid0IGEgc3RhbmRhcmQgaW5jbHVkZSBmaWxlLgoreyAkYXNfZWNo
byAiJGFzX21lOiR7YXNfbGluZW5vLSRMSU5FTk99OiBjaGVja2luZyBmb3IgZGxfaXRlcmF0ZV9w
aGRyIiA+JjUKKyRhc19lY2hvX24gImNoZWNraW5nIGZvciBkbF9pdGVyYXRlX3BoZHIuLi4gIiA+
JjY7IH0KK2lmICR7ZGJfY3ZfZGxfaXRlcmF0ZV9waGRyKzp9IGZhbHNlOyB0aGVuIDoKKyAgJGFz
X2VjaG9fbiAiKGNhY2hlZCkgIiA+JjYKK2Vsc2UKKworY2F0IGNvbmZkZWZzLmggLSA8PF9BQ0VP
RiA+Y29uZnRlc3QuJGFjX2V4dAorLyogZW5kIGNvbmZkZWZzLmguICAqLworCisjaW5jbHVkZSA8
c3lzL3R5cGVzLmg+CisjaW5jbHVkZSA8bmV0ZGIuaD4KK2ludAorbWFpbiAoKQoreworCisJZGxf
aXRlcmF0ZV9waGRyKDAsIDApOworCisgIDsKKyAgcmV0dXJuIDA7Cit9CitfQUNFT0YKK2lmIGFj
X2ZuX2NfdHJ5X2xpbmsgIiRMSU5FTk8iOyB0aGVuIDoKKyAgZGJfY3ZfZGxfaXRlcmF0ZV9waGRy
PXllcworZWxzZQorICBkYl9jdl9kbF9pdGVyYXRlX3BoZHI9bm8KK2ZpCitybSAtZiBjb3JlIGNv
bmZ0ZXN0LmVyciBjb25mdGVzdC4kYWNfb2JqZXh0IFwKKyAgICBjb25mdGVzdCRhY19leGVleHQg
Y29uZnRlc3QuJGFjX2V4dAorZmkKK3sgJGFzX2VjaG8gIiRhc19tZToke2FzX2xpbmVuby0kTElO
RU5PfTogcmVzdWx0OiAkZGJfY3ZfZGxfaXRlcmF0ZV9waGRyIiA+JjUKKyRhc19lY2hvICIkZGJf
Y3ZfZGxfaXRlcmF0ZV9waGRyIiA+JjY7IH0KK2lmIHRlc3QgIiRkYl9jdl9kbF9pdGVyYXRlX3Bo
ZHIiID0gInllcyI7IHRoZW4KKwkkYXNfZWNobyAiI2RlZmluZSBIQVZFX0RMX0lURVJBVEVfUEhE
UiAxIiA+PmNvbmZkZWZzLmgKKworCitmaQorCisjIElmIHdlIGFyZSB1c2luZyBwdGhyZWFkIG11
dGV4IG9yIGNvbmRpdGlvbiB2YXJpYWJsZXMsIGFuZCBkbF9pdGVyYXRlX3BoZHIoKSBpcworIyBh
dmFpbGFibGUsIHRoZW4gd2UgdHJ5IHRvIGRldGVjdCB3aGVuIGxpYnB0aHJlYWQgaXMgdXBkYXRl
ZCAtLSB3aGljaCBjYW4KKyMgcmVuZGVyIGV4aXN0aW5nIGVudmlyb25tZW50IGludmFsaWQuICAg
REJfRU5WLT5vcGVuKCkgdHJpZXMgdG8gcmVidWlsZCBzdWNoCisjIGVudmlyb25tZW50cyB3aGVu
IHRoZXkgYXJlIGlkbGUuCitjYXNlICIkZGJfY3ZfbXV0ZXgiIGluCisgICAgKnB0aHJlYWRzKikK
KyAgICBpZiB0ZXN0ICIkZGJfY3ZfZGxfaXRlcmF0ZV9waGRyIiA9ICJ5ZXMiIDsgdGhlbgorCSRh
c19lY2hvICIjZGVmaW5lIEhBVkVfUFRIUkVBRFNfVElNRVNUQU1QIDEiID4+Y29uZmRlZnMuaAor
CisKKyAgICBmaQorICAgIDs7Citlc2FjCisKICMgV2UgbmVlZCB0byBhZGQgdGhlIGFkZGl0aW9u
YWwgb2JqZWN0IGZpbGVzIGludG8gdGhlIE1ha2VmaWxlIHdpdGggdGhlIGNvcnJlY3QKICMgc3Vm
Zml4LiAgV2UgY2FuJ3QgdXNlICRMVExJQk9CSlMgaXRzZWxmLCBiZWNhdXNlIHRoYXQgdmFyaWFi
bGUgaGFzICRVIGVuY29kZWQKICMgaW4gaXQgZm9yIGF1dG9tYWtlLCBhbmQgdGhhdCdzIG5vdCB3
aGF0IHdlIHdhbnQuICBTZWUgU1IgIzcyMjcgZm9yIGFkZGl0aW9uYWwKZGlmZiAtciBkYjc4ZGEw
OTk2YjEgZGlzdC9jb25maWd1cmUuYWMKLS0tIGEvZGlzdC9jb25maWd1cmUuYWMJTW9uIFNlcCAw
OSAxMTowOTozNSAyMDEzIC0wNDAwCisrKyBiL2Rpc3QvY29uZmlndXJlLmFjCVNhdCBBcHIgMjkg
MDQ6MTA6MTggMjAxNyAtMDcwMApAQCAtNjk4LDcgKzY5OCw3IEBACiAjIENoZWNrIGZvciBzeXN0
ZW0gZnVuY3Rpb25zIHdlIG9wdGlvbmFsbHkgdXNlLgogQUNfQ0hFQ0tfRlVOQ1MoXAogCV9mc3Rh
dGk2NCBiYWNrdHJhY2UgYmFja3RyYWNlX3N5bWJvbHMgZGlyZWN0aW8gZmNobW9kIGZjbG9zZVwK
LQlmY250bCBmZGF0YXN5bmMgZmdldGMgZmdldHMgZm9wZW4gZndyaXRlIGdldGdpZFwKKwlmY250
bCBmZGF0YXN5bmMgZmdldGMgZmdldHMgZmxvY2sgZm9wZW4gZndyaXRlIGdldGdpZFwKIAlnZXRy
dXNhZ2UgZ2V0dWlkIGhzdHJlcnJvciBtcHJvdGVjdCBwc3RhdF9nZXRkeW5hbWljXAogCXB0aHJl
YWRfc2VsZiBwdGhyZWFkX3lpZWxkIHJhbmRvbSBzY2hlZF95aWVsZCBzZWxlY3Qgc2V0Z2lkIHNl
dHVpZFwKIAlzaWdhY3Rpb24gc25wcmludGYgc3RhdCBzeXNjb25mIHZzbnByaW50ZiB5aWVsZCkK
QEAgLTEwNDIsNiArMTA0MiwzNCBAQAogW0RlZmluZSB0byAxIGlmIHlvdSBoYXZlIGxvY2FsaXph
dGlvbiBmdW5jdGlvbiB0byBzdXBwb3J0IGdsb2JhbGl6YXRpb24uXSkKIGZpCiAKKyMgQ2hlY2sg
Zm9yIGRsX2l0ZXJhdGVfcGhkcjsgZG8gdGhlIHRlc3QgZXhwbGljaXRseSBpbnN0ZWFkIG9mIHVz
aW5nCisjIEFDX0NIRUNLX0ZVTkNTIGJlY2F1c2UgPG5ldGRiLmg+IGlzbid0IGEgc3RhbmRhcmQg
aW5jbHVkZSBmaWxlLgorQUNfQ0FDSEVfQ0hFQ0soW2ZvciBkbF9pdGVyYXRlX3BoZHJdLCBkYl9j
dl9kbF9pdGVyYXRlX3BoZHIsIFsKK0FDX1RSWV9MSU5LKFsKKyNpbmNsdWRlIDxzeXMvdHlwZXMu
aD4KKyNpbmNsdWRlIDxuZXRkYi5oPl0sIFsKKwlkbF9pdGVyYXRlX3BoZHIoMCwgMCk7CitdLCBb
ZGJfY3ZfZGxfaXRlcmF0ZV9waGRyPXllc10sIFtkYl9jdl9kbF9pdGVyYXRlX3BoZHI9bm9dKV0p
CitpZiB0ZXN0ICIkZGJfY3ZfZGxfaXRlcmF0ZV9waGRyIiA9ICJ5ZXMiOyB0aGVuCisJQUNfREVG
SU5FKEhBVkVfRExfSVRFUkFURV9QSERSKQorCUFIX1RFTVBMQVRFKEhBVkVfRExfSVRFUkFURV9Q
SERSLAorCSAgICBbRGVmaW5lIHRvIDEgaWYgeW91IGhhdmUgdGhlIGBkbF9pdGVyYXRlX3BoZHIn
IGZ1bmN0aW9uLl0pCitmaQorIAorIyBJZiB3ZSBhcmUgdXNpbmcgcHRocmVhZCBtdXRleCBvciBj
b25kaXRpb24gdmFyaWFibGVzLCBhbmQgZGxfaXRlcmF0ZV9waGRyKCkgaXMgCisjIGF2YWlsYWJs
ZSwgdGhlbiB3ZSB0cnkgdG8gZGV0ZWN0IHdoZW4gbGlicHRocmVhZCBpcyB1cGRhdGVkIC0tIHdo
aWNoIGNhbgorIyByZW5kZXIgZXhpc3RpbmcgZW52aXJvbm1lbnQgaW52YWxpZC4gICBEQl9FTlYt
Pm9wZW4oKSB0cmllcyB0byByZWJ1aWxkIHN1Y2gKKyMgZW52aXJvbm1lbnRzIHdoZW4gdGhleSBh
cmUgaWRsZS4KK2Nhc2UgIiRkYl9jdl9tdXRleCIgaW4KKyAgICAqcHRocmVhZHMqKQorICAgIGlm
IHRlc3QgIiRkYl9jdl9kbF9pdGVyYXRlX3BoZHIiID0gInllcyIgOyB0aGVuCisJQUNfREVGSU5F
KEhBVkVfUFRIUkVBRFNfVElNRVNUQU1QKQorCUFIX1RFTVBMQVRFKEhBVkVfUFRIUkVBRFNfVElN
RVNUQU1QLAorICAgICBbRGVmaW5lIHRvIDEgaWYgeW91IGhhdmUgZGxfaXRlcmF0ZV9waGRyIGFu
ZCB1c2UgcHRocmVhZC1iYXNlZCBtdXRleGVzLl0pCisgICAgZmkKKyAgICA7OworZXNhYworCiAj
IFdlIG5lZWQgdG8gYWRkIHRoZSBhZGRpdGlvbmFsIG9iamVjdCBmaWxlcyBpbnRvIHRoZSBNYWtl
ZmlsZSB3aXRoIHRoZSBjb3JyZWN0CiAjIHN1ZmZpeC4gIFdlIGNhbid0IHVzZSAkTFRMSUJPQkpT
IGl0c2VsZiwgYmVjYXVzZSB0aGF0IHZhcmlhYmxlIGhhcyAkVSBlbmNvZGVkCiAjIGluIGl0IGZv
ciBhdXRvbWFrZSwgYW5kIHRoYXQncyBub3Qgd2hhdCB3ZSB3YW50LiAgU2VlIFNSICM3MjI3IGZv
ciBhZGRpdGlvbmFsCmRpZmYgLXIgZGI3OGRhMDk5NmIxIHNyYy9kYi9kYl9tZXRhLmMKLS0tIGEv
c3JjL2RiL2RiX21ldGEuYwlNb24gU2VwIDA5IDExOjA5OjM1IDIwMTMgLTA0MDAKKysrIGIvc3Jj
L2RiL2RiX21ldGEuYwlTYXQgQXByIDI5IDA0OjEwOjE4IDIwMTcgLTA3MDAKQEAgLTEzMzAsOCAr
MTMzMCw5IEBACiB9CiAvKgogICogX19kYl9oYXNfcGFnZWxvY2sgLS0KLSAqCURldGVybWluZSBp
ZiB0aGlzIGxvY2tlciBob2xkcyBhIHBhcnRpY3VsYXIgcGFnZSBsb2NrLgotICoJUmV0dXJucyAw
IGlmIGxvY2sgaXMgaGVsZCwgbm9uLXplcm8gb3RoZXJ3aXNlLgorICoJRGV0ZXJtaW5lIGlmIHRo
aXMgbG9ja2VyIGhvbGRzIGEgcGFydGljdWxhciBwYWdlIGxvY2ssIGFuZCByZXR1cm4gYW4KKyAq
CWVycm9yIGlmIGl0IGlzIG1pc3NpbmcgYSBwYWdlIGxvY2sgdGhhdCBpdCBzaG91bGQgaGF2ZS4K
KyAqCU90aGVyd2lzZSAoVERTIHdpdGggdGhlIHBhZ2UgbG9ja2VkLCBvciBEUyBvciBDRFMpIHJl
dHVybiAwLgogICoKICAqIFBVQkxJQzogI2lmZGVmIERJQUdOT1NUSUMKICAqIFBVQkxJQzogaW50
IF9fZGJfaGFzX3BhZ2Vsb2NrIF9fUCgoRU5WICosIERCX0xPQ0tFUiAqLApAQCAtMTM0OCw2ICsx
MzQ5LDkgQEAKIHsKIAlpbnQgcmV0OwogCisJaWYgKCFGTERfSVNTRVQoZW52LT5vcGVuX2ZsYWdz
LCBEQl9JTklUX1RYTikpCisJCXJldHVybiAoMCk7CisKIAlzd2l0Y2ggKHBhZ2VwLT50eXBlKSB7
CiAJY2FzZSBQX09WRVJGTE9XOgogCWNhc2UgUF9JTlZBTElEOgpkaWZmIC1yIGRiNzhkYTA5OTZi
MSBzcmMvZGJpbmMvYXRvbWljLmgKLS0tIGEvc3JjL2RiaW5jL2F0b21pYy5oCU1vbiBTZXAgMDkg
MTE6MDk6MzUgMjAxMyAtMDQwMAorKysgYi9zcmMvZGJpbmMvYXRvbWljLmgJU2F0IEFwciAyOSAw
NDoxMDoxOCAyMDE3IC0wNzAwCkBAIC0xNDQsNyArMTQ0LDcgQEAKICNkZWZpbmUJYXRvbWljX2lu
YyhlbnYsIHApCV9fYXRvbWljX2luYyhwKQogI2RlZmluZQlhdG9taWNfZGVjKGVudiwgcCkJX19h
dG9taWNfZGVjKHApCiAjZGVmaW5lCWF0b21pY19jb21wYXJlX2V4Y2hhbmdlKGVudiwgcCwgbywg
bikJXAotCV9fYXRvbWljX2NvbXBhcmVfZXhjaGFuZ2UoKHApLCAobyksIChuKSkKKwlfX2RiX2F0
b21pY19jb21wYXJlX2V4Y2hhbmdlKChwKSwgKG8pLCAobikpCiBzdGF0aWMgaW5saW5lIGludCBf
X2F0b21pY19pbmMoZGJfYXRvbWljX3QgKnApCiB7CiAJaW50CXRlbXA7CkBAIC0xNzYsNyArMTc2
LDcgQEAKICAqIGh0dHA6Ly9nY2MuZ251Lm9yZy9vbmxpbmVkb2NzL2djYy00LjEuMC9nY2MvQXRv
bWljLUJ1aWx0aW5zLmh0bWwKICAqIHdoaWNoIGNvbmZpZ3VyZSBjb3VsZCBiZSBjaGFuZ2VkIHRv
IHVzZS4KICAqLwotc3RhdGljIGlubGluZSBpbnQgX19hdG9taWNfY29tcGFyZV9leGNoYW5nZSgK
K3N0YXRpYyBpbmxpbmUgaW50IF9fZGJfYXRvbWljX2NvbXBhcmVfZXhjaGFuZ2UoCiAJZGJfYXRv
bWljX3QgKnAsIGF0b21pY192YWx1ZV90IG9sZHZhbCwgYXRvbWljX3ZhbHVlX3QgbmV3dmFsKQog
ewogCWF0b21pY192YWx1ZV90IHdhczsKZGlmZiAtciBkYjc4ZGEwOTk2YjEgc3JjL2RiaW5jL2Ri
X2ludC5pbgotLS0gYS9zcmMvZGJpbmMvZGJfaW50LmluCU1vbiBTZXAgMDkgMTE6MDk6MzUgMjAx
MyAtMDQwMAorKysgYi9zcmMvZGJpbmMvZGJfaW50LmluCVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAx
NyAtMDcwMApAQCAtNzkyLDcgKzc5Miw3IEBACiAKIAlwaWRfdAlwaWRfY2FjaGU7CQkvKiBDYWNo
ZWQgcHJvY2VzcyBJRCAqLwogCi0JREJfRkgJKmxvY2tmaHA7CQkvKiBmY250bCgyKSBsb2NraW5n
IGZpbGUgaGFuZGxlICovCisJREJfRkgJKnByaW1hcnlfZmhwOwkJLyogZmNudGwoMikgbG9ja2lu
ZyBvbiBfX2RiLjAwMSAqLwogCiAJREJfTE9DS0VSICplbnZfbHJlZjsJCS8qIExvY2tlciBpbiBu
b24tdGhyZWFkZWQgaGFuZGxlcyAqLwogCmRpZmYgLXIgZGI3OGRhMDk5NmIxIHNyYy9kYmluYy9y
ZWdpb24uaAotLS0gYS9zcmMvZGJpbmMvcmVnaW9uLmgJTW9uIFNlcCAwOSAxMTowOTozNSAyMDEz
IC0wNDAwCisrKyBiL3NyYy9kYmluYy9yZWdpb24uaAlTYXQgQXByIDI5IDA0OjEwOjE4IDIwMTcg
LTA3MDAKQEAgLTE3OCw2ICsxNzgsMTYgQEAKIAl1X2ludDMyX3QgZW52aWQ7CQkvKiBVbmlxdWUg
ZW52aXJvbm1lbnQgSUQuICovCiAKIAl1X2ludDMyX3Qgc2lnbmF0dXJlOwkJLyogU3RydWN0dXJl
IHNpZ25hdHVyZXMuICovCisjaWYgZGVmaW5lZChIQVZFX1BUSFJFQURTX1RJTUVTVEFNUCkgJiYg
ZGVmaW5lZChIQVZFX01VVEVYX1BUSFJFQURTKQorCS8qCisJICogVXBkYXRlcyB0byBnbGliYy9s
aWJwdGhyZWFkIGNhbiBjaGFuZ2UgaXRzIHB0aHJlYWRzIGltcGxlbWVudGF0aW9uCisJICogYW5k
IGludmFsaWRhdGUgb24tZGlzayBlbnZpcm9ubWVudHMsIGV2ZW4gd2l0aG91dCBjaGFuZ2luZyB0
aGUKKwkgKiB2ZXJzaW9uIG51bWJlci4gIElmIHVzaW5nIFBPU0lYIG11dGV4ZXMgYW5kIGEgY2hh
bmdlIGluIHRoaXMKKwkgKiB0aW1lc3RhbXAgaXMgZGV0ZWN0aW5nIHdoZW4gb3BlbmluZyBhbiBl
bnZpcm9ubWVudCB3aXRoIERCX0NSRUFURSwKKwkgKiAgX19lbnZfYXR0YWNoIHJlY3JlYXRlcyBh
bnkgZXhpc3Rpbmcgb24tZGlzayBlbnZpcm9ubWVudC4KKwkgKi8KKwl0aW1lX3QgcHRocmVhZHNf
dGltZXN0YW1wOworI2VuZGlmCiAKIAl0aW1lX3QJICB0aW1lc3RhbXA7CQkvKiBDcmVhdGlvbiB0
aW1lLiAqLwogCmRpZmYgLXIgZGI3OGRhMDk5NmIxIHNyYy9kYmluY19hdXRvL2ludF9kZWYuaW4K
LS0tIGEvc3JjL2RiaW5jX2F1dG8vaW50X2RlZi5pbglNb24gU2VwIDA5IDExOjA5OjM1IDIwMTMg
LTA0MDAKKysrIGIvc3JjL2RiaW5jX2F1dG8vaW50X2RlZi5pbglTYXQgQXByIDI5IDA0OjEwOjE4
IDIwMTcgLTA3MDAKQEAgLTE1NDIsNiArMTU0Miw3IEBACiAjaWYgZGVmaW5lZChIQVZFX1JFUExJ
Q0FUSU9OX1RIUkVBRFMpCiAjZGVmaW5lCV9fb3NfZnJlZWFkZHJpbmZvIF9fb3NfZnJlZWFkZHJp
bmZvQERCX1ZFUlNJT05fVU5JUVVFX05BTUVACiAjZW5kaWYKKyNkZWZpbmUJX19vc19wdGhyZWFk
c190aW1lc3RhbXAgX19vc19wdGhyZWFkc190aW1lc3RhbXBAREJfVkVSU0lPTl9VTklRVUVfTkFN
RUAKICNkZWZpbmUJX19vc191bWFsbG9jIF9fb3NfdW1hbGxvY0BEQl9WRVJTSU9OX1VOSVFVRV9O
QU1FQAogI2RlZmluZQlfX29zX3VyZWFsbG9jIF9fb3NfdXJlYWxsb2NAREJfVkVSU0lPTl9VTklR
VUVfTkFNRUAKICNkZWZpbmUJX19vc191ZnJlZSBfX29zX3VmcmVlQERCX1ZFUlNJT05fVU5JUVVF
X05BTUVACmRpZmYgLXIgZGI3OGRhMDk5NmIxIHNyYy9kYmluY19hdXRvL29zX2V4dC5oCi0tLSBh
L3NyYy9kYmluY19hdXRvL29zX2V4dC5oCU1vbiBTZXAgMDkgMTE6MDk6MzUgMjAxMyAtMDQwMAor
KysgYi9zcmMvZGJpbmNfYXV0by9vc19leHQuaAlTYXQgQXByIDI5IDA0OjEwOjE4IDIwMTcgLTA3
MDAKQEAgLTE0LDYgKzE0LDcgQEAKICNpZiBkZWZpbmVkKEhBVkVfUkVQTElDQVRJT05fVEhSRUFE
UykKIHZvaWQgX19vc19mcmVlYWRkcmluZm8gX19QKChFTlYgKiwgQUREUklORk8gKikpOwogI2Vu
ZGlmCit0aW1lX3QgX19vc19wdGhyZWFkc190aW1lc3RhbXAgX19QKChFTlYgKikpOwogaW50IF9f
b3NfdW1hbGxvYyBfX1AoKEVOViAqLCBzaXplX3QsIHZvaWQgKikpOwogaW50IF9fb3NfdXJlYWxs
b2MgX19QKChFTlYgKiwgc2l6ZV90LCB2b2lkICopKTsKIHZvaWQgX19vc191ZnJlZSBfX1AoKEVO
ViAqLCB2b2lkICopKTsKQEAgLTQwLDcgKzQxLDcgQEAKIGNoYXIgKl9fb3Nfc3RyZXJyb3IgX19Q
KChpbnQsIGNoYXIgKiwgc2l6ZV90KSk7CiBpbnQgX19vc19wb3NpeF9lcnIgX19QKChpbnQpKTsK
IGludCBfX29zX2ZpbGVpZCBfX1AoKEVOViAqLCBjb25zdCBjaGFyICosIGludCwgdV9pbnQ4X3Qg
KikpOwotaW50IF9fb3NfZmRsb2NrIF9fUCgoRU5WICosIERCX0ZIICosIG9mZl90LCBpbnQsIGlu
dCkpOworaW50IF9fb3NfZmRsb2NrIF9fUCgoRU5WICosIERCX0ZIICosIG9mZl90LCBkYl9sb2Nr
bW9kZV90LCBpbnQpKTsKIGludCBfX29zX2ZzeW5jIF9fUCgoRU5WICosIERCX0ZIICopKTsKIGlu
dCBfX29zX2dldGVudiBfX1AoKEVOViAqLCBjb25zdCBjaGFyICosIGNoYXIgKiosIHNpemVfdCkp
OwogaW50IF9fb3Nfb3BlbmhhbmRsZSBfX1AoKEVOViAqLCBjb25zdCBjaGFyICosIGludCwgaW50
LCBEQl9GSCAqKikpOwpkaWZmIC1yIGRiNzhkYTA5OTZiMSBzcmMvZW52L2Vudl9vcGVuLmMKLS0t
IGEvc3JjL2Vudi9lbnZfb3Blbi5jCU1vbiBTZXAgMDkgMTE6MDk6MzUgMjAxMyAtMDQwMAorKysg
Yi9zcmMvZW52L2Vudl9vcGVuLmMJU2F0IEFwciAyOSAwNDoxMDoxOCAyMDE3IC0wNzAwCkBAIC05
MzcsNiArOTM3LDggQEAKIHsKIAlEQl9GSCAqZmhwOwogCisJaWYgKGVudi0+cHJpbWFyeV9maHAg
IT0gTlVMTCkKKwkJZW52LT5wcmltYXJ5X2ZocCA9IE5VTEw7CiAJaWYgKFRBSUxRX0ZJUlNUKCZl
bnYtPmZkbGlzdCkgPT0gTlVMTCkKIAkJcmV0dXJuICgwKTsKIApAQCAtMTAzMSwxMSArMTAzMywx
MSBAQAogCQlnb3RvIGVycjsKIAogCS8qCi0JICogX19lbnZfYXR0YWNoIHdpbGwgcmV0dXJuIHRo
ZSBzYXZlZCBpbml0X2ZsYWdzIGZpZWxkLCB3aGljaCBjb250YWlucworCSAqIF9fZW52X2F0dGFj
aCBoYXMgcmV0dXJuZWQgdGhlIHNhdmVkIGluaXRfZmxhZ3MgZmllbGQsIHdoaWNoIGNvbnRhaW5z
CiAJICogdGhlIERCX0lOSVRfKiBmbGFncyB1c2VkIHdoZW4gdGhlIGVudmlyb25tZW50IHdhcyBj
cmVhdGVkLgogCSAqCi0JICogV2UgbWF5IGJlIGpvaW5pbmcgYW4gZW52aXJvbm1lbnQgLS0gcmVz
ZXQgb3VyIGZsYWdzIHRvIG1hdGNoIHRoZQotCSAqIG9uZXMgaW4gdGhlIGVudmlyb25tZW50Lgor
CSAqIFdlIG1heSBiZSBqb2luaW5nIGFuIGV4aXN0aW5nIGVudmlyb25tZW50IC0tIHJlc2V0IG91
ciBmbGFncyB0byBtYXRjaAorCSAqIHRoZSBvbmVzIGluIHRoZSBlbnZpcm9ubWVudC4KIAkgKi8K
IAlpZiAoRkxEX0lTU0VUKGluaXRfZmxhZ3MsIERCX0lOSVRFTlZfQ0RCKSkKIAkJTEZfU0VUKERC
X0lOSVRfQ0RCKTsKZGlmZiAtciBkYjc4ZGEwOTk2YjEgc3JjL2Vudi9lbnZfcmVnaW9uLmMKLS0t
IGEvc3JjL2Vudi9lbnZfcmVnaW9uLmMJTW9uIFNlcCAwOSAxMTowOTozNSAyMDEzIC0wNDAwCisr
KyBiL3NyYy9lbnYvZW52X3JlZ2lvbi5jCVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAxNyAtMDcwMApA
QCAtMTQsMTcgKzE0LDU0IEBACiAjaW5jbHVkZSAiZGJpbmMvbG9nLmgiCiAjaW5jbHVkZSAiZGJp
bmMvdHhuLmgiCiAKKyNkZWZpbmUgc3RhdGljIAogc3RhdGljIGludCAgX19lbnZfZGVzX2dldCBf
X1AoKEVOViAqLCBSRUdJTkZPICosIFJFR0lORk8gKiwgUkVHSU9OICoqKSk7CiBzdGF0aWMgaW50
ICBfX2Vudl9mYXVsdG1lbSBfX1AoKEVOViAqLCB2b2lkICosIHNpemVfdCwgaW50KSk7CiBzdGF0
aWMgaW50ICBfX2Vudl9zeXNfYXR0YWNoIF9fUCgoRU5WICosIFJFR0lORk8gKiwgUkVHSU9OICop
KTsKIHN0YXRpYyBpbnQgIF9fZW52X3N5c19kZXRhY2ggX19QKChFTlYgKiwgUkVHSU5GTyAqLCBp
bnQpKTsKK3N0YXRpYyBpbnQgIF9fZW52X2NoZWNrX3JlY3JlYXRlIF9fUCgoRU5WICosIFJFR0VO
ViAqLCB1X2ludDMyX3QpKTsKIHN0YXRpYyB2b2lkIF9fZW52X2Rlc19kZXN0cm95IF9fUCgoRU5W
ICosIFJFR0lPTiAqKSk7CiBzdGF0aWMgdm9pZCBfX2Vudl9yZW1vdmVfZmlsZSBfX1AoKEVOViAq
KSk7CiAKKworLyoKKyAqIElmIHRoZSBzeXN0ZW0gc3VwcG9ydHMgZmxvY2soKS1saWtlIGZpbGUg
bG9ja2luZywgdGhlbiB0aGUgcHJpbWFyeSByZWdpb24KKyAqIGZpbGUgX19kYi4wMDEgaXMgZXhj
bHVzaXZlbHkgbG9ja2VkIGR1cmluZyBjcmVhdGlvbiwgYW5kIGlzIHJlYWQtbG9ja2VkIHdoaWxl
CisgKiB0aGUgZW52aXJvbm1lbnQgaXMgb3Blbi4gTW9zdCBVbml4LWxpa2Ugc3lzdGVtcyBoYXZl
IGZsb2NrKCksIHdpdGggdGhlCisgKiBub3RhYmxlIGV4Y2VwdGlvbiBvZiBTb2xhcmlzLgorICog
Tm90ZTogZmNudGwgY2Fubm90IGJlIHVzZWQgZm9yIHRoaXMgbG9ja2luZyBiZWNhdXNlIG9mIHRo
ZSB1bmZvcnR1bmF0ZQorICogZGVmaW5pdGlvbiBvZiBpdHMgaW50ZXJhY3Rpb24gd2l0aCBjbG9z
ZSgyKS4gQSBwcm9jZXNzJ3MgZmNudGwgbG9ja3MgYXJlCisgKiByZWxlYXNlZCB3aGVuZXZlciBp
dCBjbG9zZXMgYW55IGZpbGUgZGVzY3JpcHRvciBmb3IgdGhhdCBmaWxlLiBTbywgaWYgYW4KKyAq
IGVudmlyb25tZW50IGlzIG9wZW5lZCBtb3JlIHRoYW4gb25jZSwgY2xvc2luZyBvbmUgb2YgdGhl
IERCX0VOViBoYW5kbGVzIHdvdWxkCisgKiByZWxlYXNlIHRoZSByZWFkIGxvY2sgdGhhdCBwcm90
ZWN0cyB0aGUgb3RoZXIgaGFuZGxlLgorICovCisjaWZkZWYgSEFWRV9GTE9DSworI2RlZmluZSBF
TlZfUFJJTUFSWV9MT0NLKGVudiwgbG9ja21vZGUsIGFzeW5jKQlcCisJKChlbnYpLT5wcmltYXJ5
X2ZocCA9PSBOVUxMID8gMCA6CVwKKwlfX29zX2ZkbG9jaygoZW52KSwgKGVudiktPnByaW1hcnlf
ZmhwLCAtMSwgbG9ja21vZGUsIGFzeW5jKSkKKyNkZWZpbmUgRU5WX1BSSU1BUllfVU5MT0NLKGVu
dikJCQlcCisJKChlbnYpLT5wcmltYXJ5X2ZocCA9PSBOVUxMID8gMCA6CVwKKwlfX29zX2ZkbG9j
aygoZW52KSwgKGVudiktPnByaW1hcnlfZmhwLCAtMSwgREJfTE9DS19ORywgMCkpCisjZWxzZQor
I2RlZmluZSBFTlZfUFJJTUFSWV9MT0NLKGVudiwgbG9ja21vZGUsIGFzeW5jKQkoMCkKKyNkZWZp
bmUgRU5WX1BSSU1BUllfVU5MT0NLKGVudikJCQkoMCkKKyNlbmRpZgorCiAvKgogICogX19lbnZf
YXR0YWNoCiAgKglKb2luL2NyZWF0ZSB0aGUgZW52aXJvbm1lbnQKICAqCisgKiBTYWZlbHkgZGV0
ZWN0aW5nIGFuZCBtYW5hZ2luZyBtdWx0aXBsZSBwcm9jZXNzZXMnIGVudmlyb25tZW50IGhhbmRs
ZXM6CisgKglCREIgdXNlcyBhIHNoYXJlZCBvciBleGNsdXNpdmUgZmNudGwoKS1zdHlsZSBsb2Nr
IG9uIHRoZSBmaXJzdCBieXRlCisgKglvZiB0aGUgcHJpbWFyeSByZWdpb24gZmlsZSAoX19kYi4w
MDEpIHRvIGRldGVjdCB3aGV0aGVyIG90aGVyIHByb2Nlc3NlcworICoJaGF2ZSB0aGUgZW52aXJv
bm1lbnQgb3BlbiwgYW5kIHRvIHNpbmdsZS10aHJlYWQgYXR0ZW1wdHMgdG8gY3JlYXRlIHRoZQor
ICoJZW52aXJvbm1lbnQuICBJZiB0aGUgb3BlbiBpbmNsdWRlcyBEQl9DUkVBVEUsIGFuIGV4Y2x1
c2l2ZSBsb2NrIGlzCisgKglvYnRhaW5lZCBkdXJpbmcgdGhlIG9wZW4gY2FsbC4gIEFmdGVyIHRo
ZSBjcmVhdGlvbiBpcyBmaW5pc2hlZCwgYW5kCisgKglhbnl0aW1lIGR1cmluZyBhIG5vbi1EQl9D
UkVBVEUgZW52IG9wZW4sIHRoZSBwcm9jZXNzIGhvbGRzIGEgc2hhcmVkCisgKglsb2NrLiAKKyAq
CS0gc2luZ2xlLXRocmVhZCBjcmVhdGlvbiBvZiB0aGUgZW52aXJvbm1lbnQKKyAqCS0gZGV0ZWN0
IHdoZXRoZXIgYW55IG90aGVyIHByb2Nlc3NlcyBhcmUgY3VycmVudGx5IGF0dGFjaGVkIHRvIGl0
LgorICoKICAqIFBVQkxJQzogaW50IF9fZW52X2F0dGFjaCBfX1AoKEVOViAqLCB1X2ludDMyX3Qg
KiwgaW50LCBpbnQpKTsKICAqLwogaW50CkBAIC0xMDQsNyArMTQxLDcgQEAKIAlpZiAoY3JlYXRl
X29rKSB7CiAJCWlmICgocmV0ID0gX19vc19vcGVuKGVudiwgaW5mb3AtPm5hbWUsIDAsCiAJCSAg
ICBEQl9PU09fQ1JFQVRFIHwgREJfT1NPX0VYQ0wgfCBEQl9PU09fUkVHSU9OLAotCQkgICAgZW52
LT5kYl9tb2RlLCAmZW52LT5sb2NrZmhwKSkgPT0gMCkKKwkJICAgIGVudi0+ZGJfbW9kZSwgJmVu
di0+cHJpbWFyeV9maHApKSA9PSAwKQogCQkJZ290byBjcmVhdGlvbjsKIAkJaWYgKHJldCAhPSBF
RVhJU1QpIHsKIAkJCV9fZGJfZXJyKGVudiwgcmV0LCAiJXMiLCBpbmZvcC0+bmFtZSk7CkBAIC0x
MjAsOCArMTU3LDEzIEBACiAJICogd2UncmUgZG9uZS4pCiAJICovCiAJaWYgKChyZXQgPSBfX29z
X29wZW4oCi0JICAgIGVudiwgaW5mb3AtPm5hbWUsIDAsIERCX09TT19SRUdJT04sIDAsICZlbnYt
PmxvY2tmaHApKSAhPSAwKQorCSAgICBlbnYsIGluZm9wLT5uYW1lLCAwLCBEQl9PU09fUkVHSU9O
LCAwLCAmZW52LT5wcmltYXJ5X2ZocCkpICE9IDApCiAJCWdvdG8gZXJyOworCS8qIFdhaXQgdG8g
Z2V0IHNoYXJlZCBhY2Nlc3MgdG8gdGhlIHByaW1hcnkgcmVnaW9uLiAqLworCWlmICgocmV0ID0g
RU5WX1BSSU1BUllfTE9DSyhlbnYsIERCX0xPQ0tfUkVBRCwgMCkpICE9IDApIHsKKwkJX19kYl9l
cnIoZW52LCByZXQsICJfX2Vudl9hdHRhY2g6IGV4aXN0aW5nOiBzaGFyZWQgbG9jayBlcnJvciIp
OworCQlnb3RvIGVycjsKKwl9CiAKIAkvKgogCSAqICEhIQpAQCAtMTUzLDcgKzE5NSw3IEBACiAJ
ICogbm93LCB0cnlpbmcgdG8gbWFrZSBkaWZmZXJlbnQgdmVyc2lvbnMgb2YgaXQgd29yay4pCiAJ
ICovCiAJaWYgKChyZXQgPSBfX29zX2lvaW5mbyhlbnYsIGluZm9wLT5uYW1lLAotCSAgICBlbnYt
PmxvY2tmaHAsICZtYnl0ZXMsICZieXRlcywgTlVMTCkpICE9IDApIHsKKwkgICAgZW52LT5wcmlt
YXJ5X2ZocCwgJm1ieXRlcywgJmJ5dGVzLCBOVUxMKSkgIT0gMCkgewogCQlfX2RiX2VycihlbnYs
IHJldCwgIiVzIiwgaW5mb3AtPm5hbWUpOwogCQlnb3RvIGVycjsKIAl9CkBAIC0xODksMTQgKzIz
MSwxNCBAQAogCQkJcmV0ID0gRUlOVkFMOwogCQkJX19kYl9lcnIoZW52LCByZXQsIERCX1NUUl9B
KCIxNTM1IiwKIAkJICAgICIlczogZXhpc3RpbmcgZW52aXJvbm1lbnQgbm90IGNyZWF0ZWQgaW4g
c3lzdGVtIG1lbW9yeSIsCi0JCQkgICAgIiVzIiksIGluZm9wLT5uYW1lKTsKLQkJCWdvdG8gZXJy
OworCQkJIiVzIiksIGluZm9wLT5uYW1lKTsKKwkJICAgIGdvdG8gZXJyOwogCQl9IGVsc2Ugewot
CQkJaWYgKChyZXQgPSBfX29zX3JlYWQoZW52LCBlbnYtPmxvY2tmaHAsICZyYnVmLAorCQkJaWYg
KChyZXQgPSBfX29zX3JlYWQoZW52LCBlbnYtPnByaW1hcnlfZmhwLCAmcmJ1ZiwKIAkJCSAgICBz
aXplb2YocmJ1ZiksICZucncpKSAhPSAwIHx8CiAJCQkgICAgbnJ3IDwgKHNpemVfdClzaXplb2Yo
cmJ1ZikgfHwKIAkJCSAgICAocmV0ID0gX19vc19zZWVrKGVudiwKLQkJCSAgICBlbnYtPmxvY2tm
aHAsIDAsIDAsIHJidWYucmVnaW9uX29mZikpICE9IDApIHsKKwkJCSAgICBlbnYtPnByaW1hcnlf
ZmhwLCAwLCAwLCByYnVmLnJlZ2lvbl9vZmYpKSAhPSAwKSB7CiAJCQkJX19kYl9lcnIoZW52LCBy
ZXQsIERCX1NUUl9BKCIxNTM2IiwKIAkJCQkgICAgICIlczogdW5hYmxlIHRvIHJlYWQgcmVnaW9u
IGluZm8iLCAiJXMiKSwKIAkJCQkgICAgIGluZm9wLT5uYW1lKTsKQEAgLTIwNCw3ICsyNDYsNyBA
QAogCQkJfQogCQl9CiAKLQkJaWYgKChyZXQgPSBfX29zX3JlYWQoZW52LCBlbnYtPmxvY2tmaHAs
ICZyZWYsCisJCWlmICgocmV0ID0gX19vc19yZWFkKGVudiwgZW52LT5wcmltYXJ5X2ZocCwgJnJl
ZiwKIAkJICAgIHNpemVvZihyZWYpLCAmbnJ3KSkgIT0gMCB8fCBucncgPCAoc2l6ZV90KXNpemVv
ZihyZWYpKSB7CiAJCQlpZiAocmV0ID09IDApCiAJCQkJcmV0ID0gRUlPOwpAQCAtMjE4LDE0ICsy
NjAsMTMgQEAKIAkJc2VnaWQgPSByZWYuc2VnaWQ7CiAJfQogCi0jaWZuZGVmIEhBVkVfTVVURVhf
RkNOVEwKKyNpZiAhZGVmaW5lZChIQVZFX0ZDTlRMKSAmJiAhZGVmaW5lZChIQVZFX1BUSFJFQURT
X1RJTUVTVEFNUCkKIAkvKgotCSAqIElmIHdlJ3JlIG5vdCBkb2luZyBmY250bCBsb2NraW5nLCB3
ZSBjYW4gY2xvc2UgdGhlIGZpbGUgaGFuZGxlLiAgV2UKLQkgKiBubyBsb25nZXIgbmVlZCBpdCBh
bmQgdGhlIGxlc3MgY29udGFjdCBiZXR3ZWVuIHRoZSBidWZmZXIgY2FjaGUgYW5kCi0JICogdGhl
IFZNLCB0aGUgYmV0dGVyLgorCSAqIFdpdGhvdXQgZmNudGwtbGlrZSBzdXBwb3J0LCB3ZSBubyBs
b25nZXIgbmVlZCB0aGUgZmlsZSBoYW5kbGUuICBDbG9zZQorCSAqIGl0IHRvIGxpbWl0IHRoZSBp
bnRlcmFjdGlvbiBiZXR3ZWVuIHRoZSBidWZmZXIgY2FjaGUgYW5kIHRoZSBWTS4KIAkgKi8KLQko
dm9pZClfX29zX2Nsb3NlaGFuZGxlKGVudiwgZW52LT5sb2NrZmhwKTsKLQkgZW52LT5sb2NrZmhw
ID0gTlVMTDsKKwkodm9pZClfX29zX2Nsb3NlaGFuZGxlKGVudiwgZW52LT5wcmltYXJ5X2ZocCk7
CisJIGVudi0+cHJpbWFyeV9maHAgPSBOVUxMOwogI2VuZGlmCiAKIAkvKiBDYWxsIHRoZSByZWdp
b24gam9pbiByb3V0aW5lIHRvIGFjcXVpcmUgdGhlIHJlZ2lvbi4gKi8KQEAgLTIzMyw2ICsyNzQs
OCBAQAogCXRyZWdpb24uc2l6ZSA9IChyb2ZmX3Qpc2l6ZTsKIAl0cmVnaW9uLm1heCA9IChyb2Zm
X3QpbWF4OwogCXRyZWdpb24uc2VnaWQgPSBzZWdpZDsKKwkvKiBBdHRhY2ggdG8gdGhlIGV4aXN0
aW5nIHByaW1hcnkgcmVnaW9uLiAqLworCS8qIFRoZSBsZWFraW5nIGRiLjAwMSBnZXRzIG9wZW4g
aW5zaWRlIG9mIGhlcmUsIGluIF9fb3NfYXR0YWNoKCkuICovCiAJaWYgKChyZXQgPSBfX2Vudl9z
eXNfYXR0YWNoKGVudiwgaW5mb3AsICZ0cmVnaW9uKSkgIT0gMCkKIAkJZ290byBlcnI7CiAKQEAg
LTI0NiwyMCArMjg5LDM4IEBACiAJaW5mb3AtPmhlYWQgPSAodV9pbnQ4X3QgKilpbmZvcC0+YWRk
ciArIHNpemVvZihSRUdFTlYpOwogCXJlbnYgPSBpbmZvcC0+cHJpbWFyeTsKIAotCS8qCi0JICog
TWFrZSBzdXJlIHRoZSByZWdpb24gbWF0Y2hlcyBvdXIgYnVpbGQuICBTcGVjaWFsIGNhc2UgYSBy
ZWdpb24KLQkgKiB0aGF0J3MgYWxsIG51bCBieXRlcywganVzdCB0cmVhdCBpdCBsaWtlIGFueSBv
dGhlciBjb3JydXB0aW9uLgotCSAqLworCWlmIChjcmVhdGVfb2sgJiYKKwkgICAgX19lbnZfY2hl
Y2tfcmVjcmVhdGUoZW52LCByZW52LCBzaWduYXR1cmUpID09IERCX09MRF9WRVJTSU9OICYmCisJ
ICAgIChyZXQgPSBFTlZfUFJJTUFSWV9MT0NLKGVudiwgREJfTE9DS19XUklURSwgMSkpID09IDAp
IHsKKwkJaWYgKEZMRF9JU1NFVChkYmVudi0+dmVyYm9zZSwgREJfVkVSQl9SRUNPVkVSWSkpCisJ
CQlfX2RiX21zZyhlbnYsICJSZWNyZWF0aW5nIGlkbGUgZW52aXJvbm1lbnQiKTsKKwkJRl9TRVQo
aW5mb3AsIFJFR0lPTl9DUkVBVEVfT0spOworCisJCS8qCisJCSAqIERldGFjaCBmcm9tIHRoZSBl
bnZpcm9ubWVudCByZWdpb247IHdlIG5lZWQgdG8gdW5tYXAgaXQgKGFuZAorCQkgKiBjbG9zZSBh
bnkgZmlsZSBoYW5kbGUpIHNvIHRoYXQgd2UgZG9uJ3QgbGVhayBtZW1vcnkgb3IgZmlsZXMuCisJ
CSAqLworCQlEQl9BU1NFUlQoZW52LCBpbmZvcC0+cnAgPT0gTlVMTCk7CisJCWluZm9wLT5ycCA9
ICZ0cmVnaW9uOworCQkodm9pZClfX2Vudl9zeXNfZGV0YWNoKGVudiwgaW5mb3AsIDApOworCQln
b3RvIGNyZWF0aW9uOworCX0KKwogCWlmIChyZW52LT5tYWp2ZXIgIT0gREJfVkVSU0lPTl9NQUpP
UiB8fAogCSAgICByZW52LT5taW52ZXIgIT0gREJfVkVSU0lPTl9NSU5PUikgewotCQlpZiAocmVu
di0+bWFqdmVyICE9IDAgfHwgcmVudi0+bWludmVyICE9IDApIHsKKwkJLyoKKwkJICogU3BlY2lh
bCBjYXNlIGEgcmVnaW9uIHRoYXQncyBhbGwgbnVsIGJ5dGVzLCBqdXN0IHRyZWF0IGl0CisJCSAq
IGxpa2UgYW55IG90aGVyIGNvcnJ1cHRpb24uCisJCSAqLworCQlpZiAocmVudi0+bWFqdmVyID09
IDAgJiYgcmVudi0+bWludmVyID09IDApCisJCQlyZXQgPSBFSU5WQUw7CisJCWVsc2UgewogCQkJ
X19kYl9lcnJ4KGVudiwgREJfU1RSX0EoIjE1MzgiLAotCSAgICAiUHJvZ3JhbSB2ZXJzaW9uICVk
LiVkIGRvZXNuJ3QgbWF0Y2ggZW52aXJvbm1lbnQgdmVyc2lvbiAlZC4lZCIsCisJIlByb2dyYW0g
dmVyc2lvbiAlZC4lZCBkb2Vzbid0IG1hdGNoIGluLXVzZSBlbnZpcm9ubWVudCB2ZXJzaW9uICVk
LiVkIiwKIAkJCSAgICAiJWQgJWQgJWQgJWQiKSwgREJfVkVSU0lPTl9NQUpPUiwgREJfVkVSU0lP
Tl9NSU5PUiwKIAkJCSAgICByZW52LT5tYWp2ZXIsIHJlbnYtPm1pbnZlcik7CiAJCQlyZXQgPSBE
Ql9WRVJTSU9OX01JU01BVENIOwotCQl9IGVsc2UKLQkJCXJldCA9IEVJTlZBTDsKKwkJfQogCQln
b3RvIGVycjsKIAl9CiAJaWYgKHJlbnYtPnNpZ25hdHVyZSAhPSBzaWduYXR1cmUpIHsKQEAgLTI4
OSw2ICszNTAsMTggQEAKIAl9CiAJaWYgKHJlbnYtPm1hZ2ljICE9IERCX1JFR0lPTl9NQUdJQykK
IAkJZ290byByZXRyeTsKKwkgICAgLyoKKwkgICAgICogQSBiYWQgbWFnaWMgbnVtYmVyIG1lYW5z
IHRoYXQgdGhlIGVudiBpcyBuZXcgYW5kIG5vdCB5ZXQgYXZhaWxhYmxlOgorCSAgICAgKiB3YWl0
IGEgd2hpbGUgYW5kIHRyeSBhZ2Fpbi4gIElmIHRoZSBtYWdpYyBudW1iZXIgc2F5cyByZWNvdmVy
eSBpcyBpbgorCSAgICAgKiBwcm9jZXNzLCByZW1lbWJlciB0aGUgZW52IGNyZWF0aW9uIHRpbWUg
dG8gcmVjb3JkIHRoYXQgcmVjb3Zlcnkgd2FzCisJICAgICAqIHRoZSByZWFzb24gdGhhdCB0aGUg
b3BlbiBmYWlsZWQuCisJICAgICAqLworCSAgICBpZiAocmVudi0+bWFnaWMgIT0gREJfUkVHSU9O
X01BR0lDKSB7CisJCSAgICBfX2RiX21zZyhlbnYsICJhdHRhY2ggc2VlcyBiYWQgcmVnaW9uIG1h
Z2ljIDB4JWx4IiwKKwkJCSh1X2xvbmcpcmVudi0+bWFnaWMpOworCQkgICAgZ290byByZXRyeTsK
KwkgICAgfQorCiAKIAkvKgogCSAqIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgdW5kZXJseWluZyBS
RUdJT04gaW5mb3JtYXRpb24gZm9yIHRoaXMKQEAgLTI5Niw3ICszNjksNyBAQAogCSAqLwogCWlm
ICgocmV0ID0gX19lbnZfZGVzX2dldChlbnYsIGluZm9wLCBpbmZvcCwgJnJwKSkgIT0gMCB8fCBy
cCA9PSBOVUxMKQogCQlnb3RvIGZpbmRfZXJyOwotCWluZm9wLT5ycCA9IHJwOworCSAgICBpbmZv
cC0+cnAgPSBycDsKIAogCS8qCiAJICogVGhlcmUncyBzdGlsbCBhIHBvc3NpYmlsaXR5IGZvciBp
bmNvbnNpc3RlbnQgZGF0YS4gIFdoZW4gd2UgYWNxdWlyZWQKQEAgLTM0Niw2ICs0MTksMTIgQEAK
IAlyZXR1cm4gKDApOwogCiBjcmVhdGlvbjoKKwkvKiBTaG91bGQgdGhpcyB3YWl0IGZvciB0aGUg
bG9jayAocGFzc2luZyAwIGluc3RlYWQgb2YgMSk/ICovCisJaWYgKChyZXQgPSBFTlZfUFJJTUFS
WV9MT0NLKGVudiwgREJfTE9DS19XUklURSwgMSkpICE9IDApIHsKKwkJX19kYl9lcnIoZW52LCBy
ZXQsICJfX2Vudl9hdHRhY2g6IGNyZWF0aW9uIGNvdWxkIG5vdCBsb2NrICVzIiwKKwkJICAgIGVu
di0+cHJpbWFyeV9maHAtPm5hbWUpOworCQlnb3RvIGVycjsKKwl9CiAJLyogQ3JlYXRlIHRoZSBl
bnZpcm9ubWVudCByZWdpb24uICovCiAJRl9TRVQoaW5mb3AsIFJFR0lPTl9DUkVBVEUpOwogCkBA
IC00MzcsNyArNTE2LDE0IEBACiAJcmVudi0+bWludmVyID0gKHVfaW50MzJfdCltaW52ZXI7CiAJ
cmVudi0+cGF0Y2h2ZXIgPSAodV9pbnQzMl90KXBhdGNodmVyOwogCXJlbnYtPnNpZ25hdHVyZSA9
IHNpZ25hdHVyZTsKLQorI2lmZGVmIEhBVkVfUFRIUkVBRFNfVElNRVNUQU1QCisJcmVudi0+cHRo
cmVhZHNfdGltZXN0YW1wID0gX19vc19wdGhyZWFkc190aW1lc3RhbXAoZW52KTsKKwl7CisJCWNo
YXIgKnMgPSBnZXRlbnYoIlRTX0FESlVTVCIpOworCQlpZiAocyAhPSBOVUxMKQorCQkJcmVudi0+
cHRocmVhZHNfdGltZXN0YW1wIC09IGF0b2kocyk7CisJfQorI2VuZGlmCiAJKHZvaWQpdGltZSgm
cmVudi0+dGltZXN0YW1wKTsKIAlfX29zX3VuaXF1ZV9pZChlbnYsICZyZW52LT5lbnZpZCk7CiAK
QEAgLTUwNSw3ICs1OTEsNyBAQAogCQlyZWYuc2VnaWQgPSB0cmVnaW9uLnNlZ2lkOwogCQlyZWYu
bWF4ID0gdHJlZ2lvbi5tYXg7CiAJCWlmICgocmV0ID0gX19vc193cml0ZSgKLQkJICAgIGVudiwg
ZW52LT5sb2NrZmhwLCAmcmVmLCBzaXplb2YocmVmKSwgJm5ydykpICE9IDApIHsKKwkJICAgIGVu
diwgZW52LT5wcmltYXJ5X2ZocCwgJnJlZiwgc2l6ZW9mKHJlZiksICZucncpKSAhPSAwKSB7CiAJ
CQlfX2RiX2VycihlbnYsIHJldCwgREJfU1RSX0EoIjE1NDUiLAogCQkJICAgICIlczogdW5hYmxl
IHRvIHdyaXRlIG91dCBwdWJsaWMgZW52aXJvbm1lbnQgSUQiLAogCQkJICAgICIlcyIpLCBpbmZv
cC0+bmFtZSk7CkBAIC01MTMsMTYgKzU5OSwyNCBAQAogCQl9CiAJfQogCi0jaWZuZGVmIEhBVkVf
TVVURVhfRkNOVEwKLQkvKgotCSAqIElmIHdlJ3JlIG5vdCBkb2luZyBmY250bCBsb2NraW5nLCB3
ZSBjYW4gY2xvc2UgdGhlIGZpbGUgaGFuZGxlLiAgV2UKLQkgKiBubyBsb25nZXIgbmVlZCBpdCBh
bmQgdGhlIGxlc3MgY29udGFjdCBiZXR3ZWVuIHRoZSBidWZmZXIgY2FjaGUgYW5kCi0JICogdGhl
IFZNLCB0aGUgYmV0dGVyLgotCSAqLwotCWlmIChlbnYtPmxvY2tmaHAgIT0gTlVMTCkgewotCQkg
KHZvaWQpX19vc19jbG9zZWhhbmRsZShlbnYsIGVudi0+bG9ja2ZocCk7Ci0JCSBlbnYtPmxvY2tm
aHAgPSBOVUxMOworI2lmZGVmIEhBVkVfRkNOVEwKKwlpZiAoKHJldCA9IEVOVl9QUklNQVJZX1VO
TE9DSyhlbnYpKSAhPSAwKSB7CisJCV9fZGJfZXJyKGVudiwgcmV0LCAiX19lbnZfYXR0YWNoOiBy
ZWxlYXNlIGV4Y2x1c2l2ZSBsb2NrIik7CisJCWdvdG8gZXJyOwogCX0KKwlpZiAoKHJldCA9IEVO
Vl9QUklNQVJZX0xPQ0soZW52LCBEQl9MT0NLX1JFQUQsIDApKSAhPSAwKSB7CisJCV9fZGJfZXJy
KGVudiwgcmV0LCAiX19lbnZfYXR0YWNoOiBuZXc6IGFjcXVpcmUgc2hhcmVkIGxvY2siKTsKKwkJ
Z290byBlcnI7CisJfQorI2Vsc2UKKyAJLyoKKwkgKiBXZSBubyBsb25nZXIgbmVlZCB0aGUgcHJp
bWFyeSByZWdpb24gZmlsZSdzIGhhbmRsZSBhbmQgdGhlIGxlc3MKKwkgKiBjb250YWN0IGJldHdl
ZW4gdGhlIGJ1ZmZlciBjYWNoZSBhbmQgdGhlIFZNLCB0aGUgYmV0dGVyLgorIAkgKi8KKwlpZiAo
ZW52LT5wcmltYXJ5X2ZocCAhPSBOVUxMKSB7CisJCSAodm9pZClfX29zX2Nsb3NlaGFuZGxlKGVu
diwgZW52LT5wcmltYXJ5X2ZocCk7CisJCSBlbnYtPnByaW1hcnlfZmhwID0gTlVMTDsKKyAJfQog
I2VuZGlmCiAKIAkvKiBFdmVyeXRoaW5nIGxvb2tzIGdvb2QsIHdlJ3JlIGRvbmUuICovCkBAIC01
MzEsOSArNjI1LDkgQEAKIAogZXJyOgogcmV0cnk6CS8qIENsb3NlIGFueSBvcGVuIGZpbGUgaGFu
ZGxlLiAqLwotCWlmIChlbnYtPmxvY2tmaHAgIT0gTlVMTCkgewotCQkodm9pZClfX29zX2Nsb3Nl
aGFuZGxlKGVudiwgZW52LT5sb2NrZmhwKTsKLQkJZW52LT5sb2NrZmhwID0gTlVMTDsKKwlpZiAo
ZW52LT5wcmltYXJ5X2ZocCAhPSBOVUxMKSB7CisJCSh2b2lkKV9fb3NfY2xvc2VoYW5kbGUoZW52
LCBlbnYtPnByaW1hcnlfZmhwKTsKKwkJZW52LT5wcmltYXJ5X2ZocCA9IE5VTEw7CiAJfQogCiAJ
LyoKQEAgLTU2Miw5ICs2NTYsOSBAQAogCS8qIElmIHdlIGhhZCBhIHRlbXBvcmFyeSBlcnJvciwg
d2FpdCBhd2hpbGUgYW5kIHRyeSBhZ2Fpbi4gKi8KIAlpZiAocmV0ID09IDApIHsKIAkJaWYgKCFy
ZXRyeV9vayB8fCArK3JldHJ5X2NudCA+IDMpIHsKKwkJCXJldCA9IEVBR0FJTjsKIAkJCV9fZGJf
ZXJyeChlbnYsIERCX1NUUigiMTU0NiIsCiAJCQkgICAgInVuYWJsZSB0byBqb2luIHRoZSBlbnZp
cm9ubWVudCIpKTsKLQkJCXJldCA9IEVBR0FJTjsKIAkJfSBlbHNlIHsKIAkJCV9fb3NfeWllbGQo
ZW52LCByZXRyeV9jbnQgKiAzLCAwKTsKIAkJCWdvdG8gbG9vcDsKQEAgLTU3NSw2ICs2NjksNTkg
QEAKIH0KIAogLyoKKyAqIF9fZW52X2NoZWNrX3JlY3JlYXRlIC0tCisgKglEZXRlcm1pbmUgd2hl
dGhlciBhbiBleGlzdGluZyBvbi1kaXNrIGVudmlyb25tZW50IHNob3VsZCBiZSByZWNyZWF0ZWQK
KyAqCWJlY2F1c2UgaXQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGlzIGNvbXBpbGVkIEJEQiBs
aWJyYXJ5LgorICoKKyAqCVJldHVybnM6CisgKgkgICAgMCAtCisgKgkJVGhlIGVudiB3YXMgZ2Vu
ZXJhdGVkIGJ5IHRoaXMgbGlicmFyeS4gTm8gcmVjcmVhdGlvbiBuZWVkZWQuCisgKgkgICAgREJf
T0xEX1ZFUlNJT04gLQorICoJCUl0IHdhcyBjcmVhdGVkIGJ5IGFuIGVhcmxpZXIgQkRCIHZlcnNp
b24sIG9yIGJ5IGFuIGVhcmxpZXIKKyAqCQl2ZXJzaW9uIG9mIGxpYnB0aHJlYWRzIChvbiBjZXJ0
YWluIExpbnV4IHN5c3RlbXMpLiAgVGhlIGNhbGxlcgorICoJCXdpbGwgdHJ5IHRvIHJlY3JlYXRl
IGl0IHdpdGggdGhlIGN1cnJlbnRseSBjb25maWd1cmVkIHNldHRpbmdzLgorICoJICAgIERCX1ZF
UlNJT05fTUlTTUFUQ0ggLQorICoJCUl0IHdhcyBjcmVhdGVkIGJ5IGEgbmV3ZXIgdmVyc2lvbiBv
ZiBCREIuICBEbyBub3QgYXR0ZW1wdCB0bworICoJCWZpeCBpdCwgc29tZXRoaW5nIGlzIHByb2Jh
Ymx5IHdyb25nIHdpdGggdGhlIGFwcGxpY2F0aW9uIHNldHVwLgorICovCitzdGF0aWMgaW50Citf
X2Vudl9jaGVja19yZWNyZWF0ZShlbnYsIHJlbnYsIHNpZ25hdHVyZSkKKwlFTlYJKmVudjsKKwlS
RUdFTlYJKnJlbnY7CisJdV9pbnQzMl90IHNpZ25hdHVyZTsKK3sKKyNpZmRlZiBIQVZFX1BUSFJF
QURTX1RJTUVTVEFNUAorCXRpbWVfdCBwdGhyZWFkc190aW1lOworCWNoYXIgZW52dGltZVtDVElN
RV9CVUZMRU5dLCBsaWJ0aW1lW0NUSU1FX0JVRkxFTl07CisjZW5kaWYKKworCS8qIEZpcnN0LCBi
YWlsIG91dCBpZiB0aGUgZW52IGlzIHRvbyBuZXcgZm9yIHRoaXMgY29kZSB0byBoYW5kbGUuICov
CisJaWYgKHJlbnYtPm1hanZlciA+IERCX1ZFUlNJT05fTUFKT1IgfHwKKwkgICAgKHJlbnYtPm1h
anZlciA9PSBEQl9WRVJTSU9OX01BSk9SICYmCisJICAgIHJlbnYtPm1pbnZlciA+IERCX1ZFUlNJ
T05fTUlOT1IpKQorCSAgICAJcmV0dXJuIChEQl9WRVJTSU9OX01JU01BVENIKTsKKworI2lmZGVm
IEhBVkVfUFRIUkVBRFNfVElNRVNUQU1QCisJcHRocmVhZHNfdGltZSA9IF9fb3NfcHRocmVhZHNf
dGltZXN0YW1wKGVudik7CisJaWYgKHB0aHJlYWRzX3RpbWUgIT0gcmVudi0+cHRocmVhZHNfdGlt
ZXN0YW1wKSB7CisJCWlmIChGTERfSVNTRVQoZW52LT5kYmVudi0+dmVyYm9zZSwgREJfVkVSQl9S
RUNPVkVSWSkpCisJCQlfX2RiX21zZyhlbnYsCisJCQkiUHRocmVhZHMgdGltZXN0YW1wIGNoYW5n
ZWQ6IGVudiAlLjI0cyBjdXJyZW50ICUuMjRzIiwKKwkJCSAgICBfX29zX2N0aW1lKCZyZW52LT5w
dGhyZWFkc190aW1lc3RhbXAsIGVudnRpbWUpLAorCQkJICAgIF9fb3NfY3RpbWUoJnB0aHJlYWRz
X3RpbWUsIGxpYnRpbWUpKTsKKwkJcmV0dXJuIChEQl9PTERfVkVSU0lPTik7CisJfQorI2VuZGlm
CisJaWYgKHJlbnYtPnNpZ25hdHVyZSAhPSBzaWduYXR1cmUgfHwgcmVudi0+bWFqdmVyICE9IERC
X1ZFUlNJT05fTUFKT1IgfHwKKwkgICAgcmVudi0+bWludmVyICE9IERCX1ZFUlNJT05fTUlOT1Ip
IHsKKwkJaWYgKEZMRF9JU1NFVChlbnYtPmRiZW52LT52ZXJib3NlLCBEQl9WRVJCX1JFQ09WRVJZ
KSkKKwkJCV9fZGJfbXNnKGVudiwgIlNpZ25hdHVyZSBvciB2ZXJzaW9uIGNoYW5nZWQiKTsKKwkJ
cmV0dXJuIChEQl9PTERfVkVSU0lPTik7CisJfQorICAgIAlyZXR1cm4gKDApOworfQorCisvKgog
ICogX19lbnZfdHVybl9vbiAtLQogICoJVHVybiBvbiB0aGUgY3JlYXRlZCBlbnZpcm9ubWVudC4K
ICAqCkBAIC03OTQsMTIgKzk0MSwxMSBAQAogCXJlbnYgPSBpbmZvcC0+cHJpbWFyeTsKIAlyZXQg
PSAwOwogCi0JLyogQ2xvc2UgdGhlIGxvY2tpbmcgZmlsZSBoYW5kbGUuICovCi0JaWYgKGVudi0+
bG9ja2ZocCAhPSBOVUxMKSB7CisJaWYgKGVudi0+cHJpbWFyeV9maHAgIT0gTlVMTCkgewogCQlp
ZiAoKHRfcmV0ID0KLQkJICAgIF9fb3NfY2xvc2VoYW5kbGUoZW52LCBlbnYtPmxvY2tmaHApKSAh
PSAwICYmIHJldCA9PSAwKQorCQkgICAgX19vc19jbG9zZWhhbmRsZShlbnYsIGVudi0+cHJpbWFy
eV9maHApKSAhPSAwICYmIHJldCA9PSAwKQogCQkJcmV0ID0gdF9yZXQ7Ci0JCWVudi0+bG9ja2Zo
cCA9IE5VTEw7CisJCWVudi0+cHJpbWFyeV9maHAgPSBOVUxMOwogCX0KIAogCS8qCmRpZmYgLXIg
ZGI3OGRhMDk5NmIxIHNyYy9lbnYvZW52X3JlZ2lzdGVyLmMKLS0tIGEvc3JjL2Vudi9lbnZfcmVn
aXN0ZXIuYwlNb24gU2VwIDA5IDExOjA5OjM1IDIwMTMgLTA0MDAKKysrIGIvc3JjL2Vudi9lbnZf
cmVnaXN0ZXIuYwlTYXQgQXByIDI5IDA0OjEwOjE4IDIwMTcgLTA3MDAKQEAgLTE5LDkgKzE5LDkg
QEAKICNkZWZpbmUJUElEX0xFTgkJKDI1KQkJCQkvKiBQSUQgZW50cnkgbGVuZ3RoICovCiAKICNk
ZWZpbmUJUkVHSVNUUllfTE9DSyhlbnYsIHBvcywgbm93YWl0KQkJCQkJXAotCV9fb3NfZmRsb2Nr
KGVudiwgKGVudiktPmRiZW52LT5yZWdpc3RyeSwgKG9mZl90KShwb3MpLCAxLCBub3dhaXQpCisJ
X19vc19mZGxvY2soZW52LCAoZW52KS0+ZGJlbnYtPnJlZ2lzdHJ5LCAob2ZmX3QpKHBvcyksIERC
X0xPQ0tfV1JJVEUsIG5vd2FpdCkKICNkZWZpbmUJUkVHSVNUUllfVU5MT0NLKGVudiwgcG9zKQkJ
CQkJXAotCV9fb3NfZmRsb2NrKGVudiwgKGVudiktPmRiZW52LT5yZWdpc3RyeSwgKG9mZl90KShw
b3MpLCAwLCAwKQorCV9fb3NfZmRsb2NrKGVudiwgKGVudiktPmRiZW52LT5yZWdpc3RyeSwgKG9m
Zl90KShwb3MpLCBEQl9MT0NLX05HLCAwKQogI2RlZmluZQlSRUdJU1RSWV9FWENMX0xPQ0soZW52
LCBub3dhaXQpCQkJCQlcCiAJUkVHSVNUUllfTE9DSyhlbnYsIDEsIG5vd2FpdCkKICNkZWZpbmUJ
UkVHSVNUUllfRVhDTF9VTkxPQ0soZW52KQkJCQkJXApkaWZmIC1yIGRiNzhkYTA5OTZiMSBzcmMv
ZW52L2Vudl9zdGF0LmMKLS0tIGEvc3JjL2Vudi9lbnZfc3RhdC5jCU1vbiBTZXAgMDkgMTE6MDk6
MzUgMjAxMyAtMDQwMAorKysgYi9zcmMvZW52L2Vudl9zdGF0LmMJU2F0IEFwciAyOSAwNDoxMDox
OCAyMDE3IC0wNzAwCkBAIC0xNzcsNiArMTc3LDEwIEBACiAJU1RBVF9MT05HKCJUeG4gdmVyc2lv
biIsIERCX1RYTlZFUlNJT04pOwogCV9fZGJfbXNnKGVudiwKIAkgICAgIiUuMjRzXHRDcmVhdGlv
biB0aW1lIiwgX19vc19jdGltZSgmcmVudi0+dGltZXN0YW1wLCB0aW1lX2J1ZikpOworI2lmIGRl
ZmluZWQoSEFWRV9QVEhSRUFEU19USU1FU1RBTVApICYmIGRlZmluZWQoSEFWRV9NVVRFWF9QVEhS
RUFEUykKKwlfX2RiX21zZyhlbnYsCisJICAgICIlLjI0c1x0bGlicHRocmVhZCB0aW1lc3RhbXAi
LCBfX29zX2N0aW1lKCZyZW52LT5wdGhyZWFkc190aW1lc3RhbXAsIHRpbWVfYnVmKSk7CisjZW5k
aWYKIAlTVEFUX0hFWCgiRW52aXJvbm1lbnQgSUQiLCByZW52LT5lbnZpZCk7CiAJX19tdXRleF9w
cmludF9kZWJ1Z19zaW5nbGUoZW52LAogCSAgICAiUHJpbWFyeSByZWdpb24gYWxsb2NhdGlvbiBh
bmQgcmVmZXJlbmNlIGNvdW50IG11dGV4IiwKQEAgLTQyOSw3ICs0MzMsOCBAQAogCiAJU1RBVF9V
TE9ORygiUGlkIGNhY2hlIiwgZW52LT5waWRfY2FjaGUpOwogCi0JU1RBVF9JU1NFVCgiTG9ja2Zo
cCIsIGVudi0+bG9ja2ZocCk7CisJLyogQ2hhbmdlIHRvIFByaW1hcnkgUmVnaW9uIGZocD8gVGhl
IG5hbWUgY2hhbmdlZCwgYnV0IG5vdCBpdHMgdXNhZ2UuICovCisJU1RBVF9JU1NFVCgiTG9ja2Zo
cCIsIGVudi0+cHJpbWFyeV9maHApOwogCiAJU1RBVF9JU1NFVCgiTG9ja2VyIiwgZW52LT5lbnZf
bHJlZik7CiAKZGlmZiAtciBkYjc4ZGEwOTk2YjEgc3JjL29zL29zX2FkZHJpbmZvLmMKLS0tIGEv
c3JjL29zL29zX2FkZHJpbmZvLmMJTW9uIFNlcCAwOSAxMTowOTozNSAyMDEzIC0wNDAwCisrKyBi
L3NyYy9vcy9vc19hZGRyaW5mby5jCVNhdCBBcHIgMjkgMDQ6MTA6MTggMjAxNyAtMDcwMApAQCAt
MTAsNiArMTAsMTAgQEAKIAogI2luY2x1ZGUgImRiX2ludC5oIgogCisjaWZkZWYgSEFWRV9QVEhS
RUFEU19USU1FU1RBTVAKKyNpbmNsdWRlIDxsaW5rLmg+CisjZW5kaWYKKwogLyoKICAqIF9fb3Nf
Z2V0YWRkcmluZm8gYW5kIF9fb3NfZnJlZWFkZHJpbmZvIHdyYXAgdGhlIGdldGFkZHJpbmZvIGFu
ZCBmcmVlYWRkcmluZm8KICAqIGNhbGxzLCBhcyB3ZWxsIGFzIHRoZSBhc3NvY2lhdGVkIHBsYXRm
b3JtIGRlcGVuZGVudCBlcnJvciBoYW5kbGluZywgbWFwcGluZwpAQCAtMTc3LDMgKzE4MSw0OCBA
QAogCX0KICNlbmRpZgogfQorCisjaWZkZWYgSEFWRV9QVEhSRUFEU19USU1FU1RBTVAKKy8qCisg
KiAgY2FsbGJhY2tfZmluZF9wdGhyZWFkcyAtLQorICogIAlkbF9pdGVyYXRlX3BoZHIoKSBjYWxs
cyB0aGlzIG9uY2UgZm9yIGVhY2ggbG9hZGVkIGxpYnJhcnkuCisgKgorICogUmV0dXJuczoKKyAq
CTAgLSB0aGUgbGlicmFyeSBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgbGlicHRocmVhZHMuCisgKgkx
IC0gdGhlIGxpYnJhcnkgKmRvZXMqIHNlZW0gdG8gYmUgbGlicHRocmVhZHMuIEl0cyBtb2RpZmlj
YXRpb24gdGltZSBpcworICoJICAgIHN0b3JlZCBpbnRvIGludG8gdGhlIGxhc3QgYXJndW1lbnQn
cyBsb2NhdGlvbi4KKyAqLworc3RhdGljIGludAorY2FsbGJhY2tfZmluZF9wdGhyZWFkcyhzdHJ1
Y3QgZGxfcGhkcl9pbmZvICppbmZvLCBzaXplX3Qgc2l6ZSwgdm9pZCAqZGF0YSkKK3sKKwlzdHJ1
Y3Qgc3RhdCBzdGJ1ZjsKKworCS8qIFN0b3AgKHJldHVybiBub24temVybykgd2hlbiBsaWJjIGlz
IGZvdW5kLiAqLworCWlmIChzdHJzdHIoaW5mby0+ZGxwaV9uYW1lLCAibGlicHRocmVhZCIpICE9
IE5VTEwgJiYKKwkgICAgc3RhdChpbmZvLT5kbHBpX25hbWUsICZzdGJ1ZikgPT0gMCkgeworCQkq
KHRpbWVfdCAqKWRhdGEgPSBzdGJ1Zi5zdF9tdGltZTsKKwkJcmV0dXJuICgxKTsKKwl9CisJQ09N
UFFVSUVUKHNpemUsIDApOworCUNPTVBRVUlFVChkYXRhLCBOVUxMKTsKKwlyZXR1cm4gKDApOwor
fQorCisvKgorICogX19vc19wdGhyZWFkc190aW1lc3RhbXAgLS0KKyAqCisgKiBQVUJMSUM6IHRp
bWVfdCBfX29zX3B0aHJlYWRzX3RpbWVzdGFtcCBfX1AoKEVOViAqKSk7CisgKi8KK3RpbWVfdAor
X19vc19wdGhyZWFkc190aW1lc3RhbXAoZW52KQorCUVOViAqZW52OworeworCXRpbWVfdAl0aW1l
c3RhbXA7CisKKwl0aW1lc3RhbXAgPSAwOworCWRsX2l0ZXJhdGVfcGhkcihjYWxsYmFja19maW5k
X3B0aHJlYWRzLCAmdGltZXN0YW1wKTsKKworCUNPTVBRVUlFVChlbnYsIDApOworCXJldHVybiAo
dGltZXN0YW1wKTsKK30KKyNlbmRpZgpkaWZmIC1yIGRiNzhkYTA5OTZiMSBzcmMvb3Mvb3NfZmxv
Y2suYwotLS0gYS9zcmMvb3Mvb3NfZmxvY2suYwlNb24gU2VwIDA5IDExOjA5OjM1IDIwMTMgLTA0
MDAKKysrIGIvc3JjL29zL29zX2Zsb2NrLmMJU2F0IEFwciAyOSAwNDoxMDoxOCAyMDE3IC0wNzAw
CkBAIC0xMCw0MSArMTAsOTggQEAKIAogI2luY2x1ZGUgImRiX2ludC5oIgogCisjaWYgIWRlZmlu
ZWQoSEFWRV9GQ05UTCkgfHwgIWRlZmluZWQoSEFWRV9GTE9DSykKK3N0YXRpYyBpbnQgX19vc19m
aWxlbG9ja2luZ19ub3RzdXAgX19QKChFTlYgKikpOworI2VuZGlmCisKIC8qCiAgKiBfX29zX2Zk
bG9jayAtLQogICoJQWNxdWlyZS9yZWxlYXNlIGEgbG9jayBvbiBhIGJ5dGUgaW4gYSBmaWxlLgog
ICoKLSAqIFBVQkxJQzogaW50IF9fb3NfZmRsb2NrIF9fUCgoRU5WICosIERCX0ZIICosIG9mZl90
LCBpbnQsIGludCkpOworICoJVGhlIGxvY2sgbW9kZXMgc3VwcG9ydGVkIGhlcmUgYXJlOgorICoJ
REJfTE9DS19ORwktIHJlbGVhc2UgdGhlIGxvY2sKKyAqCURCX0xPQ0tfUkVBRAktIGdldCBzaGFy
ZWQgYWNjZXNzCisgKglEQl9MT0NLX1dSSVRFCS0gZ2V0IGV4Y2x1c2l2ZSBhY2Nlc3MKKyAqCisg
KglVc2UgZmNudGwoKS1saWtlIHNlbWFudGljcyBtb3N0IG9mIHRoZSB0aW1lIChEQl9SRUdJU1RF
UiBzdXBwb3J0KS4gRmNudGwKKyAqCXN1cHBvcnRzIHJhbmdlIGxvY2tpbmcsIGJ1dCBoYXMgdGhl
IGFkZGl0aW9uYWwgYnJva2VuIHNlbWFudGljcyB0aGF0CisgKgljbG9zaW5nIGFueSBvZiB0aGUg
ZmlsZSdzIGRlc2NyaXB0b3JzIHJlbGVhc2VzIGFueSBsb2NrcywgZXZlbiBpZiBpdHMKKyAqCW90
aGVyIGZpbGUgZGVzY3JpcHRvcnMgcmVtYWluIG9wZW4uIFRoYW5rcyBTWVNWICYgUE9TSVguCisg
KglIb3dldmVyLCBpZiB0aGUgb2Zmc2V0IGlzIG5lZ2F0aXZlICh3aGljaCBpcyBhbGxvd2VkLCBi
ZWNhdXNlIFBPU0lYCisgKglvZmZfdCBhIHNpZ25lZCBpbnRlZ2VyKSB0aGVuIHVzZSBmbG9jaygp
IGluc3RlYWQuICBJdCBoYXMgb25seSB3aG9sZS0KKyAqCWZpbGUgbG9ja3MsIGJ1dCB0aGV5IHBl
cnNpc3QgdW50aWwgZXhwbGljaXRseSB1bmxvY2tlZCBvciB0aGUgcHJvY2VzcworICoJZXhpdHMu
CisgKiBQVUJMSUM6IGludCBfX29zX2ZkbG9jayBfX1AoKEVOViAqLCBEQl9GSCAqLCBvZmZfdCwg
ZGJfbG9ja21vZGVfdCwgaW50KSk7CiAgKi8KIGludAotX19vc19mZGxvY2soZW52LCBmaHAsIG9m
ZnNldCwgYWNxdWlyZSwgbm93YWl0KQorX19vc19mZGxvY2soZW52LCBmaHAsIG9mZnNldCwgbG9j
a21vZGUsIG5vd2FpdCkKIAlFTlYgKmVudjsKIAlEQl9GSCAqZmhwOwotCWludCBhY3F1aXJlLCBu
b3dhaXQ7CiAJb2ZmX3Qgb2Zmc2V0OworCWRiX2xvY2ttb2RlX3QgbG9ja21vZGU7CisJaW50IG5v
d2FpdDsKIHsKICNpZmRlZiBIQVZFX0ZDTlRMCiAJREJfRU5WICpkYmVudjsKIAlzdHJ1Y3QgZmxv
Y2sgZmw7CiAJaW50IHJldCwgdF9yZXQ7CisJc3RhdGljIGNoYXIgKm1vZGVfc3RyaW5nW0RCX0xP
Q0tfV1JJVEUgKyAxXSA9IHsKKwkJInVubG9jayIsCisJCSJyZWFkIiwKKwkJIndyaXRlIgorCX07
CisJc2hvcnQgbW9kZV9mY250bFtEQl9MT0NLX1dSSVRFICsgMV0gPSB7CisJCUZfVU5MQ0ssCisJ
CUZfUkRMQ0ssCisJCUZfV1JMQ0sKKwl9OworI2lmZGVmIEhBVkVfRkxPQ0sKKwlzaG9ydCBtb2Rl
X2Zsb2NrW0RCX0xPQ0tfV1JJVEUgKyAxXSA9IHsKKwkJTE9DS19VTiwKKwkJTE9DS19TSCwKKwkJ
TE9DS19FWAorCX07CisjZW5kaWYKIAogCWRiZW52ID0gZW52ID09IE5VTEwgPyBOVUxMIDogZW52
LT5kYmVudjsKIAogCURCX0FTU0VSVChlbnYsIEZfSVNTRVQoZmhwLCBEQl9GSF9PUEVORUQpICYm
IGZocC0+ZmQgIT0gLTEpOworCURCX0FTU0VSVChlbnYsIGxvY2ttb2RlIDw9IERCX0xPQ0tfV1JJ
VEUpOwogCi0JaWYgKGRiZW52ICE9IE5VTEwgJiYgRkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBE
Ql9WRVJCX0ZJTEVPUFNfQUxMKSkKLQkJX19kYl9tc2coZW52LCBEQl9TVFJfQSgiMDEzOCIsCi0J
CSAgICAiZmlsZW9wczogZmxvY2sgJXMgJXMgb2Zmc2V0ICVsdSIsICIlcyAlcyAlbHUiKSwgZmhw
LT5uYW1lLAotCQkgICAgYWNxdWlyZSA/IERCX1NUUl9QKCJhY3F1aXJlIik6IERCX1NUUl9QKCJy
ZWxlYXNlIiksCi0JCSAgICAodV9sb25nKW9mZnNldCk7CisJaWYgKGRiZW52ICE9IE5VTEwgJiYg
RkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBEQl9WRVJCX0ZJTEVPUFNfQUxMKSkgeworCQlpZiAo
b2Zmc2V0IDwgMCkKKwkJICAgICAgX19kYl9tc2coZW52LCBEQl9TVFJfQSgiIyMjIyIsCisJCQkg
ICJmaWxlb3BzOiBmbG9jayAlcyAlcyAlcyIsICIlcyAlcyAlcyIpLAorCQkJICBmaHAtPm5hbWUs
IG1vZGVfc3RyaW5nW2xvY2ttb2RlXSwKKwkJCSAgbm93YWl0ID8gIm5vd2FpdCIgOiAiIik7CisJ
ICAgICAgZWxzZQorCQkgICAgICBfX2RiX21zZyhlbnYsIERCX1NUUl9BKCIwMDIwIiwKKwkJCSAg
ImZpbGVvcHM6IGZjbnRscyAlcyAlcyBvZmZzZXQgJWx1IiwgIiVzICVzICVsdSIpLAorCQkJICBm
aHAtPm5hbWUsIG1vZGVfc3RyaW5nW2xvY2ttb2RlXSwgKHVfbG9uZylvZmZzZXQpOworCX0KIAot
CWZsLmxfc3RhcnQgPSBvZmZzZXQ7Ci0JZmwubF9sZW4gPSAxOwotCWZsLmxfdHlwZSA9IGFjcXVp
cmUgPyBGX1dSTENLIDogRl9VTkxDSzsKLQlmbC5sX3doZW5jZSA9IFNFRUtfU0VUOworCWlmIChv
ZmZzZXQgPCAwKSB7CisjaWZkZWYgSEFWRV9GTE9DSworCSAgICAgICAgUkVUUllfQ0hLX0VJTlRS
X09OTFkoZmxvY2soZmhwLT5mZCwKKwkgICAgICAgICAgICBtb2RlX2Zsb2NrW2xvY2ttb2RlXSB8
IChub3dhaXQgPyBMT0NLX05CIDogMCkpLCByZXQpOworI2Vsc2UKKwkJcmV0ID0gX19vc19maWxl
bG9ja2luZ19ub3RzdXAoZW52KTsKKyNlbmRpZgorCX0gZWxzZSB7CisJICAgICAgICBmbC5sX3N0
YXJ0ID0gb2Zmc2V0OworCSAgICAgICAgZmwubF9sZW4gPSAxOworCSAgICAgICAgZmwubF93aGVu
Y2UgPSBTRUVLX1NFVDsKKwkgICAgICAgIGZsLmxfdHlwZSA9IG1vZGVfZmNudGxbbG9ja21vZGVd
OworCSAgICAgICAgICAgUkVUUllfQ0hLX0VJTlRSX09OTFkoCisJICAgICAgICAgICAgZmNudGwo
ZmhwLT5mZCwgbm93YWl0ID8gRl9TRVRMSyA6IEZfU0VUTEtXLCAmZmwpLCByZXQpOworCX0KIAot
CVJFVFJZX0NIS19FSU5UUl9PTkxZKAotCSAgICAoZmNudGwoZmhwLT5mZCwgbm93YWl0ID8gRl9T
RVRMSyA6IEZfU0VUTEtXLCAmZmwpKSwgcmV0KTsKKwlpZiAob2Zmc2V0IDwgMCAmJiBkYmVudiAh
PSBOVUxMICYmCisJICAgIEZMRF9JU1NFVChkYmVudi0+dmVyYm9zZSwgREJfVkVSQl9GSUxFT1BT
X0FMTCkpCisJCV9fZGJfbXNnKGVudiwgREJfU1RSX0EoIiMjIyMiLAorCQkgICAgImZpbGVvcHM6
IGZsb2NrICVzICVzICVzIHJldHVybnMgJXMiLCAiJXMgJXMgJXMiKSwKKwkJICAgIGZocC0+bmFt
ZSwgbW9kZV9zdHJpbmdbbG9ja21vZGVdLAorCQkgICAgbm93YWl0ID8gIm5vd2FpdCIgOiAiIiwg
ZGJfc3RyZXJyb3IocmV0KSk7CiAKIAlpZiAocmV0ID09IDApCiAJCXJldHVybiAoMCk7CkBAIC01
MywxMiArMTEwLDI5IEBACiAJCV9fZGJfc3lzZXJyKGVudiwgcmV0LCBEQl9TVFIoIjAxMzkiLCAi
ZmNudGwiKSk7CiAJcmV0dXJuICh0X3JldCk7CiAjZWxzZQorCXJldCA9IF9fb3NfZmlsZWxvY2tp
bmdfbm90c3VwKGVudik7CiAJQ09NUFFVSUVUKGZocCwgTlVMTCk7Ci0JQ09NUFFVSUVUKGFjcXVp
cmUsIDApOworCUNPTVBRVUlFVChsb2NrbW9kZSwgMCk7CiAJQ09NUFFVSUVUKG5vd2FpdCwgMCk7
CiAJQ09NUFFVSUVUKG9mZnNldCwgMCk7CisJcmV0dXJuIChyZXQpCisjZW5kaWYKK30KKworCisj
aWYgIWRlZmluZWQoSEFWRV9GQ05UTCkgfHwgIWRlZmluZWQoSEFWRV9GTE9DSykKKy8qCisgKiBf
X29zX2ZpbGVsb2NraW5nX25vdHN1cCAtLQorICoJR2VuZXJhdGUgYW4gZXJyb3IgbWVzc2FnZSBp
ZiBmY250bCgpIG9yIGZsb2NrKCkgaXMgcmVxdWVzdGVkIG9uIGEKKyAqCXBsYXRmb3JtIHRoYXQg
ZG9lcyBub3Qgc3VwcG9ydCBpdC4KKyAqCisgKi8KK3N0YXRpYyBpbnQKK19fb3NfZmlsZWxvY2tp
bmdfbm90c3VwKGVudikKKyAJRU5WICplbnY7Cit7CiAJX19kYl9zeXNlcnIoZW52LCBEQl9PUE5P
VFNVUCwgREJfU1RSKCIwMTQwIiwKIAkgICAgImFkdmlzb3J5IGZpbGUgbG9ja2luZyB1bmF2YWls
YWJsZSIpKTsKIAlyZXR1cm4gKERCX09QTk9UU1VQKTsKK30KICNlbmRpZgotfQotLS0gZGItNS4z
LjI4L3NyYy9vcy9vc19tYXAuYy5wdGhyZWFkcwkyMDEzLTA5LTA5IDE3OjM1OjA5LjAwMDAwMDAw
MCArMDIwMAorKysgZGItNS4zLjI4L3NyYy9vcy9vc19tYXAuYwkyMDE3LTA1LTE2IDA5OjMxOjMw
LjUzNTcxMzI3OSArMDIwMApAQCAtMzIsNyArMzIsNyBAQAogCiAvKgogICogX19vc19hdHRhY2gg
LS0KLSAqCUNyZWF0ZS9qb2luIGEgc2hhcmVkIG1lbW9yeSByZWdpb24uCisgKglDcmVhdGUvam9p
biBhICdzaGFyZWQnIHJlZ2lvbiBvZiBCZXJrZWxleSBEQiBtZW1vcnkuCiAgKgogICogUFVCTElD
OiBpbnQgX19vc19hdHRhY2ggX19QKChFTlYgKiwgUkVHSU5GTyAqLCBSRUdJT04gKikpOwogICov
CkBAIC01MCw2ICs1MCw3IEBACiAJICogc28gdGhlcmUgbXVzdCBiZSBhIHZhbGlkIGhhbmRsZS4K
IAkgKi8KIAlEQl9BU1NFUlQoZW52LCBlbnYgIT0gTlVMTCAmJiBlbnYtPmRiZW52ICE9IE5VTEwp
OworCURCX0FTU0VSVChlbnYsIGluZm9wLT5maHAgPT0gTlVMTCk7CiAJZGJlbnYgPSBlbnYtPmRi
ZW52OwogCiAJaWYgKERCX0dMT0JBTChqX3JlZ2lvbl9tYXApICE9IE5VTEwpIHsK
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1283384</attachid>
            <date>2017-05-30 06:22:00 -0400</date>
            <delta_ts>2017-06-19 08:48:34 -0400</delta_ts>
            <desc>rpm lock check patch</desc>
            <filename>db-5.3.28-rpm-lock-check.patch</filename>
            <type>text/plain</type>
            <size>1983</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">ZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5jLnJwbSBkYi01LjMuMjgvc3Jj
L2Vudi9lbnZfcmVnaW9uLmMKLS0tIGRiLTUuMy4yOC9zcmMvZW52L2Vudl9yZWdpb24uYy5ycG0J
MjAxNy0wNS0zMCAwOTo0MzozOS4yNzk2MjI4ODEgKzAyMDAKKysrIGRiLTUuMy4yOC9zcmMvZW52
L2Vudl9yZWdpb24uYwkyMDE3LTA1LTMwIDA5OjQzOjM5LjI4MDYyMjg2MiArMDIwMApAQCAtMjg5
LDcgKzI4OSw4IEBAIHVzZXJfbWFwX2Z1bmN0aW9uczoKIAogCWlmIChjcmVhdGVfb2sgJiYKIAkg
ICAgX19lbnZfY2hlY2tfcmVjcmVhdGUoZW52LCByZW52LCBzaWduYXR1cmUpID09IERCX09MRF9W
RVJTSU9OICYmCi0JICAgIChyZXQgPSBFTlZfUFJJTUFSWV9MT0NLKGVudiwgREJfTE9DS19XUklU
RSwgMSkpID09IDApIHsKKwkgICAgKHJldCA9IEVOVl9QUklNQVJZX0xPQ0soZW52LCBEQl9MT0NL
X1dSSVRFLCAxKSkgPT0gMCAmJgorICAgICAgICAocmV0ID0gX19ycG1fbG9ja19jaGVjayhlbnYp
KSA9PSAwICkgewogCQlpZiAoRkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBEQl9WRVJCX1JFQ09W
RVJZKSkKIAkJCV9fZGJfbXNnKGVudiwgIlJlY3JlYXRpbmcgaWRsZSBlbnZpcm9ubWVudCIpOwog
CQlGX1NFVChpbmZvcCwgUkVHSU9OX0NSRUFURV9PSyk7CmRpZmYgLXVwIGRiLTUuMy4yOC9zcmMv
b3Mvb3NfZmxvY2suYy5ycG0gZGItNS4zLjI4L3NyYy9vcy9vc19mbG9jay5jCi0tLSBkYi01LjMu
Mjgvc3JjL29zL29zX2Zsb2NrLmMucnBtCTIwMTctMDUtMzAgMDk6NDM6MzkuMjc4NjIyOTAxICsw
MjAwCisrKyBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMJMjAxNy0wNS0zMCAwOTo1OTo0Mi4z
NDU4NTk2MjIgKzAyMDAKQEAgLTE1LDYgKzE1LDQ2IEBAIHN0YXRpYyBpbnQgX19vc19maWxlbG9j
a2luZ19ub3RzdXAgX19QKCgKICNlbmRpZgogCiAvKgorICogX19ycG1fbG9ja19jaGVjayAtLQor
ICoJVHJ5IHRvIGFjcXVpcmUgYW5kIHJlbGVhc2UgYSBsb2NrIHVzZWQgYnkgcnBtIHRvIHNlZQor
ICoJaWYgbGliZGIgaXMgYmVpbmcgdXBkYXRlZCBhbmQgaXQgaXMgc2FmZSB0byBhY2Nlc3MKKyAq
CWl0cyBlbnZpcm9ubWVudCBmaWxlcy4KKyAqLworCitpbnQgX19ycG1fbG9ja19jaGVjayhlbnYp
CisgICAgRU5WICplbnY7Cit7CisjaWZkZWYgSEFWRV9GQ05UTAorICAgIHN0cnVjdCBmbG9jayBp
bmZvOworICAgIGludCBmZDsKKyAgICBmZCA9IG9wZW4oIi92YXIvbGliL3JwbS8ucnBtLmxvY2si
LCBPX1JEV1IpOworICAgIGlmIChmZCA9PSAtMSkKKyAgICAgICAgcmV0dXJuIDE7CisgICAgLyog
VHJ5IHRvIGdldCBhbiBleGNsdXNpdmUgbG9jayBvbiBycG0ncyBsb2NrIGZpbGUgKi8KKyAgICBp
bmZvLmxfdHlwZSA9IEZfV1JMQ0s7CisgICAgaW5mby5sX3doZW5jZSA9IFNFRUtfU0VUOworICAg
IGluZm8ubF9zdGFydCA9IDA7CisgICAgaW5mby5sX2xlbiA9IDA7CisgICAgaW5mby5sX3BpZCA9
IDA7CisgICAgaWYgKGZjbnRsKGZkLCBGX1NFVExLLCAmaW5mbykgPT0gLTEpIHsKKyAgICAgICAg
Y2xvc2UoZmQpOworICAgICAgICByZXR1cm4gMTsKKyAgICB9CisgICAgLyoKKyAgICAgKiBXZSBk
byBub3Qgd2FudCB0byBob2xkIHRoZSBsb2NrIGZvciB0aGUgZHVyYXRpb24KKyAgICAgKiBvZiB0
aGUgdXBkYXRlIHNvIHJlbGVhc2UgaXQgaW1tZWRpYXRlbHkuCisgICAgICovCisgICAgaW5mby5s
X3R5cGUgPSBGX1VOTENLOworICAgIGZjbnRsKGZkLCBGX1NFVExLLCAmaW5mbyk7CisgICAgY2xv
c2UoZmQpOworICAgIHJldHVybiAwOworI2Vsc2UKKyAgICAvKiBmY250bCBub3Qgc3VwcG9ydGVk
LCBmYWlsIHdpdGggZXJyb3IgbWVzc2FnZSAqLworICAgIHJldHVybiBfX29zX2ZpbGVsb2NraW5n
X25vdHN1cChlbnYpOworI2VuZGlmCit9CisKKy8qCiAgKiBfX29zX2ZkbG9jayAtLQogICoJQWNx
dWlyZS9yZWxlYXNlIGEgbG9jayBvbiBhIGJ5dGUgaW4gYSBmaWxlLgogICoK
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1284053</attachid>
            <date>2017-06-01 05:10:00 -0400</date>
            <delta_ts>2017-06-01 06:55:52 -0400</delta_ts>
            <desc>rpm lock check patch v2</desc>
            <filename>db-5.3.28-rpm-lock-check.patch</filename>
            <type>text/plain</type>
            <size>2170</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">ZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5jLnJwbWNoayBkYi01LjMuMjgv
c3JjL2Vudi9lbnZfcmVnaW9uLmMKLS0tIGRiLTUuMy4yOC9zcmMvZW52L2Vudl9yZWdpb24uYy5y
cG1jaGsJMjAxNy0wNi0wMSAxMDo0ODozOC42MzM4NjIwOTggKzAyMDAKKysrIGRiLTUuMy4yOC9z
cmMvZW52L2Vudl9yZWdpb24uYwkyMDE3LTA2LTAxIDEwOjQ4OjM4LjYzNDg2MjA3OSArMDIwMApA
QCAtMjg5LDcgKzI4OSw4IEBAIHVzZXJfbWFwX2Z1bmN0aW9uczoKIAogCWlmIChjcmVhdGVfb2sg
JiYKIAkgICAgX19lbnZfY2hlY2tfcmVjcmVhdGUoZW52LCByZW52LCBzaWduYXR1cmUpID09IERC
X09MRF9WRVJTSU9OICYmCi0JICAgIChyZXQgPSBFTlZfUFJJTUFSWV9MT0NLKGVudiwgREJfTE9D
S19XUklURSwgMSkpID09IDApIHsKKwkgICAgKHJldCA9IEVOVl9QUklNQVJZX0xPQ0soZW52LCBE
Ql9MT0NLX1dSSVRFLCAxKSkgPT0gMCAmJgorICAgICAgICAocmV0ID0gX19ycG1fbG9ja19jaGVj
ayhlbnYpKSA9PSAwICkgewogCQlpZiAoRkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBEQl9WRVJC
X1JFQ09WRVJZKSkKIAkJCV9fZGJfbXNnKGVudiwgIlJlY3JlYXRpbmcgaWRsZSBlbnZpcm9ubWVu
dCIpOwogCQlGX1NFVChpbmZvcCwgUkVHSU9OX0NSRUFURV9PSyk7CmRpZmYgLXVwIGRiLTUuMy4y
OC9zcmMvb3Mvb3NfZmxvY2suYy5ycG1jaGsgZGItNS4zLjI4L3NyYy9vcy9vc19mbG9jay5jCi0t
LSBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMucnBtY2hrCTIwMTctMDYtMDEgMTA6NDg6Mzgu
NjMzODYyMDk4ICswMjAwCisrKyBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMJMjAxNy0wNi0w
MSAxMDo0OTo0My43Njk1OTE5NDIgKzAyMDAKQEAgLTE1LDYgKzE1LDQ3IEBAIHN0YXRpYyBpbnQg
X19vc19maWxlbG9ja2luZ19ub3RzdXAgX19QKCgKICNlbmRpZgogCiAvKgorICogX19ycG1fbG9j
a19jaGVjayAtLQorICoJVHJ5IHRvIGFjcXVpcmUgYW5kIHJlbGVhc2UgYSBsb2NrIHVzZWQgYnkg
cnBtIHRvIHNlZQorICoJaWYgbGliZGIgaXMgYmVpbmcgdXBkYXRlZCBhbmQgaXQgaXMgc2FmZSB0
byBhY2Nlc3MKKyAqCWl0cyBlbnZpcm9ubWVudCBmaWxlcy4KKyAqCisgKglGSVhNRTogVGhpcyBm
dW5jdGlvbiBsZWFrcyB0aGUgZmlsZSBkZXNjcmlwdG9yIG9uIHB1cnBvc2UKKyAqCXNvIHRoYXQg
cnBtJ3MgdHJhbnNhY3Rpb24gbG9jayBpcyBub3QgZHJvcHBlZCBkdWUgdG8KKyAqCWhvdyBmY250
bCBsb2NrcyBpbnRlcmFjdCB3aXRoIGNsb3NlKDIpLgorICovCisKKyNkZWZpbmUgUlBNTE9DS19Q
QVRIIFNIQVJFRFNUQVRFRElSICIvcnBtLy5ycG0ubG9jayIKKworaW50IF9fcnBtX2xvY2tfY2hl
Y2soZW52KQorICAgIEVOViAqZW52OworeworI2lmZGVmIEhBVkVfRkNOVEwKKyAgICBzdHJ1Y3Qg
ZmxvY2sgaW5mbzsKKyAgICBpbnQgZmQ7CisgICAgaW50IHJldDsKKyAgICBmZCA9IG9wZW4oUlBN
TE9DS19QQVRILCBPX1JEV1IpOworICAgIGlmIChmZCA9PSAtMSkKKyAgICAgICAgcmV0dXJuIDE7
CisgICAgLyogVHJ5IHRvIGdldCBhbiBleGNsdXNpdmUgbG9jayBvbiBycG0ncyBsb2NrIGZpbGUg
Ki8KKyAgICBpbmZvLmxfdHlwZSA9IEZfV1JMQ0s7CisgICAgaW5mby5sX3doZW5jZSA9IFNFRUtf
U0VUOworICAgIGluZm8ubF9zdGFydCA9IDA7CisgICAgaW5mby5sX2xlbiA9IDA7CisgICAgaW5m
by5sX3BpZCA9IDA7CisgICAgLyogV2UgZG8gbm90IHdhbnQgdG8gaG9sZCBzbyBqdXN0IGNoZWNr
IGlmIHdlIGNhbiBnZXQgaXQgKi8KKyAgICBpZiAoKHJldCA9IGZjbnRsKGZkLCBGX0dFVExLLCAm
aW5mbykpICE9IC0xICYmIGluZm8ubF90eXBlID09IEZfVU5MQ0spCisgICAgICAgIC8qIExvY2sg
aXMgbm90IHRha2VuLCB0aGUgZW52aXJvbm1lbnQgY2FuIGJlIHJlYnVpbHQgKi8KKyAgICAgICAg
cmV0dXJuIDA7CisgICAgZWxzZQorICAgICAgICByZXR1cm4gMTsKKyNlbHNlCisgICAgLyogZmNu
dGwgbm90IHN1cHBvcnRlZCwgZmFpbCB3aXRoIGVycm9yIG1lc3NhZ2UgKi8KKyAgICByZXR1cm4g
X19vc19maWxlbG9ja2luZ19ub3RzdXAoZW52KTsKKyNlbmRpZgorfQorCisvKgogICogX19vc19m
ZGxvY2sgLS0KICAqCUFjcXVpcmUvcmVsZWFzZSBhIGxvY2sgb24gYSBieXRlIGluIGEgZmlsZS4K
ICAqCg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1284124</attachid>
            <date>2017-06-01 06:55:00 -0400</date>
            <delta_ts>2017-06-19 08:48:34 -0400</delta_ts>
            <desc>rpm lock check patch v3</desc>
            <filename>db-5.3.28-rpm-lock-check.patch</filename>
            <type>text/plain</type>
            <size>2339</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">ZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5jLnJwbWNoayBkYi01LjMuMjgv
c3JjL2Vudi9lbnZfcmVnaW9uLmMKLS0tIGRiLTUuMy4yOC9zcmMvZW52L2Vudl9yZWdpb24uYy5y
cG1jaGsJMjAxNy0wNi0wMSAxMjowOTo0OS4xOTE4OTE5NjUgKzAyMDAKKysrIGRiLTUuMy4yOC9z
cmMvZW52L2Vudl9yZWdpb24uYwkyMDE3LTA2LTAxIDEyOjA5OjQ5LjE5Mzg5MTkyOSArMDIwMApA
QCAtMjg5LDcgKzI4OSw4IEBAIHVzZXJfbWFwX2Z1bmN0aW9uczoKIAogCWlmIChjcmVhdGVfb2sg
JiYKIAkgICAgX19lbnZfY2hlY2tfcmVjcmVhdGUoZW52LCByZW52LCBzaWduYXR1cmUpID09IERC
X09MRF9WRVJTSU9OICYmCi0JICAgIChyZXQgPSBFTlZfUFJJTUFSWV9MT0NLKGVudiwgREJfTE9D
S19XUklURSwgMSkpID09IDApIHsKKwkgICAgKHJldCA9IEVOVl9QUklNQVJZX0xPQ0soZW52LCBE
Ql9MT0NLX1dSSVRFLCAxKSkgPT0gMCAmJgorICAgICAgICAocmV0ID0gX19ycG1fbG9ja19jaGVj
ayhlbnYpKSA9PSAwICkgewogCQlpZiAoRkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBEQl9WRVJC
X1JFQ09WRVJZKSkKIAkJCV9fZGJfbXNnKGVudiwgIlJlY3JlYXRpbmcgaWRsZSBlbnZpcm9ubWVu
dCIpOwogCQlGX1NFVChpbmZvcCwgUkVHSU9OX0NSRUFURV9PSyk7CmRpZmYgLXVwIGRiLTUuMy4y
OC9zcmMvb3Mvb3NfZmxvY2suYy5ycG1jaGsgZGItNS4zLjI4L3NyYy9vcy9vc19mbG9jay5jCi0t
LSBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMucnBtY2hrCTIwMTctMDYtMDEgMTI6MDk6NDku
MTkxODkxOTY1ICswMjAwCisrKyBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMJMjAxNy0wNi0w
MSAxMjoxNjoyOC4zMDkxNzU2NDUgKzAyMDAKQEAgLTE1LDYgKzE1LDUzIEBAIHN0YXRpYyBpbnQg
X19vc19maWxlbG9ja2luZ19ub3RzdXAgX19QKCgKICNlbmRpZgogCiAvKgorICogX19ycG1fbG9j
a19jaGVjayAtLQorICoJVHJ5IHRvIGFjcXVpcmUgYW5kIHJlbGVhc2UgYSBsb2NrIHVzZWQgYnkg
cnBtIHRvIHNlZQorICoJaWYgbGliZGIgaXMgYmVpbmcgdXBkYXRlZCBhbmQgaXQgaXMgc2FmZSB0
byBhY2Nlc3MKKyAqCWl0cyBlbnZpcm9ubWVudCBmaWxlcy4KKyAqCisgKglGSVhNRTogVGhpcyBm
dW5jdGlvbiBsZWFrcyB0aGUgZmlsZSBkZXNjcmlwdG9yIG9uIHB1cnBvc2UKKyAqCXNvIHRoYXQg
cnBtJ3MgdHJhbnNhY3Rpb24gbG9jayBpcyBub3QgZHJvcHBlZCBkdWUgdG8KKyAqCWhvdyBmY250
bCBsb2NrcyBpbnRlcmFjdCB3aXRoIGNsb3NlKDIpLgorICovCisKKyNkZWZpbmUgUlBNX1BBVEgg
U0hBUkVEU1RBVEVESVIgIi9ycG0iCisjZGVmaW5lIFJQTUxPQ0tfUEFUSCBSUE1fUEFUSCAiLy5y
cG0ubG9jayIKKworaW50IF9fcnBtX2xvY2tfY2hlY2soZW52KQorICAgIEVOViAqZW52Oworewor
I2lmZGVmIEhBVkVfRkNOVEwKKyAgICBzdHJ1Y3QgZmxvY2sgaW5mbzsKKyAgICBpbnQgZmQ7Cisg
ICAgaW50IHJldDsKKworICAgIGlmIChzdHJzdHIoZW52LT5kYl9ob21lLCBSUE1fUEFUSCkgPT0g
TlVMTCkKKyAgICAgICAgLyogTm8gbmVlZCB0byBjaGVjayB0aGUgdHJhbnNhY3Rpb24gbG9jayBp
ZiBub3QgaW4gcnBtICovCisgICAgICAgIHJldHVybiAwOworCisgICAgZmQgPSBvcGVuKFJQTUxP
Q0tfUEFUSCwgT19SRFdSKTsKKyAgICBpZiAoZmQgPT0gLTEpCisgICAgICAgIHJldHVybiAxOwor
ICAgIC8qIFRyeSB0byBnZXQgYW4gZXhjbHVzaXZlIGxvY2sgb24gcnBtJ3MgbG9jayBmaWxlICov
CisgICAgaW5mby5sX3R5cGUgPSBGX1dSTENLOworICAgIGluZm8ubF93aGVuY2UgPSBTRUVLX1NF
VDsKKyAgICBpbmZvLmxfc3RhcnQgPSAwOworICAgIGluZm8ubF9sZW4gPSAwOworICAgIGluZm8u
bF9waWQgPSAwOworICAgIC8qIFdlIGRvIG5vdCB3YW50IHRvIGhvbGQgc28ganVzdCBjaGVjayBp
ZiB3ZSBjYW4gZ2V0IGl0ICovCisgICAgaWYgKChyZXQgPSBmY250bChmZCwgRl9HRVRMSywgJmlu
Zm8pKSAhPSAtMSAmJiBpbmZvLmxfdHlwZSA9PSBGX1VOTENLKQorICAgICAgICAvKiBMb2NrIGlz
IG5vdCB0YWtlbiwgdGhlIGVudmlyb25tZW50IGNhbiBiZSByZWJ1aWx0ICovCisgICAgICAgIHJl
dHVybiAwOworICAgIGVsc2UKKyAgICAgICAgcmV0dXJuIDE7CisjZWxzZQorICAgIC8qIGZjbnRs
IG5vdCBzdXBwb3J0ZWQsIGZhaWwgd2l0aCBlcnJvciBtZXNzYWdlICovCisgICAgcmV0dXJuIF9f
b3NfZmlsZWxvY2tpbmdfbm90c3VwKGVudik7CisjZW5kaWYKK30KKworLyoKICAqIF9fb3NfZmRs
b2NrIC0tCiAgKglBY3F1aXJlL3JlbGVhc2UgYSBsb2NrIG9uIGEgYnl0ZSBpbiBhIGZpbGUuCiAg
Kgo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>1287101</attachid>
            <date>2017-06-12 16:28:00 -0400</date>
            <delta_ts>2017-06-12 16:28:27 -0400</delta_ts>
            <desc>failed upgrade</desc>
            <filename>upgrade.log</filename>
            <type>text/plain</type>
            <size>21287</size>
            <attacher name="Lukas Slebodnik">lslebodn</attacher>
            
              <data encoding="base64">W3Jvb3RAaG9zdCB+XSMgcnBtIC1xIGxpYmRiDQpsaWJkYi01LjMuMjgtMjEuZmMyNi54ODZfNjQN
Cg0KW3Jvb3RAaG9zdCB+XSMgZG5mIHVwZGF0ZSAteSAtLXJwbXZlcmJvc2l0eT1kZWJ1ZyBsaWJk
Yg0KTGFzdCBtZXRhZGF0YSBleHBpcmF0aW9uIGNoZWNrOiAwOjAwOjQ2IGFnbyBvbiBNb24gSnVu
IDEyIDIwOjIxOjEyIDIwMTcgVVRDLg0KRGVwZW5kZW5jaWVzIHJlc29sdmVkLg0KPT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT0NCiBQYWNrYWdlICAgICAgICAgIEFyY2ggICAgICAgIFZlcnNpb24gICAg
ICAgICAgICAgICAgUmVwb3NpdG9yeSAgICAgICAgICAgIFNpemUNCj09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09DQpVcGdyYWRpbmc6DQogbGliZGIgICAgICAgICAgICB4ODZfNjQgICAgICA1LjMuMjgt
MjIuZmMyNiAgICAgICAgIHVwZGF0ZXMtdGVzdGluZyAgICAgIDc0OSBrDQogbGliZGItdXRpbHMg
ICAgICB4ODZfNjQgICAgICA1LjMuMjgtMjIuZmMyNiAgICAgICAgIHVwZGF0ZXMtdGVzdGluZyAg
ICAgIDEzNyBrDQoNClRyYW5zYWN0aW9uIFN1bW1hcnkNCj09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
DQpVcGdyYWRlICAyIFBhY2thZ2VzDQoNClRvdGFsIGRvd25sb2FkIHNpemU6IDg4NyBrDQpEb3du
bG9hZGluZyBQYWNrYWdlczoNCigxLzIpOiBsaWJkYi11dGlscy01LjMuMjgtMjIuZmMyNi54ODZf
NjQucnBtICAgIDIuMSBNQi9zIHwgMTM3IGtCICAgICAwMDowMA0KKDIvMik6IGxpYmRiLTUuMy4y
OC0yMi5mYzI2Lng4Nl82NC5ycG0gICAgICAgICAgNy44IE1CL3MgfCA3NDkga0IgICAgIDAwOjAw
DQotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KVG90YWwgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgOTQ5IGtCL3MgfCA4ODcga0IgICAgIDAwOjAwDQpSdW5uaW5nIHRy
YW5zYWN0aW9uIGNoZWNrDQpUcmFuc2FjdGlvbiBjaGVjayBzdWNjZWVkZWQuDQpSdW5uaW5nIHRy
YW5zYWN0aW9uIHRlc3QNCmZkaW86ICAgICAgIDYgcmVhZHMsICAgIDE0NzU4IHRvdGFsIGJ5dGVz
IGluIDAuMDAwMDA5IHNlY3MNCmZkaW86ICAgICAgIDYgcmVhZHMsICAgIDIxMTI2IHRvdGFsIGJ5
dGVzIGluIDAuMDAwMDEyIHNlY3MNClRyYW5zYWN0aW9uIHRlc3Qgc3VjY2VlZGVkLg0KUnVubmlu
ZyB0cmFuc2FjdGlvbg0KICBQcmVwYXJpbmcgICAgICAgIDogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEvMQ0KICBVcGdyYWRpbmcgICAgICAg
IDogbGliZGItNS4zLjI4LTIyLmZjMjYueDg2XyBbPT09PT09PT09PT09PT09PT09PT09PT09PSBd
IDEvNHVmZGlvOiAgICAgIDU3IHdyaXRlcywgIDE4NDk3MjggdG90YWwgYnl0ZXMgaW4gMC4wMDE2
NTEgc2Vjcw0KdWZkaW86ICAgICAgIDEgd3JpdGVzLCAgICAgNzMxMCB0b3RhbCBieXRlcyBpbiAw
LjAwMDAxNCBzZWNzDQp1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDI2NTMwIHRvdGFsIGJ5dGVz
IGluIDAuMDAwMDI0IHNlY3MNCmZkaW86ICAgICAgOTQgcmVhZHMsICAxODg0OTMyIHRvdGFsIGJ5
dGVzIGluIDAuMDczOTM2IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLTUuMy4yOC0y
Mi5mYzI2Lng4Nl82NCAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLzQNCiAgUnVubmluZyBz
Y3JpcHRsZXQ6IGxpYmRiLTUuMy4yOC0yMi5mYzI2Lng4Nl82NCAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAxLzQNCkQ6IGNsb3NlZCAgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9QYWNr
YWdlcw0KRDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL0VuaGFuY2VuYW1l
DQpEOiBjbG9zZWQgICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vU3VwcGxlbWVudG5hbWUN
CkQ6IGNsb3NlZCAgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9TdWdnZXN0bmFtZQ0KRDog
Y2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL1JlY29tbWVuZG5hbWUNCkQ6IGNs
b3NlZCAgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9UcmFuc2ZpbGV0cmlnZ2VybmFtZQ0K
RDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL0ZpbGV0cmlnZ2VybmFtZQ0K
RDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL1NoYTFoZWFkZXINCkQ6IGNs
b3NlZCAgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9TaWdtZDUNCkQ6IGNsb3NlZCAgIGRi
IGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9JbnN0YWxsdGlkDQpEOiBjbG9zZWQgICBkYiBpbmRl
eCAgICAgICAvdmFyL2xpYi9ycG0vRGlybmFtZXMNCkQ6IGNsb3NlZCAgIGRiIGluZGV4ICAgICAg
IC92YXIvbGliL3JwbS9UcmlnZ2VybmFtZQ0KRDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zh
ci9saWIvcnBtL09ic29sZXRlbmFtZQ0KRDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9s
aWIvcnBtL0NvbmZsaWN0bmFtZQ0KRDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIv
cnBtL1Byb3ZpZGVuYW1lDQpEOiBjbG9zZWQgICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0v
UmVxdWlyZW5hbWUNCkQ6IGNsb3NlZCAgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9Hcm91
cA0KRDogY2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL0Jhc2VuYW1lcw0KRDog
Y2xvc2VkICAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL05hbWUNCkQ6IGNsb3NlZCAgIGRi
IGVudmlyb25tZW50IC92YXIvbGliL3JwbQ0KRDogb3BlbmluZyAgZGIgZW52aXJvbm1lbnQgL3Zh
ci9saWIvcnBtIGNkYjoweDQwMQ0KRDogb3BlbmluZyAgZGIgaW5kZXggICAgICAgL3Zhci9saWIv
cnBtL1BhY2thZ2VzIChub25lKSBtb2RlPTB4NDINCkQ6IHNhbml0eSBjaGVja2luZyA0IGVsZW1l
bnRzDQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vTmFtZSAobm9uZSkg
bW9kZT0weDQyDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayB0c21fcHJlIGluIHNlbGludXggcGx1
Z2luDQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vVHJhbnNmaWxldHJp
Z2dlcm5hbWUgKG5vbmUpIG1vZGU9MHg0Mg0KRDogb3BlbmluZyAgZGIgaW5kZXggICAgICAgL3Zh
ci9saWIvcnBtL0Rpcm5hbWVzIChub25lKSBtb2RlPTB4NDINCkQ6ICByZWFkIGgjICAgICA1MzEg
SGVhZGVyIFYzIFJTQS9TSEEyNTYgU2lnbmF0dXJlLCBrZXkgSUQgNjRkYWI4NWQ6IE9LDQpEOiB1
bmtub3duOiBsaWJkYi11dGlscy01LjMuMjgtMjEuZmMyNi54ODZfNjQgaGFzIDMwIGZpbGVzDQpE
OiBQbHVnaW46IGNhbGxpbmcgaG9vayBwc21fcHJlIGluIHNlbGludXggcGx1Z2luDQpEOiAgcmVh
ZCBoIyAgICAgNTIyIEhlYWRlciBWMyBSU0EvU0hBMjU2IFNpZ25hdHVyZSwga2V5IElEIDY0ZGFi
ODVkOiBPSw0KRDogdW5rbm93bjogbGliZGItNS4zLjI4LTIxLmZjMjYueDg2XzY0IGhhcyA3IGZp
bGVzDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBwc21fcHJlIGluIHNlbGludXggcGx1Z2luDQpE
OiBydW5uaW5nIHByZS10cmFuc2FjdGlvbiBzY3JpcHRzDQpEOiBjb21wdXRpbmcgNzQgZmlsZSBm
aW5nZXJwcmludHMNCkQ6IGV4Y2x1ZGluZyBkaXJlY3RvcnkgL3Vzci9zaGFyZS9kb2MvbGliZGIv
DQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vQmFzZW5hbWVzIChub25l
KSBtb2RlPTB4NDINCkQ6IG9wZW5pbmcgIGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9Hcm91
cCAobm9uZSkgbW9kZT0weDQyDQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9y
cG0vUmVxdWlyZW5hbWUgKG5vbmUpIG1vZGU9MHg0Mg0KRDogb3BlbmluZyAgZGIgaW5kZXggICAg
ICAgL3Zhci9saWIvcnBtL1Byb3ZpZGVuYW1lIChub25lKSBtb2RlPTB4NDINCkQ6IG9wZW5pbmcg
IGRiIGluZGV4ICAgICAgIC92YXIvbGliL3JwbS9Db25mbGljdG5hbWUgKG5vbmUpIG1vZGU9MHg0
Mg0KRDogb3BlbmluZyAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL09ic29sZXRlbmFtZSAo
bm9uZSkgbW9kZT0weDQyDQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0v
VHJpZ2dlcm5hbWUgKG5vbmUpIG1vZGU9MHg0Mg0KRDogb3BlbmluZyAgZGIgaW5kZXggICAgICAg
L3Zhci9saWIvcnBtL0luc3RhbGx0aWQgKG5vbmUpIG1vZGU9MHg0Mg0KRDogb3BlbmluZyAgZGIg
aW5kZXggICAgICAgL3Zhci9saWIvcnBtL1NpZ21kNSAobm9uZSkgbW9kZT0weDQyDQpEOiBvcGVu
aW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vU2hhMWhlYWRlciAobm9uZSkgbW9kZT0w
eDQyDQpEOiBvcGVuaW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vRmlsZXRyaWdnZXJu
YW1lIChub25lKSBtb2RlPTB4NDINCkQ6IG9wZW5pbmcgIGRiIGluZGV4ICAgICAgIC92YXIvbGli
L3JwbS9SZWNvbW1lbmRuYW1lIChub25lKSBtb2RlPTB4NDINCkQ6IG9wZW5pbmcgIGRiIGluZGV4
ICAgICAgIC92YXIvbGliL3JwbS9TdWdnZXN0bmFtZSAobm9uZSkgbW9kZT0weDQyDQpEOiBvcGVu
aW5nICBkYiBpbmRleCAgICAgICAvdmFyL2xpYi9ycG0vU3VwcGxlbWVudG5hbWUgKG5vbmUpIG1v
ZGU9MHg0Mg0KRDogb3BlbmluZyAgZGIgaW5kZXggICAgICAgL3Zhci9saWIvcnBtL0VuaGFuY2Vu
YW1lIChub25lKSBtb2RlPTB4NDINCkQ6IGNvbXB1dGluZyBmaWxlIGRpc3Bvc2l0aW9ucw0KRDog
MHgwMDAwZmQwNyAgICAgNDA5NiAgICAgMjU5MTk1NzUgICAgMTA0ODE2NzkyIC8NCkQ6ID09PT09
PT09PT0gKysrIGxpYmRiLTUuMy4yOC0yMi5mYzI2IHg4Nl82NC1saW51eCAweDINCkQ6IEV4cGVj
dGVkIHNpemU6ICAgICAgIDc2NzA2MiA9IGxlYWQoOTYpK3NpZ3MoNDMyNCkrcGFkKDQpK2RhdGEo
NzYyNjM4KQ0KRDogICBBY3R1YWwgc2l6ZTogICAgICAgNzY3MDYyDQpEOiBsaWJkYi01LjMuMjgt
MjIuZmMyNi54ODZfNjQ6IEhlYWRlciBWMyBSU0EvU0hBMjU2IFNpZ25hdHVyZSwga2V5IElEIDY0
ZGFiODVkOiBPSw0KRDogICBpbnN0YWxsOiBsaWJkYi01LjMuMjgtMjIuZmMyNi54ODZfNjQgaGFz
IDcgZmlsZXMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIHBzbV9wcmUgaW4gc2VsaW51eCBwbHVn
aW4NCkQ6ICByZWFkIGgjICAgICA0MDggSGVhZGVyIFYzIFJTQS9TSEEyNTYgU2lnbmF0dXJlLCBr
ZXkgSUQgNjRkYWI4NWQ6IE9LDQpEOiA9PT09PT09PT09IERpcmVjdG9yaWVzIG5vdCBleHBsaWNp
dGx5IGluY2x1ZGVkIGluIHBhY2thZ2U6DQpEOiAgICAgICAgICAwIC91c3IvbGliNjQvIA0KRDog
ICAgICAgICAgMyAvdXNyL3NoYXJlL2xpY2Vuc2VzLw0KRDogPT09PT09PT09PQ0KRDogY3JlYXRl
ICAgICAxMDA3NTUgIDEgKCAgIDAsICAgMCkxODQ5NzI4IC91c3IvbGliNjQvbGliZGItNS4zLnNv
OzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmlsZV9wcmVwYXJlIGluIHNl
bGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEyMDc3NyAgMSAoICAgMCwgICAwKSAgICAxMiAv
dXNyL2xpYjY0L2xpYmRiLTUuc287NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZz
bV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IHNraXBuc3RhdGUgMDQwNzU1ICAx
ICggICAwLCAgIDApICAgICAwIC91c3Ivc2hhcmUvZG9jL2xpYmRiDQpEOiBza2lwbnN0YXRlIDEw
MDY0NCAgMSAoICAgMCwgICAwKSAgIDI0MCAvdXNyL3NoYXJlL2RvYy9saWJkYi9SRUFETUU7NTkz
ZWY3ZWMNCkQ6IGNyZWF0ZSAgICAgMDQwNzU1ICAxICggICAwLCAgIDApICAgICAwIC91c3Ivc2hh
cmUvbGljZW5zZXMvbGliZGINCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZzbV9maWxlX3ByZXBh
cmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNyZWF0ZSAgICAgMTAwNjQ0ICAxICggICAwLCAgIDAp
ICA3MzEwIC91c3Ivc2hhcmUvbGljZW5zZXMvbGliZGIvTElDRU5TRTs1OTNlZjdlYw0KRDogUGx1
Z2luOiBjYWxsaW5nIGhvb2sgZnNtX2ZpbGVfcHJlcGFyZSBpbiBzZWxpbnV4IHBsdWdpbg0KRDog
Y3JlYXRlICAgICAxMDA2NDQgIDEgKCAgIDAsICAgMCkgMjY1MzAgL3Vzci9zaGFyZS9saWNlbnNl
cy9saWJkYi9sZ3BsLTIuMS50eHQ7NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZz
bV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGFkZGluZyAibGliZGIiIHRvIE5h
bWUgaW5kZXguDQpEOiBhZGRpbmcgNyBlbnRyaWVzIHRvIEJhc2VuYW1lcyBpbmRleC4NCkQ6IGFk
ZGluZyAiU3lzdGVtIEVudmlyb25tZW50L0xpYnJhcmllcyIgdG8gR3JvdXAgaW5kZXguDQpEOiBh
ZGRpbmcgMTggZW50cmllcyB0byBSZXF1aXJlbmFtZSBpbmRleC4NCkQ6IGFkZGluZyAzIGVudHJp
ZXMgdG8gUHJvdmlkZW5hbWUgaW5kZXguDQpEOiBhZGRpbmcgMSBlbnRyaWVzIHRvIENvbmZsaWN0
bmFtZSBpbmRleC4NCkQ6IGFkZGluZyA1IGVudHJpZXMgdG8gRGlybmFtZXMgaW5kZXguDQpEOiBh
ZGRpbmcgMSBlbnRyaWVzIHRvIEluc3RhbGx0aWQgaW5kZXguDQpEOiBhZGRpbmcgMSBlbnRyaWVz
IHRvIFNpZ21kNSBpbmRleC4NCkQ6IGFkZGluZyAiZDM1NDk3NzgwYjQ3MDEwNmM2OGQ3ODgwMTMy
NjEyNmMxM2QyYzU2MSIgdG8gU2hhMWhlYWRlciBpbmRleC4NCkQ6ICVwb3N0KGxpYmRiLTUuMy4y
OC0yMi5mYzI2Lng4Nl82NCk6IHNjcmlwdGxldCBzdGFydA0KRDogJXBvc3QobGliZGItNS4zLjI4
LTIyLmZjMjYueDg2XzY0KTogZXhlY3YoL3NiaW4vbGRjb25maWcpIHBpZCA2Mg0KRDogUGx1Z2lu
OiBjYWxsaW5nIGhvb2sgc2NyaXB0bGV0X2ZvcmtfcG9zdCBpbiBzZWxpbnV4IHBsdWdpbg0KRDog
JXBvc3QobGliZGItNS4zLjI4LTIyLmZjMjYueDg2XzY0KTogd2FpdHBpZCg2MikgcmMgNjIgc3Rh
dHVzIDANCmZkaW86ICAgICAgIDIgd3JpdGVzLCAgICAgIDM2OCB0b3RhbCBieXRlcyBpbiAwLjAw
MDAxMSBzZWNzDQpEOiAldHJpZ2dlcmluKG9wZW5sZGFwLXNlcnZlcnMtMi40LjQ0LTEwLmZjMjYu
eDg2XzY0KTogc2NyaXB0bGV0IHN0YXJ0DQpEOiAldHJpZ2dlcmluKG9wZW5sZGFwLXNlcnZlcnMt
Mi40LjQ0LTEwLmZjMjYueDg2XzY0KTogZXhlY3YoL2Jpbi9zaCkgcGlkIDYzDQpEOiBQbHVnaW46
IGNhbGxpbmcgaG9vayBzY3JpcHRsZXRfZm9ya19wb3N0IGluIHNlbGludXggcGx1Z2luDQorICdb
JyAyIC1lcSAyICddJw0KKysgc2VkICdzL1wuWzAtOV0qJC8vJw0KKysgcnBtIC1xICctLXFmPSV7
dmVyc2lvbn1cbicgbGliZGINCisrIHNvcnQgLXUNCisrIHdjIC1sDQplcnJvcjogZGI1IGVycm9y
KDUpIGZyb20gZGJlbnYtPm9wZW46IElucHV0L291dHB1dCBlcnJvcg0KZXJyb3I6IGNhbm5vdCBv
cGVuIFBhY2thZ2VzIGluZGV4IHVzaW5nIGRiNSAtIElucHV0L291dHB1dCBlcnJvciAoNSkNCmVy
cm9yOiBjYW5ub3Qgb3BlbiBQYWNrYWdlcyBkYXRhYmFzZSBpbiAvdmFyL2xpYi9ycG0NCmVycm9y
OiBkYjUgZXJyb3IoNSkgZnJvbSBkYmVudi0+b3BlbjogSW5wdXQvb3V0cHV0IGVycm9yDQplcnJv
cjogY2Fubm90IG9wZW4gUGFja2FnZXMgaW5kZXggdXNpbmcgZGI1IC0gSW5wdXQvb3V0cHV0IGVy
cm9yICg1KQ0KZXJyb3I6IGNhbm5vdCBvcGVuIFBhY2thZ2VzIGRhdGFiYXNlIGluIC92YXIvbGli
L3JwbQ0KKyAnWycgMSAnIT0nIDEgJ10nDQorIHJtIC1mIC92YXIvbGliL2xkYXAvcnBtX3VwZ3Jh
ZGVfbGliZGINCisgZXhpdCAwDQpEOiAldHJpZ2dlcmluKG9wZW5sZGFwLXNlcnZlcnMtMi40LjQ0
LTEwLmZjMjYueDg2XzY0KTogd2FpdHBpZCg2MykgcmMgNjMgc3RhdHVzIDANCmZkaW86ICAgICAg
IDYgcmVhZHMsICAgIDE0NzU4IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDA4IHNlY3MNCiAgVXBncmFk
aW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWyAgICAgICAgICAgICAgICAg
ICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDExMjMyIHRvdGFsIGJ5dGVz
IGluIDAuMDAwMDE5IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4y
OC0yMi5mYzIgWz09ICAgICAgICAgICAgICAgICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3
cml0ZXMsICAgIDE1MzQ0IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDM0IHNlY3MNCiAgVXBncmFkaW5n
ICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PSAgICAgICAgICAgICAgICAg
ICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDE1MzQ0IHRvdGFsIGJ5dGVzIGlu
IDAuMDAwMDIxIHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0y
Mi5mYzIgWz09PT0gICAgICAgICAgICAgICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0
ZXMsICAgIDE1Mzc2IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDE3IHNlY3MNCiAgVXBncmFkaW5nICAg
ICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PSAgICAgICAgICAgICAg
ICAgXSAyLzR1ZmRpbzogICAgICAgMyB3cml0ZXMsICAgIDY1ODY0IHRvdGFsIGJ5dGVzIGluIDAu
MDAwMDgwIHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5m
YzIgWz09PT09PT09PT0gICAgICAgICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMs
ICAgIDE1MzUyIHRvdGFsIGJ5dGVzIGluIDAuMDAwMDE4IHNlY3MNCiAgVXBncmFkaW5nICAgICAg
ICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09PSAgICAgICAgICAgICAg
XSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDI3NzkyIHRvdGFsIGJ5dGVzIGluIDAuMDAw
MDI1IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIg
Wz09PT09PT09PT09PT09ICAgICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAg
IDE1Mzg0IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDE1IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6
IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09PT09PT0gICAgICAgICAgXSAy
LzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDMyNjU2IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDI3
IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09
PT09PT09PT09PT09PT09ICAgICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDE1
MzY4IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDIwIHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxp
YmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09PT09PT09PSAgICAgICAgXSAyLzR1
ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDE1MzYwIHRvdGFsIGJ5dGVzIGluIDAuMDAwMDIwIHNl
Y3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09
PT09PT09PT09PT09PT09ICAgICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDE1MzQ0
IHRvdGFsIGJ5dGVzIGluIDAuMDAwMDE5IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRi
LXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09PT09PT09PT09PSAgICAgXSAyLzR1ZmRp
bzogICAgICAgMSB3cml0ZXMsICAgIDE5NTIwIHRvdGFsIGJ5dGVzIGluIDAuMDAwMDIyIHNlY3MN
CiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09
PT09PT09PT09PT09PT0gICAgXSAyLzR1ZmRpbzogICAgICAgMSB3cml0ZXMsICAgIDExMjMyIHRv
dGFsIGJ5dGVzIGluIDAuMDAwMDE0IHNlY3MNCiAgVXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0
aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09PT09PT09PT09PT09ICAgXSAyLzR1ZmRpbzog
ICAgICAgMSB3cml0ZXMsICAgIDExMjMyIHRvdGFsIGJ5dGVzIGluIDAuMDAwMDE4IHNlY3MNCiAg
VXBncmFkaW5nICAgICAgICA6IGxpYmRiLXV0aWxzLTUuMy4yOC0yMi5mYzIgWz09PT09PT09PT09
PT09PT09PT09PT09PT0gXSAyLzRmZGlvOiAgICAgMTU1IHJlYWRzLCAgIDMzNDk0NCB0b3RhbCBi
eXRlcyBpbiAwLjAxMzkxNSBzZWNzDQogIFVwZ3JhZGluZyAgICAgICAgOiBsaWJkYi11dGlscy01
LjMuMjgtMjIuZmMyNi54ODZfNjQgICAgICAgICAgICAgICAgICAgICAgMi80DQpEOiA9PT09PT09
PT09ICsrKyBsaWJkYi11dGlscy01LjMuMjgtMjIuZmMyNiB4ODZfNjQtbGludXggMHgyDQpEOiBF
eHBlY3RlZCBzaXplOiAgICAgICAxNDA3OTggPSBsZWFkKDk2KStzaWdzKDQzMjQpK3BhZCg0KStk
YXRhKDEzNjM3NCkNCkQ6ICAgQWN0dWFsIHNpemU6ICAgICAgIDE0MDc5OA0KRDogbGliZGItdXRp
bHMtNS4zLjI4LTIyLmZjMjYueDg2XzY0OiBIZWFkZXIgVjMgUlNBL1NIQTI1NiBTaWduYXR1cmUs
IGtleSBJRCA2NGRhYjg1ZDogT0sNCkQ6ICAgaW5zdGFsbDogbGliZGItdXRpbHMtNS4zLjI4LTIy
LmZjMjYueDg2XzY0IGhhcyAzMCBmaWxlcw0KRDogUGx1Z2luOiBjYWxsaW5nIGhvb2sgcHNtX3By
ZSBpbiBzZWxpbnV4IHBsdWdpbg0KRDogPT09PT09PT09PSBEaXJlY3RvcmllcyBub3QgZXhwbGlj
aXRseSBpbmNsdWRlZCBpbiBwYWNrYWdlOg0KRDogICAgICAgICAgMCAvdXNyL2Jpbi8gICANCkQ6
ID09PT09PT09PT0NCkQ6IGNyZWF0ZSAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDExMjMyIC91
c3IvYmluL2RiX2FyY2hpdmU7NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZzbV9m
aWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNyZWF0ZSAgICAgMTAwNzU1ICAxICgg
ICAwLCAgIDApIDE1MzQ0IC91c3IvYmluL2RiX2NoZWNrcG9pbnQ7NTkzZWY3ZWMNCkQ6IFBsdWdp
bjogY2FsbGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNy
ZWF0ZSAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE1MzQ0IC91c3IvYmluL2RiX2RlYWRsb2Nr
OzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmlsZV9wcmVwYXJlIGluIHNl
bGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM3NiAv
dXNyL2Jpbi9kYl9kdW1wOzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmls
ZV9wcmVwYXJlIGluIHNlbGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1NSAgMSAoICAg
MCwgICAwKSA2NTg2NCAvdXNyL2Jpbi9kYl9kdW1wMTg1OzU5M2VmN2VjDQpEOiBQbHVnaW46IGNh
bGxpbmcgaG9vayBmc21fZmlsZV9wcmVwYXJlIGluIHNlbGludXggcGx1Z2luDQpEOiBjcmVhdGUg
ICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM1MiAvdXNyL2Jpbi9kYl9ob3RiYWNrdXA7NTkz
ZWY3ZWMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51
eCBwbHVnaW4NCkQ6IGNyZWF0ZSAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDI3NzkyIC91c3Iv
YmluL2RiX2xvYWQ7NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZzbV9maWxlX3By
ZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNyZWF0ZSAgICAgMTAwNzU1ICAxICggICAwLCAg
IDApIDE1Mzg0IC91c3IvYmluL2RiX2xvZ192ZXJpZnk7NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2Fs
bGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNyZWF0ZSAg
ICAgMTAwNzU1ICAxICggICAwLCAgIDApIDMyNjU2IC91c3IvYmluL2RiX3ByaW50bG9nOzU5M2Vm
N2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmlsZV9wcmVwYXJlIGluIHNlbGludXgg
cGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM2OCAvdXNyL2Jp
bi9kYl9yZWNvdmVyOzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmlsZV9w
cmVwYXJlIGluIHNlbGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1NSAgMSAoICAgMCwg
ICAwKSAxNTM2MCAvdXNyL2Jpbi9kYl9yZXBsaWNhdGU7NTkzZWY3ZWMNCkQ6IFBsdWdpbjogY2Fs
bGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6IGNyZWF0ZSAg
ICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE1MzQ0IC91c3IvYmluL2RiX3N0YXQ7NTkzZWY3ZWMN
CkQ6IFBsdWdpbjogY2FsbGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVn
aW4NCkQ6IGNyZWF0ZSAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE5NTIwIC91c3IvYmluL2Ri
X3R1bmVyOzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBmc21fZmlsZV9wcmVwYXJl
IGluIHNlbGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAx
MTIzMiAvdXNyL2Jpbi9kYl91cGdyYWRlOzU5M2VmN2VjDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9v
ayBmc21fZmlsZV9wcmVwYXJlIGluIHNlbGludXggcGx1Z2luDQpEOiBjcmVhdGUgICAgIDEwMDc1
NSAgMSAoICAgMCwgICAwKSAxMTIzMiAvdXNyL2Jpbi9kYl92ZXJpZnk7NTkzZWY3ZWMNCkQ6IFBs
dWdpbjogY2FsbGluZyBob29rIGZzbV9maWxlX3ByZXBhcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6
IHNraXBuc3RhdGUgMTAwNjQ0ICAxICggICAwLCAgIDApICAyMjU2IC91c3Ivc2hhcmUvbWFuL21h
bjEvZGJfYXJjaGl2ZS4xLmd6OzU5M2VmN2VjDQpEOiBza2lwbnN0YXRlIDEwMDY0NCAgMSAoICAg
MCwgICAwKSAgMTYxMyAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX2NoZWNrcG9pbnQuMS5nejs1OTNl
ZjdlYw0KRDogc2tpcG5zdGF0ZSAxMDA2NDQgIDEgKCAgIDAsICAgMCkgIDE3MjggL3Vzci9zaGFy
ZS9tYW4vbWFuMS9kYl9kZWFkbG9jay4xLmd6OzU5M2VmN2VjDQpEOiBza2lwbnN0YXRlIDEwMDY0
NCAgMSAoICAgMCwgICAwKSAgMjY5NCAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX2R1bXAuMS5nejs1
OTNlZjdlYw0KRDogc2tpcG5zdGF0ZSAxMjA3NzcgIDEgKCAgIDAsICAgMCkgICAgMTIgL3Vzci9z
aGFyZS9tYW4vbWFuMS9kYl9kdW1wMTg1LjEuZ3o7NTkzZWY3ZWMNCkQ6IHNraXBuc3RhdGUgMTAw
NjQ0ICAxICggICAwLCAgIDApICAyNjcwIC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfaG90YmFja3Vw
LjEuZ3o7NTkzZWY3ZWMNCkQ6IHNraXBuc3RhdGUgMTAwNjQ0ICAxICggICAwLCAgIDApICAzNTMx
IC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfbG9hZC4xLmd6OzU5M2VmN2VjDQpEOiBza2lwbnN0YXRl
IDEwMDY0NCAgMSAoICAgMCwgICAwKSAgMjAzMiAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX2xvZ192
ZXJpZnkuMS5nejs1OTNlZjdlYw0KRDogc2tpcG5zdGF0ZSAxMDA2NDQgIDEgKCAgIDAsICAgMCkg
IDE2MjEgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl9wcmludGxvZy4xLmd6OzU5M2VmN2VjDQpEOiBz
a2lwbnN0YXRlIDEwMDY0NCAgMSAoICAgMCwgICAwKSAgMjE0MCAvdXNyL3NoYXJlL21hbi9tYW4x
L2RiX3JlY292ZXIuMS5nejs1OTNlZjdlYw0KRDogc2tpcG5zdGF0ZSAxMDA2NDQgIDEgKCAgIDAs
ICAgMCkgIDE2NzkgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl9yZXBsaWNhdGUuMS5nejs1OTNlZjdl
Yw0KRDogc2tpcG5zdGF0ZSAxMDA2NDQgIDEgKCAgIDAsICAgMCkgIDE5NzkgL3Vzci9zaGFyZS9t
YW4vbWFuMS9kYl9zdGF0LjEuZ3o7NTkzZWY3ZWMNCkQ6IHNraXBuc3RhdGUgMTAwNjQ0ICAxICgg
ICAwLCAgIDApICAgODM0IC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfdHVuZXIuMS5nejs1OTNlZjdl
Yw0KRDogc2tpcG5zdGF0ZSAxMDA2NDQgIDEgKCAgIDAsICAgMCkgIDE4NDYgL3Vzci9zaGFyZS9t
YW4vbWFuMS9kYl91cGdyYWRlLjEuZ3o7NTkzZWY3ZWMNCkQ6IHNraXBuc3RhdGUgMTAwNjQ0ICAx
ICggICAwLCAgIDApICAxNTYwIC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfdmVyaWZ5LjEuZ3o7NTkz
ZWY3ZWMNCkQ6IGFkZGluZyAibGliZGItdXRpbHMiIHRvIE5hbWUgaW5kZXguDQpEOiBhZGRpbmcg
MzAgZW50cmllcyB0byBCYXNlbmFtZXMgaW5kZXguDQpEOiBhZGRpbmcgIkFwcGxpY2F0aW9ucy9E
YXRhYmFzZXMiIHRvIEdyb3VwIGluZGV4Lg0KRDogYWRkaW5nIDE1IGVudHJpZXMgdG8gUmVxdWly
ZW5hbWUgaW5kZXguDQpEOiBhZGRpbmcgMiBlbnRyaWVzIHRvIFByb3ZpZGVuYW1lIGluZGV4Lg0K
RDogYWRkaW5nIDIgZW50cmllcyB0byBEaXJuYW1lcyBpbmRleC4NCkQ6IGFkZGluZyAxIGVudHJp
ZXMgdG8gSW5zdGFsbHRpZCBpbmRleC4NCkQ6IGFkZGluZyAxIGVudHJpZXMgdG8gU2lnbWQ1IGlu
ZGV4Lg0KRDogYWRkaW5nICJkMzc2OWQwMTk5ZTAwYTgxN2UyNTc2MDEwYjBhNDI5MWRhMGY5MTBi
IiB0byBTaGExaGVhZGVyIGluZGV4Lg0KZmRpbzogICAgICAgNiByZWFkcywgICAgMjExMjYgdG90
YWwgYnl0ZXMgaW4gMC4wMDAwMTggc2Vjcw0KICBDbGVhbnVwICAgICAgICAgIDogbGliZGItdXRp
bHMtNS4zLjI4LTIxLmZjMjYueDg2XzY0ICAgICAgICAgICAgICAgICAgICAgIDMvNA0KRDogPT09
PT09PT09PSArKysgbGliZGItdXRpbHMtNS4zLjI4LTIxLmZjMjYgeDg2XzY0LWxpbnV4IDB4Mg0K
RDogICAgIGVyYXNlOiBsaWJkYi11dGlscy01LjMuMjgtMjEuZmMyNi54ODZfNjQgaGFzIDMwIGZp
bGVzDQpEOiBQbHVnaW46IGNhbGxpbmcgaG9vayBwc21fcHJlIGluIHNlbGludXggcGx1Z2luDQpE
OiB1bmtub3duICAgIDAwMDAwMCAgMCAoICAgMCwgICAwKSAgICAgMCAvdXNyL3NoYXJlL21hbi9t
YW4xL2RiX3ZlcmlmeS4xLmd6DQpEOiB1bmtub3duICAgIDAwMDAwMCAgMCAoICAgMCwgICAwKSAg
ICAgMCAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX3VwZ3JhZGUuMS5neg0KRDogdW5rbm93biAgICAw
MDAwMDAgIDAgKCAgIDAsICAgMCkgICAgIDAgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl90dW5lci4x
Lmd6DQpEOiB1bmtub3duICAgIDAwMDAwMCAgMCAoICAgMCwgICAwKSAgICAgMCAvdXNyL3NoYXJl
L21hbi9tYW4xL2RiX3N0YXQuMS5neg0KRDogdW5rbm93biAgICAwMDAwMDAgIDAgKCAgIDAsICAg
MCkgICAgIDAgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl9yZXBsaWNhdGUuMS5neg0KRDogdW5rbm93
biAgICAwMDAwMDAgIDAgKCAgIDAsICAgMCkgICAgIDAgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl9y
ZWNvdmVyLjEuZ3oNCkQ6IHVua25vd24gICAgMDAwMDAwICAwICggICAwLCAgIDApICAgICAwIC91
c3Ivc2hhcmUvbWFuL21hbjEvZGJfcHJpbnRsb2cuMS5neg0KRDogdW5rbm93biAgICAwMDAwMDAg
IDAgKCAgIDAsICAgMCkgICAgIDAgL3Vzci9zaGFyZS9tYW4vbWFuMS9kYl9sb2dfdmVyaWZ5LjEu
Z3oNCkQ6IHVua25vd24gICAgMDAwMDAwICAwICggICAwLCAgIDApICAgICAwIC91c3Ivc2hhcmUv
bWFuL21hbjEvZGJfbG9hZC4xLmd6DQpEOiB1bmtub3duICAgIDAwMDAwMCAgMCAoICAgMCwgICAw
KSAgICAgMCAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX2hvdGJhY2t1cC4xLmd6DQpEOiB1bmtub3du
ICAgIDAwMDAwMCAgMCAoICAgMCwgICAwKSAgICAgMCAvdXNyL3NoYXJlL21hbi9tYW4xL2RiX2R1
bXAxODUuMS5neg0KRDogdW5rbm93biAgICAwMDAwMDAgIDAgKCAgIDAsICAgMCkgICAgIDAgL3Vz
ci9zaGFyZS9tYW4vbWFuMS9kYl9kdW1wLjEuZ3oNCkQ6IHVua25vd24gICAgMDAwMDAwICAwICgg
ICAwLCAgIDApICAgICAwIC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfZGVhZGxvY2suMS5neg0KRDog
dW5rbm93biAgICAwMDAwMDAgIDAgKCAgIDAsICAgMCkgICAgIDAgL3Vzci9zaGFyZS9tYW4vbWFu
MS9kYl9jaGVja3BvaW50LjEuZ3oNCkQ6IHVua25vd24gICAgMDAwMDAwICAwICggICAwLCAgIDAp
ICAgICAwIC91c3Ivc2hhcmUvbWFuL21hbjEvZGJfYXJjaGl2ZS4xLmd6DQpEOiBza2lwICAgICAg
IDEwMDc1NSAgMSAoICAgMCwgICAwKSAxMTIzMiAvdXNyL2Jpbi9kYl92ZXJpZnkNCkQ6IHNraXAg
ICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDExMjMyIC91c3IvYmluL2RiX3VwZ3JhZGUNCkQ6
IHNraXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE5NTIwIC91c3IvYmluL2RiX3R1bmVy
DQpEOiBza2lwICAgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM0NCAvdXNyL2Jpbi9kYl9z
dGF0DQpEOiBza2lwICAgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM2MCAvdXNyL2Jpbi9k
Yl9yZXBsaWNhdGUNCkQ6IHNraXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE1MzY4IC91
c3IvYmluL2RiX3JlY292ZXINCkQ6IHNraXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDMy
NjU2IC91c3IvYmluL2RiX3ByaW50bG9nDQpEOiBza2lwICAgICAgIDEwMDc1NSAgMSAoICAgMCwg
ICAwKSAxNTM4NCAvdXNyL2Jpbi9kYl9sb2dfdmVyaWZ5DQpEOiBza2lwICAgICAgIDEwMDc1NSAg
MSAoICAgMCwgICAwKSAyNzc5MiAvdXNyL2Jpbi9kYl9sb2FkDQpEOiBza2lwICAgICAgIDEwMDc1
NSAgMSAoICAgMCwgICAwKSAxNTM1MiAvdXNyL2Jpbi9kYl9ob3RiYWNrdXANCkQ6IHNraXAgICAg
ICAgMTAwNzU1ICAxICggICAwLCAgIDApIDY1ODY0IC91c3IvYmluL2RiX2R1bXAxODUNCkQ6IHNr
aXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE1Mzc2IC91c3IvYmluL2RiX2R1bXANCkQ6
IHNraXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApIDE1MzQ0IC91c3IvYmluL2RiX2RlYWRs
b2NrDQpEOiBza2lwICAgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxNTM0NCAvdXNyL2Jpbi9k
Yl9jaGVja3BvaW50DQpEOiBza2lwICAgICAgIDEwMDc1NSAgMSAoICAgMCwgICAwKSAxMTIzMiAv
dXNyL2Jpbi9kYl9hcmNoaXZlDQogIFJ1bm5pbmcgc2NyaXB0bGV0OiBsaWJkYi01LjMuMjgtMjEu
ZmMyNi54ODZfNjQgICAgICAgICAgICAgICAgICAgICAgICAgICAgNC80DQpmZGlvOiAgICAgICAy
IHdyaXRlcywgICAgICAzOTUgdG90YWwgYnl0ZXMgaW4gMC4wMDAwMTUgc2Vjcw0KRDogICAtLS0g
aCMgICAgIDUzMSBsaWJkYi11dGlscy01LjMuMjgtMjEuZmMyNi54ODZfNjQNCkQ6IGFkZGluZyAi
bGliZGItdXRpbHMiIHRvIE5hbWUgaW5kZXguDQpEOiBhZGRpbmcgMzAgZW50cmllcyB0byBCYXNl
bmFtZXMgaW5kZXguDQpEOiBhZGRpbmcgIkFwcGxpY2F0aW9ucy9EYXRhYmFzZXMiIHRvIEdyb3Vw
IGluZGV4Lg0KRDogYWRkaW5nIDE1IGVudHJpZXMgdG8gUmVxdWlyZW5hbWUgaW5kZXguDQpEOiBh
ZGRpbmcgMiBlbnRyaWVzIHRvIFByb3ZpZGVuYW1lIGluZGV4Lg0KRDogYWRkaW5nIDIgZW50cmll
cyB0byBEaXJuYW1lcyBpbmRleC4NCkQ6IGFkZGluZyAxIGVudHJpZXMgdG8gSW5zdGFsbHRpZCBp
bmRleC4NCkQ6IGFkZGluZyAxIGVudHJpZXMgdG8gU2lnbWQ1IGluZGV4Lg0KRDogYWRkaW5nICIz
ZTFkYmFjNjQwYjY1OGUxZWEyMmUxYzVmZWNmMmY0N2NjNjQxNWZiIiB0byBTaGExaGVhZGVyIGlu
ZGV4Lg0KRDogPT09PT09PT09PSArKysgbGliZGItNS4zLjI4LTIxLmZjMjYgeDg2XzY0LWxpbnV4
IDB4Mg0KRDogICAgIGVyYXNlOiBsaWJkYi01LjMuMjgtMjEuZmMyNi54ODZfNjQgaGFzIDcgZmls
ZXMNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIHBzbV9wcmUgaW4gc2VsaW51eCBwbHVnaW4NCkQ6
ICV0cmlnZ2VydW4ob3BlbmxkYXAtc2VydmVycy0yLjQuNDQtMTAuZmMyNi54ODZfNjQpOiBzY3Jp
cHRsZXQgc3RhcnQNCkQ6ICV0cmlnZ2VydW4ob3BlbmxkYXAtc2VydmVycy0yLjQuNDQtMTAuZmMy
Ni54ODZfNjQpOiBleGVjdigvYmluL3NoKSBwaWQgNzANCkQ6IFBsdWdpbjogY2FsbGluZyBob29r
IHNjcmlwdGxldF9mb3JrX3Bvc3QgaW4gc2VsaW51eCBwbHVnaW4NCisgJ1snIC1mIC92YXIvbGli
L2xkYXAvcnBtX3VwZ3JhZGVfbGliZGIgJ10nDQorIGV4aXQgMA0KRDogJXRyaWdnZXJ1bihvcGVu
bGRhcC1zZXJ2ZXJzLTIuNC40NC0xMC5mYzI2Lng4Nl82NCk6IHdhaXRwaWQoNzApIHJjIDcwIHN0
YXR1cyAwDQogIENsZWFudXAgICAgICAgICAgOiBsaWJkYi01LjMuMjgtMjEuZmMyNi54ODZfNjQg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgNC80DQpEOiBza2lwICAgICAgIDEwMDY0NCAgMSAo
ICAgMCwgICAwKSAyNjUzMCAvdXNyL3NoYXJlL2xpY2Vuc2VzL2xpYmRiL2xncGwtMi4xLnR4dA0K
RDogc2tpcCAgICAgICAxMDA2NDQgIDEgKCAgIDAsICAgMCkgIDczMTAgL3Vzci9zaGFyZS9saWNl
bnNlcy9saWJkYi9MSUNFTlNFDQpEOiBza2lwICAgICAgIDA0MDc1NSAgMiAoICAgMCwgICAwKSAg
ICAzOSAvdXNyL3NoYXJlL2xpY2Vuc2VzL2xpYmRiDQpEOiB1bmtub3duICAgIDAwMDAwMCAgMCAo
ICAgMCwgICAwKSAgICAgMCAvdXNyL3NoYXJlL2RvYy9saWJkYi9SRUFETUUNCkQ6IHVua25vd24g
ICAgMDAwMDAwICAwICggICAwLCAgIDApICAgICAwIC91c3Ivc2hhcmUvZG9jL2xpYmRiDQpEOiBz
a2lwICAgICAgIDEyMDc3NyAgMSAoICAgMCwgICAwKSAgICAxMiAvdXNyL2xpYjY0L2xpYmRiLTUu
c28NCkQ6IHNraXAgICAgICAgMTAwNzU1ICAxICggICAwLCAgIDApMTg0OTcyOCAvdXNyL2xpYjY0
L2xpYmRiLTUuMy5zbw0KICBSdW5uaW5nIHNjcmlwdGxldDogbGliZGItNS4zLjI4LTIxLmZjMjYu
eDg2XzY0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQvNA0KRDogJXBvc3R1bihsaWJkYi01
LjMuMjgtMjEuZmMyNi54ODZfNjQpOiBzY3JpcHRsZXQgc3RhcnQNCkQ6ICVwb3N0dW4obGliZGIt
NS4zLjI4LTIxLmZjMjYueDg2XzY0KTogZXhlY3YoL3NiaW4vbGRjb25maWcpIHBpZCA3MQ0KRDog
UGx1Z2luOiBjYWxsaW5nIGhvb2sgc2NyaXB0bGV0X2ZvcmtfcG9zdCBpbiBzZWxpbnV4IHBsdWdp
bg0KRDogJXBvc3R1bihsaWJkYi01LjMuMjgtMjEuZmMyNi54ODZfNjQpOiB3YWl0cGlkKDcxKSBy
YyA3MSBzdGF0dXMgMA0KZmRpbzogICAgICAgMiB3cml0ZXMsICAgICAgIDY0IHRvdGFsIGJ5dGVz
IGluIDAuMDAwMDExIHNlY3MNCkQ6ICAgLS0tIGgjICAgICA1MjIgbGliZGItNS4zLjI4LTIxLmZj
MjYueDg2XzY0DQpEOiBhZGRpbmcgImxpYmRiIiB0byBOYW1lIGluZGV4Lg0KRDogYWRkaW5nIDcg
ZW50cmllcyB0byBCYXNlbmFtZXMgaW5kZXguDQpEOiBhZGRpbmcgNyBlbnRyaWVzIHRvIEJhc2Vu
YW1lcyBpbmRleC4NCkQ6IGFkZGluZyAiU3lzdGVtIEVudmlyb25tZW50L0xpYnJhcmllcyIgdG8g
R3JvdXAgaW5kZXguDQpEOiBhZGRpbmcgMTggZW50cmllcyB0byBSZXF1aXJlbmFtZSBpbmRleC4N
CkQ6IGFkZGluZyAzIGVudHJpZXMgdG8gUHJvdmlkZW5hbWUgaW5kZXguDQpEOiBhZGRpbmcgMSBl
bnRyaWVzIHRvIENvbmZsaWN0bmFtZSBpbmRleC4NCkQ6IGFkZGluZyA1IGVudHJpZXMgdG8gRGly
bmFtZXMgaW5kZXguDQpEOiBhZGRpbmcgMSBlbnRyaWVzIHRvIEluc3RhbGx0aWQgaW5kZXguDQpE
OiBhZGRpbmcgMSBlbnRyaWVzIHRvIFNpZ21kNSBpbmRleC4NCkQ6IGFkZGluZyAiNDEzZTUwODJl
M2JmZGZmOTI2Njg0ZWE4MjdjYTY3ZmFjN2VkNjk0MCIgdG8gU2hhMWhlYWRlciBpbmRleC4NCkQ6
IHJ1bm5pbmcgcG9zdC10cmFuc2FjdGlvbiBzY3JpcHRzDQpEOiAldHJpZ2dlcmluKG1hbi1kYi0y
LjcuNi4xLTIuZmMyNi54ODZfNjQpOiBzY3JpcHRsZXQgc3RhcnQNCkQ6ICV0cmlnZ2VyaW4obWFu
LWRiLTIuNy42LjEtMi5mYzI2Lng4Nl82NCk6IGV4ZWN2KC9iaW4vc2gpIHBpZCA3Mg0KRDogUGx1
Z2luOiBjYWxsaW5nIGhvb2sgc2NyaXB0bGV0X2ZvcmtfcG9zdCBpbiBzZWxpbnV4IHBsdWdpbg0K
KyBNQU5fTk9fTE9DQUxFX1dBUk5JTkc9MSANCisgL3Vzci9iaW4vbWFuZGIgLXENCkQ6ICV0cmln
Z2VyaW4obWFuLWRiLTIuNy42LjEtMi5mYzI2Lng4Nl82NCk6IHdhaXRwaWQoNzIpIHJjIDcyIHN0
YXR1cyAwDQpmZGlvOiAgICAgICAyIHdyaXRlcywgICAgICAgNDggdG90YWwgYnl0ZXMgaW4gMC4w
MDAwMTUgc2Vjcw0KRDogdW5rbm93bihtYW4tZGItMi43LjYuMS0yLmZjMjYueDg2XzY0KTogc2Ny
aXB0bGV0IHN0YXJ0DQpEOiB1bmtub3duKG1hbi1kYi0yLjcuNi4xLTIuZmMyNi54ODZfNjQpOiBl
eGVjdigvYmluL3NoKSBwaWQgNzQNCkQ6IFBsdWdpbjogY2FsbGluZyBob29rIHNjcmlwdGxldF9m
b3JrX3Bvc3QgaW4gc2VsaW51eCBwbHVnaW4NCisgTUFOX05PX0xPQ0FMRV9XQVJOSU5HPTEgDQor
IC91c3IvYmluL21hbmRiIC1xDQpEOiB1bmtub3duKG1hbi1kYi0yLjcuNi4xLTIuZmMyNi54ODZf
NjQpOiB3YWl0cGlkKDc0KSByYyA3NCBzdGF0dXMgMA0KICBWZXJpZnlpbmcgICAgICAgIDogbGli
ZGItNS4zLjI4LTIyLmZjMjYueDg2XzY0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEvNA0K
ICBWZXJpZnlpbmcgICAgICAgIDogbGliZGItdXRpbHMtNS4zLjI4LTIyLmZjMjYueDg2XzY0ICAg
ICAgICAgICAgICAgICAgICAgIDIvNA0KICBWZXJpZnlpbmcgICAgICAgIDogbGliZGItNS4zLjI4
LTIxLmZjMjYueDg2XzY0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMvNA0KICBWZXJpZnlp
bmcgICAgICAgIDogbGliZGItdXRpbHMtNS4zLjI4LTIxLmZjMjYueDg2XzY0ICAgICAgICAgICAg
ICAgICAgICAgIDQvNA0KDQpVcGdyYWRlZDoNCiAgbGliZGIueDg2XzY0IDUuMy4yOC0yMi5mYzI2
ICAgICAgICAgbGliZGItdXRpbHMueDg2XzY0IDUuMy4yOC0yMi5mYzI2DQoNCkNvbXBsZXRlIQ0K
DQpbcm9vdEBob3N0IH5dIyBycG0gLXEgbGliZGINCmVycm9yOiBkYjUgZXJyb3IoNSkgZnJvbSBk
YmVudi0+b3BlbjogSW5wdXQvb3V0cHV0IGVycm9yDQplcnJvcjogY2Fubm90IG9wZW4gUGFja2Fn
ZXMgaW5kZXggdXNpbmcgZGI1IC0gSW5wdXQvb3V0cHV0IGVycm9yICg1KQ0KZXJyb3I6IGNhbm5v
dCBvcGVuIFBhY2thZ2VzIGRhdGFiYXNlIGluIC92YXIvbGliL3JwbQ0KZXJyb3I6IGRiNSBlcnJv
cig1KSBmcm9tIGRiZW52LT5vcGVuOiBJbnB1dC9vdXRwdXQgZXJyb3INCmVycm9yOiBjYW5ub3Qg
b3BlbiBQYWNrYWdlcyBpbmRleCB1c2luZyBkYjUgLSBJbnB1dC9vdXRwdXQgZXJyb3IgKDUpDQpl
cnJvcjogY2Fubm90IG9wZW4gUGFja2FnZXMgZGF0YWJhc2UgaW4gL3Zhci9saWIvcnBtDQpwYWNr
YWdlIGxpYmRiIGlzIG5vdCBpbnN0YWxsZWQ=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1289098</attachid>
            <date>2017-06-19 08:47:00 -0400</date>
            <delta_ts>2017-06-19 08:47:49 -0400</delta_ts>
            <desc>Cond var ppc fix</desc>
            <filename>db-5.3.28-condition-variable-ppc.patch</filename>
            <type>text/plain</type>
            <size>3427</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">ZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5jLnB0aHJlYWRzIGRiLTUuMy4y
OC9zcmMvZW52L2Vudl9yZWdpb24uYwotLS0gZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5j
LnB0aHJlYWRzCTIwMTctMDYtMTkgMDg6NDg6MTkuMzYyMzI1MDQ1ICswMjAwCisrKyBkYi01LjMu
Mjgvc3JjL2Vudi9lbnZfcmVnaW9uLmMJMjAxNy0wNi0xOSAwODo0OTozOC45MTA3NzM2NTMgKzAy
MDAKQEAgLTMwNSwxNSArMzA1LDcgQEAgdXNlcl9tYXBfZnVuY3Rpb25zOgogCQlnb3RvIGNyZWF0
aW9uOwogCX0KIAotICAgIC8qIFdlIGhhdmUgYW4gb2xkIGVudmlyb25tZW50IGJ1dCBjYW5ub3Qg
cmVidWlsZCBpdCBzYWZlbHkuICovCi0gICAgaWYgKHJldCA9PSBEQl9PTERfVkVSU0lPTikgewot
IAkJX19kYl9lcnJ4KGVudiwgREJfU1RSKCIxNTM5IiwKLQkJICAgICJCdWlsZCBzaWduYXR1cmUg
ZG9lc24ndCBtYXRjaCBlbnZpcm9ubWVudCIpKTsKLQkJcmV0ID0gREJfVkVSU0lPTl9NSVNNQVRD
SDsKLSAgICAgICAgZ290byBlcnI7Ci0gICAgfQotCglpZiAocmVudi0+bWFqdmVyICE9IERCX1ZF
UlNJT05fTUFKT1IgfHwKIAkgICAgcmVudi0+bWludmVyICE9IERCX1ZFUlNJT05fTUlOT1IpIHsK
IAkJLyoKIAkJICogU3BlY2lhbCBjYXNlIGEgcmVnaW9uIHRoYXQncyBhbGwgbnVsIGJ5dGVzLCBq
dXN0IHRyZWF0IGl0CkBAIC0zMzcsNiArMzI5LDIwIEBAIHVzZXJfbWFwX2Z1bmN0aW9uczoKIAkJ
Z290byBlcnI7CiAJfQogCisgICAgLyoKKyAgICAgKiBXZSBoYXZlIGFuIG9sZCBlbnZpcm9ubWVu
dCBidXQgY2Fubm90IHJlYnVpbGQgaXQgc2FmZWx5LgorICAgICAqIFRoZSBlbnZpcm9ubWVudCBt
aWdodCBzdGlsbCBiZSByZWFkYWJsZSBieSB0aGUgY3VycmVudCBwcm9jZXNzCisgICAgICogKG9u
bHkgdGhlIGxpYnB0aHJlYWQgdGltZXN0YW1wIGNoYW5nZWQpIGlmIHRoaXMgcHJvY2VzcyBpcyB0
aGUgb25lCisgICAgICogdGhhdCBpcyBob2xkaW5nIHRoZSBsb2NrIG9uIHRoZSByZWdpb24gZmls
ZSBhcyB3ZSBjYW4gYmUgc3VyZQorICAgICAqIHRoZSBlbnZpcm9ubWVudCBkaWQgbm90IGdldCBy
ZWJ1aWx0IHVuZGVyIG91ciBmZWV0LgorICAgICAqLworICAgIGlmIChyZXQgPT0gREJfT0xEX1ZF
UlNJT04gJiYgX19jaGVja19sb2NrX2ZuKGVudi0+bG9ja2ZocC0+bmFtZSwgZ2V0cGlkKCkpICkg
eworICAgICAgIF9fZGJfZXJyeChlbnYsIERCX1NUUigiMTUzOSIsCisgICAgICAgICAgICJCdWls
ZCBzaWduYXR1cmUgZG9lc24ndCBtYXRjaCBlbnZpcm9ubWVudCIpKTsKKyAgICAgICByZXQgPSBE
Ql9WRVJTSU9OX01JU01BVENIOworICAgICAgICBnb3RvIGVycjsKKyAgICB9CisKIAkvKgogCSAq
IENoZWNrIGlmIHRoZSBlbnZpcm9ubWVudCBoYXMgaGFkIGEgY2F0YXN0cm9waGljIGZhaWx1cmUu
CiAJICoKZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9vcy9vc19mbG9jay5jLnB0aHJlYWRzIGRiLTUu
My4yOC9zcmMvb3Mvb3NfZmxvY2suYwotLS0gZGItNS4zLjI4L3NyYy9vcy9vc19mbG9jay5jLnB0
aHJlYWRzCTIwMTctMDYtMTkgMDg6NDg6MTkuMzYyMzI1MDQ1ICswMjAwCisrKyBkYi01LjMuMjgv
c3JjL29zL29zX2Zsb2NrLmMJMjAxNy0wNi0xOSAwODo0ODoxOS4zNjQzMjUwMDYgKzAyMDAKQEAg
LTE1LDYgKzE1LDY1IEBAIHN0YXRpYyBpbnQgX19vc19maWxlbG9ja2luZ19ub3RzdXAgX19QKCgK
ICNlbmRpZgogCiAvKgorICogX19jaGVja19sb2NrX2ZuIC0tCisgKiBQYXJzZSAvcHJvYy9sb2Nr
cyB0byBzZWUgaWYgdGhlIGZpbGUgZGVzY3JpYmVkIGJ5ICdmbicgaXMgbG9ja2VkLgorICogQWRk
aXRpb25hbGx5IChpZiAncGlkJyBpcyBub3QgMCkgY2hlY2sgaWYgdGhlIHByb2Nlc3MgaG9sZGlu
ZworICogdGhlIGxvY2sgaGFzIHRoZSBzYW1lIHBpZCB2YWx1ZSBhcyAncGlkJy4KKyAqLworCitp
bnQgX19jaGVja19sb2NrX2ZuKGZuLCBwaWQpCisgICAgY2hhciAqZm47CisgICAgcGlkX3QgcGlk
OworeworICAgIEZJTEUqIGZwOworICAgIGNoYXIgYnVmZmVyW1BBVEhfTUFYXTsKKyAgICBjaGFy
ICp0b2tlbjsKKyAgICBpbnQgaSwgZmQsIGlub2RlOworICAgIHN0cnVjdCBzdGF0IHN0OworICAg
IHBpZF90IGxwaWQgPSAwOworCisgICAgaWYgKCFmbikKKyAgICAgICByZXR1cm4gLTE7CisKKyAg
ICBmcCA9IGZvcGVuKCIvcHJvYy9sb2NrcyIsICJyIik7CisgICAgaWYgKCFmcCkKKyAgICAgICAg
cmV0dXJuIC0xOworCisgICAgLyogR2V0IHRoZSBmaWxlJ3MgaW5vZGUgKi8KKyAgICBpZiAoc3Rh
dChmbiwgJnN0KSkKKyAgICAgICAgcmV0dXJuIC0xOworCisgICAgd2hpbGUgKGZnZXRzKGJ1ZmZl
ciwgc2l6ZW9mKGJ1ZmZlciksIGZwKSkKKyAgICAgICAgZm9yICh0b2tlbiA9IHN0cnRvayhidWZm
ZXIsICIgIiksIGkgPSAwOyB0b2tlbjsgdG9rZW4gPSBzdHJ0b2soTlVMTCwgIiAiKSwgaSsrKSB7
CisgICAgICAgICAgICAvKiBTYXZlIHRoZSBQSUQgKi8KKyAgICAgICAgICAgIGlmIChpID09IDQp
CisgICAgICAgICAgICAgICAgbHBpZCA9IGF0b2kodG9rZW4pOworICAgICAgICAgICAgLyogQ2hl
Y2sgdGhlIGlub2RlICovCisgICAgICAgICAgICBlbHNlIGlmIChpID09IDUpIHsKKyAgICAgICAg
ICAgICAgICBpbm9kZSA9IDA7CisgICAgICAgICAgICAgICAgc3NjYW5mKHRva2VuLCAiJSowMng6
JSowMng6JWQiLCAmaW5vZGUpOworICAgICAgICAgICAgICAgIC8qIE5vdCB0aGUgaW5vZGUgd2Ug
YXJlIGxvb2tpbmcgZm9yICovCisgICAgICAgICAgICAgICAgaWYgKGlub2RlICE9IHN0LnN0X2lu
bykKKyAgICAgICAgICAgICAgICAgICAgY29udGludWU7CisgICAgICAgICAgICAgICAgLyoKKyAg
ICAgICAgICAgICAgICAgKiBXZSBoYXZlIHRoZSBjb3JyZWN0IGZpbGUuCisgICAgICAgICAgICAg
ICAgICogV2UgYXJlIGVpdGhlciBsb29raW5nIGZvciBhIHNwZWNpZmljIHByb2Nlc3Mgb3Igd2Ug
ZG8gbm90IGNhcmUgYXQgYWxsLgorICAgICAgICAgICAgICAgICAqLworICAgICAgICAgICAgICAg
IGlmICghcGlkIHx8IGxwaWQgPT0gcGlkKSB7CisgICAgICAgICAgICAgICAgICAgIGZjbG9zZShm
cCk7CisgICAgICAgICAgICAgICAgICAgIHJldHVybiAwOworICAgICAgICAgICAgICAgIH0KKyAg
ICAgICAgICAgICAgICAvKiBOb3QgdGhlIGxvY2sgd2UgYXJlIGxvb2tpbmcgZm9yICovCisgICAg
ICAgICAgICB9CisgICAgICAgICAgICAvKiBEbyBub3QgcGFyc2UgYW55IG90aGVyIGZpZWxkcyAq
LworICAgICAgICAgICAgZWxzZSBpZiAoaSA+IDUpCisgICAgICAgICAgICAgICAgYnJlYWs7Cisg
ICAgICAgIH0KKyAgICBmY2xvc2UoZnApOworICAgIHJldHVybiAxOworfQorCisvKgogICogX19v
c19mZGxvY2sgLS0KICAqCUFjcXVpcmUvcmVsZWFzZSBhIGxvY2sgb24gYSBieXRlIGluIGEgZmls
ZS4KICAqCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>1289099</attachid>
            <date>2017-06-19 08:48:00 -0400</date>
            <delta_ts>2017-06-19 08:48:34 -0400</delta_ts>
            <desc>rpm lock check patch v4</desc>
            <filename>db-5.3.28-rpm-lock-check.patch</filename>
            <type>text/plain</type>
            <size>2619</size>
            <attacher name="Petr Kubat">pkubat</attacher>
            
              <data encoding="base64">ZGlmZiAtdXAgZGItNS4zLjI4L3NyYy9lbnYvZW52X3JlZ2lvbi5jLnJwbWxvY2sgZGItNS4zLjI4
L3NyYy9lbnYvZW52X3JlZ2lvbi5jCi0tLSBkYi01LjMuMjgvc3JjL2Vudi9lbnZfcmVnaW9uLmMu
cnBtbG9jawkyMDE3LTA2LTE5IDA5OjUzOjQyLjcyNzcxNTM3NCArMDIwMAorKysgZGItNS4zLjI4
L3NyYy9lbnYvZW52X3JlZ2lvbi5jCTIwMTctMDYtMTkgMDk6NTU6MjguMTk1Njg4MjIwICswMjAw
CkBAIC0yOTEsMTggKzI5MSwyMyBAQCB1c2VyX21hcF9mdW5jdGlvbnM6CiAJaWYgKGNyZWF0ZV9v
ayAmJgogCSAgICByZXQgPT0gREJfT0xEX1ZFUlNJT04gJiYKIAkgICAgRU5WX1BSSU1BUllfTE9D
SyhlbnYsIERCX0xPQ0tfV1JJVEUsIDEpID09IDApIHsKLQkJaWYgKEZMRF9JU1NFVChkYmVudi0+
dmVyYm9zZSwgREJfVkVSQl9SRUNPVkVSWSkpCi0JCQlfX2RiX21zZyhlbnYsICJSZWNyZWF0aW5n
IGlkbGUgZW52aXJvbm1lbnQiKTsKLQkJRl9TRVQoaW5mb3AsIFJFR0lPTl9DUkVBVEVfT0spOwor
CQkvKiBJZiB0aGUgcnBtIHRyYW5zYWNyaW9uIGxvY2sgaXMgdGFrZW4gd2UgY2Fubm90IHNhZmVs
eSByZWJ1aWxkICovCisgICAgICAgIGlmICghX19ycG1fbG9ja19mcmVlKGVudikpCisgICAgICAg
ICAgICBFTlZfUFJJTUFSWV9VTkxPQ0soZW52KTsKKyAgICAgICAgZWxzZSB7CisgICAgICAgICAg
ICBpZiAoRkxEX0lTU0VUKGRiZW52LT52ZXJib3NlLCBEQl9WRVJCX1JFQ09WRVJZKSkKKyAgICAg
ICAgICAgICAgICBfX2RiX21zZyhlbnYsICJSZWNyZWF0aW5nIGlkbGUgZW52aXJvbm1lbnQiKTsK
KyAgICAgICAgICAgIEZfU0VUKGluZm9wLCBSRUdJT05fQ1JFQVRFX09LKTsKIAotCQkvKgotCQkg
KiBEZXRhY2ggZnJvbSB0aGUgZW52aXJvbm1lbnQgcmVnaW9uOyB3ZSBuZWVkIHRvIHVubWFwIGl0
IChhbmQKLQkJICogY2xvc2UgYW55IGZpbGUgaGFuZGxlKSBzbyB0aGF0IHdlIGRvbid0IGxlYWsg
bWVtb3J5IG9yIGZpbGVzLgotCQkgKi8KLQkJREJfQVNTRVJUKGVudiwgaW5mb3AtPnJwID09IE5V
TEwpOwotCQlpbmZvcC0+cnAgPSAmdHJlZ2lvbjsKLQkJKHZvaWQpX19lbnZfc3lzX2RldGFjaChl
bnYsIGluZm9wLCAwKTsKLQkJZ290byBjcmVhdGlvbjsKKyAgICAgICAgICAgIC8qCisgICAgICAg
ICAgICAgKiBEZXRhY2ggZnJvbSB0aGUgZW52aXJvbm1lbnQgcmVnaW9uOyB3ZSBuZWVkIHRvIHVu
bWFwIGl0IChhbmQKKyAgICAgICAgICAgICAqIGNsb3NlIGFueSBmaWxlIGhhbmRsZSkgc28gdGhh
dCB3ZSBkb24ndCBsZWFrIG1lbW9yeSBvciBmaWxlcy4KKyAgICAgICAgICAgICAqLworICAgICAg
ICAgICAgREJfQVNTRVJUKGVudiwgaW5mb3AtPnJwID09IE5VTEwpOworICAgICAgICAgICAgaW5m
b3AtPnJwID0gJnRyZWdpb247CisgICAgICAgICAgICAodm9pZClfX2Vudl9zeXNfZGV0YWNoKGVu
diwgaW5mb3AsIDApOworICAgICAgICAgICAgZ290byBjcmVhdGlvbjsKKyAgICAgICAgfQogCX0K
IAogCWlmIChyZW52LT5tYWp2ZXIgIT0gREJfVkVSU0lPTl9NQUpPUiB8fApkaWZmIC11cCBkYi01
LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMucnBtbG9jayBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2Nr
LmMKLS0tIGRiLTUuMy4yOC9zcmMvb3Mvb3NfZmxvY2suYy5ycG1sb2NrCTIwMTctMDYtMTkgMDk6
NTI6NDkuNDE4NzQwMDA0ICswMjAwCisrKyBkYi01LjMuMjgvc3JjL29zL29zX2Zsb2NrLmMJMjAx
Ny0wNi0xOSAwOTo1MzoxNi40MjgyMjA4NjYgKzAyMDAKQEAgLTcwLDYgKzcwLDM0IEBAIGludCBf
X2NoZWNrX2xvY2tfZm4oZm4sIHBpZCkKIH0KIAogLyoKKyAqIF9fcnBtX2xvY2tfZnJlZSAtLQor
ICogVHJ5IHRvIGxvb2sgYXQgYSBsb2NrIHVzZWQgYnkgcnBtIHRvIHNlZSBpZiBsaWJkYiBpcyBi
ZWluZworICogdXBkYXRlZCBhbmQgaXQgaXMgc2FmZSB0byBhY2Nlc3MgaXRzIGVudmlyb25tZW50
IGZpbGVzLgorICovCisKKyNkZWZpbmUgUlBNX1BBVEggU0hBUkVEU1RBVEVESVIgIi9ycG0iCisj
ZGVmaW5lIFJQTUxPQ0tfUEFUSCBSUE1fUEFUSCAiLy5ycG0ubG9jayIKKworaW50IF9fcnBtX2xv
Y2tfZnJlZShlbnYpCisgICAgRU5WICplbnY7Cit7CisgICAgaW50IHJldDsKKworICAgIC8qIE5v
IG5lZWQgdG8gY2hlY2sgdGhlIHRyYW5zYWN0aW9uIGxvY2sgaWYgbm90IGluIHJwbSAqLworICAg
IGlmIChzdHJzdHIoZW52LT5kYl9ob21lLCBSUE1fUEFUSCkgPT0gTlVMTCkKKyAgICAgICAgcmV0
dXJuIDE7CisKKyAgICAvKiBBc3N1bWUgaXQgaXMgc2FmZSB0byByZWJ1aWxkIGlmIHRoZSBsb2Nr
IGZpbGUgZG9lcyBub3QgZXhpc3QgKi8KKyAgICBpZiAoYWNjZXNzKFJQTUxPQ0tfUEFUSCwgRl9P
SykgJiYgZXJybm8gPT0gRU5PRU5UKQorICAgICAgICByZXR1cm4gMTsKKworICAgIHJldCA9IF9f
Y2hlY2tfbG9ja19mbihSUE1MT0NLX1BBVEgsIDApOworICAgIC8qIF9fY2hlY2tfbG9ja19mbiBj
YW4gcmV0dXJuIC0xIG9uIGZhaWx1cmUgLSByZXR1cm4gMCAodGFrZW4pIGluc3RlYWQgKi8KKyAg
ICByZXR1cm4gcmV0ID09IC0xID8gMDogcmV0OworCit9CisKKy8qCiAgKiBfX29zX2ZkbG9jayAt
LQogICoJQWNxdWlyZS9yZWxlYXNlIGEgbG9jayBvbiBhIGJ5dGUgaW4gYSBmaWxlLgogICoK
</data>

          </attachment>
      

    </bug>

</bugzilla>